
freqAnal.elf:     file format elf32-littlenios2
freqAnal.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000065d0 memsz 0x000065d0 flags r-x
    LOAD off    0x000075f0 vaddr 0x000465f0 paddr 0x00048090 align 2**12
         filesz 0x00001aa0 memsz 0x00001aa0 flags rw-
    LOAD off    0x00009b30 vaddr 0x00049b30 paddr 0x00049b30 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000622c  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000180  00046470  00046470  00007470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aa0  000465f0  00048090  000075f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00049b30  00049b30  00009b30  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00049c84  00049c84  00009090  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ac8  00000000  00000000  000090b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016f05  00000000  00000000  00009b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006539  00000000  00000000  00020a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006e17  00000000  00000000  00026fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001654  00000000  00000000  0002ddd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000029e1  00000000  00000000  0002f42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005c0e  00000000  00000000  00031e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00037a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000007c0  00000000  00000000  00037a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003a80a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003a80d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003a810  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003a811  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003a812  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003a81b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003a824  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  0003a82d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000027  00000000  00000000  0003a83b  2**0
                  CONTENTS, READONLY
 26 .jdi          00005778  00000000  00000000  0003a862  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00062170  00000000  00000000  0003ffda  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
00046470 l    d  .rodata	00000000 .rodata
000465f0 l    d  .rwdata	00000000 .rwdata
00049b30 l    d  .bss	00000000 .bss
00049c84 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../freqAnal_bsp//obj/HAL/src/crt0.o
0004028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00041328 l     F .text	00000008 __fp_unlock
0004133c l     F .text	0000019c __sinit.part.1
000414d8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00046618 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
00043dd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00043edc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00043f08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043ff4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000440d4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000441c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00044394 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00048080 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000445e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00044714 l     F .text	00000034 alt_dev_reg
00046fec l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000449ec l     F .text	0000020c altera_avalon_jtag_uart_irq
00044bf8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000453a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00045818 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00045958 l     F .text	0000003c alt_get_errno
00045994 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00049b58 g     O .bss	00000004 alt_instruction_exception_handler
00043d7c g     F .text	00000054 _isatty_r
000442d0 g     F .text	0000007c alt_main
000411bc g     F .text	000000c0 _puts_r
00049b84 g     O .bss	00000100 alt_irq
00043aa4 g     F .text	00000060 _lseek_r
00048090 g       *ABS*	00000000 __flash_rwdata_start
000465f0 g     O .rwdata	00000028 numberMap
00049c84 g       *ABS*	00000000 __alt_heap_start
00043058 g     F .text	0000005c __sseek
00041678 g     F .text	00000010 __sinit
000414e0 g     F .text	00000068 __sfmoreglue
00044370 g     F .text	00000024 __malloc_unlock
000407bc g     F .text	00000440 .hidden __divsf3
00042744 g     F .text	0000015c memmove
00041660 g     F .text	00000018 _cleanup
00040ff8 g     F .text	00000070 .hidden __fixsfsi
00045d50 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00043d20 g     F .text	0000005c _fstat_r
00049b3c g     O .bss	00000004 errno
00042fd4 g     F .text	00000008 __seofread
00049b44 g     O .bss	00000004 alt_argv
0005004c g       *ABS*	00000000 _gp
00046e6c g     O .rwdata	00000180 alt_fd_list
00045d74 g     F .text	00000090 alt_find_dev
000425fc g     F .text	00000148 memcpy
00041330 g     F .text	0000000c _cleanup_r
000458dc g     F .text	0000007c alt_io_redirect
00046470 g       *ABS*	00000000 __DTOR_END__
0004127c g     F .text	00000014 puts
00046040 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00044df0 g     F .text	0000021c altera_avalon_jtag_uart_read
00040700 g     F .text	00000064 .hidden __udivsi3
00044030 g     F .text	000000a4 isatty
0004804c g     O .rwdata	00000004 peakToPeak_t
00045fb0 g     F .text	00000090 alt_icache_flush
00049b38 g     O .bss	00000004 __malloc_top_pad
000416c8 g     F .text	000004bc __sfvwrite_r
00042f2c g     F .text	00000054 _sbrk_r
00048054 g     O .rwdata	00000004 inNS
00043cc0 g     F .text	00000060 _read_r
00048078 g     O .rwdata	00000004 alt_max_fd
000432c4 g     F .text	000000f0 _fclose_r
00043640 g     F .text	00000030 fflush
00049b34 g     O .bss	00000004 __malloc_max_sbrked_mem
000441fc g     F .text	000000d4 lseek
00048058 g     O .rwdata	00000004 _global_impure_ptr
000429c8 g     F .text	00000564 _realloc_r
00049c84 g       *ABS*	00000000 __bss_end
00045728 g     F .text	000000f0 alt_iic_isr_register
00045c48 g     F .text	00000108 alt_tick
00041698 g     F .text	00000018 __fp_lock_all
000456dc g     F .text	0000004c alt_ic_irq_enabled
00045bac g     F .text	0000009c alt_alarm_stop
00049b4c g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00046e44 g     O .rwdata	00000028 alt_dev_null
0004535c g     F .text	00000048 alt_dcache_flush_all
00048090 g       *ABS*	00000000 __ram_rwdata_end
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
00048070 g     O .rwdata	00000008 alt_dev_list
0004461c g     F .text	000000f8 write
000465f0 g       *ABS*	00000000 __ram_rodata_end
00043f44 g     F .text	000000b0 fstat
00040764 g     F .text	00000058 .hidden __umodsi3
00049c84 g       *ABS*	00000000 end
0004492c g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00046470 g       *ABS*	00000000 __CTOR_LIST__
00067100 g       *ABS*	00000000 __alt_stack_pointer
00041158 g     F .text	00000064 .hidden __clzsi2
0004500c g     F .text	00000224 altera_avalon_jtag_uart_write
00041688 g     F .text	00000004 __sfp_lock_acquire
00042518 g     F .text	000000e4 memchr
00043794 g     F .text	00000310 _free_r
000462bc g     F .text	00000180 __call_exitprocs
00048060 g     O .rwdata	00000004 __malloc_sbrk_base
00040244 g     F .text	0000004c _start
00049b50 g     O .bss	00000004 _alt_tick_rate
00049b54 g     O .bss	00000004 _alt_nticks
000443d0 g     F .text	000000fc read
00044780 g     F .text	00000048 alt_sys_init
000461a4 g     F .text	00000118 __register_exitproc
00044c98 g     F .text	00000068 altera_avalon_jtag_uart_close
000465f0 g       *ABS*	00000000 __ram_rwdata_start
00046470 g       *ABS*	00000000 __ram_rodata_start
00049b5c g     O .bss	00000028 __malloc_current_mallinfo
000447c8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00045f0c g     F .text	000000a4 alt_get_fd
00043270 g     F .text	00000054 _close_r
00046128 g     F .text	0000007c memcmp
00044888 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00049c84 g       *ABS*	00000000 __alt_stack_base
000448d8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0004311c g     F .text	00000154 __swsetup_r
00041548 g     F .text	00000118 __sfp
00046a3c g     O .rwdata	00000408 __malloc_av_
00041694 g     F .text	00000004 __sinit_lock_release
00042f80 g     F .text	00000054 __sread
00048050 g     O .rwdata	00000004 CLOCK_50_IN_S
00045e04 g     F .text	00000108 alt_find_file
000453e0 g     F .text	000000a4 alt_dev_llist_insert
0004434c g     F .text	00000024 __malloc_lock
00044530 g     F .text	000000b0 sbrk
000435e4 g     F .text	0000005c _fflush_r
00049b30 g       *ABS*	00000000 __bss_start
000428a0 g     F .text	00000128 memset
00040290 g     F .text	00000378 main
00049b48 g     O .bss	00000004 alt_envp
00049b30 g     O .bss	00000004 __malloc_max_total_mem
00044828 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000430b4 g     F .text	00000008 __sclose
00067100 g       *ABS*	00000000 __alt_heap_limit
000433b4 g     F .text	00000014 fclose
00041d0c g     F .text	0000080c _malloc_r
0004807c g     O .rwdata	00000004 alt_errno
00041b84 g     F .text	000000c4 _fwalk
00040608 g     F .text	00000084 .hidden __divsi3
00043670 g     F .text	00000124 _malloc_trim_r
00046470 g       *ABS*	00000000 __CTOR_END__
00040bfc g     F .text	000003fc .hidden __mulsf3
00046470 g       *ABS*	00000000 __flash_rodata_start
00046470 g       *ABS*	00000000 __DTOR_LIST__
00044748 g     F .text	00000038 alt_irq_init
000444cc g     F .text	00000064 alt_release_fd
000464bb g     O .rodata	00000100 .hidden __clz_tab
000460dc g     F .text	00000014 atexit
000430bc g     F .text	00000060 _write_r
0004805c g     O .rwdata	00000004 _impure_ptr
00049b40 g     O .bss	00000004 alt_argc
000433c8 g     F .text	0000021c __sflush_r
000454e4 g     F .text	00000060 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
000416b0 g     F .text	00000018 __fp_unlock_all
00048068 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00045578 g     F .text	00000050 alt_ic_isr_register
00048090 g       *ABS*	00000000 _edata
00049c84 g       *ABS*	00000000 _end
00040244 g       *ABS*	00000000 __ram_exceptions_end
00044d00 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00045650 g     F .text	0000008c alt_ic_irq_disable
00042fdc g     F .text	0000007c __swrite
00048064 g     O .rwdata	00000004 __malloc_trim_threshold
000460f0 g     F .text	00000038 exit
00041c48 g     F .text	000000c4 _fwalk_reent
00041068 g     F .text	000000f0 .hidden __floatunsisf
0004068c g     F .text	00000074 .hidden __modsi3
00067100 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004168c g     F .text	00000004 __sfp_lock_release
0004643c g     F .text	00000034 _exit
00045230 g     F .text	0000012c alt_alarm_start
00043b04 g     F .text	000001bc __smakebuf_r
00041290 g     F .text	00000098 strlen
00045a58 g     F .text	00000154 open
00045544 g     F .text	00000034 alt_icache_flush_all
00048084 g     O .rwdata	00000004 alt_priority_mask
000455c8 g     F .text	00000088 alt_ic_irq_enable
00048088 g     O .rwdata	00000008 alt_alarm_list
00045484 g     F .text	00000060 _do_ctors
00043e0c g     F .text	000000d0 close
0004413c g     F .text	00000084 alt_load
00041690 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8f04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10a6e104 	addi	r2,r2,-25724
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10a6e104 	addi	r2,r2,-25724
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd902c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd9020>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a6c317 	ldw	r2,-25844(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a6c317 	ldw	r2,-25844(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40244:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
   40248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   4024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40250:	00bffd16 	blt	zero,r2,40248 <__alt_data_end+0xfffd9148>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40254:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40258:	dedc4014 	ori	sp,sp,28928
    movhi gp, %hi(_gp)
   4025c:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40260:	d6801314 	ori	gp,gp,76
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40264:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40268:	10a6cc14 	ori	r2,r2,39728

    movhi r3, %hi(__bss_end)
   4026c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40270:	18e72114 	ori	r3,r3,40068

    beq r2, r3, 1f
   40274:	10c00326 	beq	r2,r3,40284 <_start+0x40>

0:
    stw zero, (r2)
   40278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40280:	10fffd36 	bltu	r2,r3,40278 <__alt_data_end+0xfffd9178>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40284:	004413c0 	call	4413c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40288:	00442d00 	call	442d0 <alt_main>

0004028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4028c:	003fff06 	br	4028c <__alt_data_end+0xfffd918c>

00040290 <main>:
        0b10000010, // 6
        0b11111000, // 7
        0b10000000, // 8
        0b10011000  // 9
    };
int main(){
   40290:	deffeb04 	addi	sp,sp,-84
   40294:	dfc01415 	stw	ra,80(sp)
   40298:	df001315 	stw	fp,76(sp)
   4029c:	df001304 	addi	fp,sp,76
    uint32_t received;
    int fifoWidth = 0;
   402a0:	e03fed15 	stw	zero,-76(fp)
    int corrWindow = 0;
   402a4:	e03fee15 	stw	zero,-72(fp)
    long int freq = 0;
   402a8:	e03ff015 	stw	zero,-64(fp)
    uint32_t numberOfCorrelations = 9;
   402ac:	00800244 	movi	r2,9
   402b0:	e0bff115 	stw	r2,-60(fp)
    int num = 0;
   402b4:	e03ff215 	stw	zero,-56(fp)
    uint32_t numADC = 0;
   402b8:	e03ff315 	stw	zero,-52(fp)
    float secondsTaken = 0;
   402bc:	e03ff415 	stw	zero,-48(fp)
    int segments[6] = {0};
   402c0:	e03ffa15 	stw	zero,-24(fp)
   402c4:	e03ffb15 	stw	zero,-20(fp)
   402c8:	e03ffc15 	stw	zero,-16(fp)
   402cc:	e03ffd15 	stw	zero,-12(fp)
   402d0:	e03ffe15 	stw	zero,-8(fp)
   402d4:	e03fff15 	stw	zero,-4(fp)
    printf("running \n");
   402d8:	01000134 	movhi	r4,4
   402dc:	21191c04 	addi	r4,r4,25712
   402e0:	004127c0 	call	4127c <puts>
    uint64_t count = 0;
   402e4:	e03ff515 	stw	zero,-44(fp)
   402e8:	e03ff615 	stw	zero,-40(fp)
    int Delay_Value = 80000;
   402ec:	00800074 	movhi	r2,1
   402f0:	108e2004 	addi	r2,r2,14464
   402f4:	e0bff715 	stw	r2,-36(fp)
    while(1){
        received = IORD_ALTERA_AVALON_PIO_DATA(RECV_BASE);
   402f8:	00800234 	movhi	r2,8
   402fc:	10841c04 	addi	r2,r2,4208
   40300:	10800037 	ldwio	r2,0(r2)
   40304:	e0bff815 	stw	r2,-32(fp)
        //printf("Received data: %u\n", (unsigned int) received);
        //printf("DATA HERE \n");
        // For Averaging
        if ((((received >> 28) & 0x0F) == 0b1100)){
   40308:	e0bff817 	ldw	r2,-32(fp)
   4030c:	1004d73a 	srli	r2,r2,28
   40310:	10800318 	cmpnei	r2,r2,12
   40314:	10000e1e 	bne	r2,zero,40350 <main+0xc0>
        	printf("received average pack \n");
   40318:	01000134 	movhi	r4,4
   4031c:	21191f04 	addi	r4,r4,25724
   40320:	004127c0 	call	4127c <puts>
        	num = 1;
   40324:	00800044 	movi	r2,1
   40328:	e0bff215 	stw	r2,-56(fp)
//            IOWR_ALTERA_AVALON_PIO_DATA(SEG_1_BASE, numberMap[(received >> 1) & 0x1]);
//            IOWR_ALTERA_AVALON_PIO_DATA(SEG_2_BASE, numberMap[(received >> 28) & 0x1]);
//            IOWR_ALTERA_AVALON_PIO_DATA(SEG_3_BASE, numberMap[(received >> 29) & 0x1]);
//            IOWR_ALTERA_AVALON_PIO_DATA(SEG_4_BASE, numberMap[(received >> 30) & 0x1]);
//            IOWR_ALTERA_AVALON_PIO_DATA(SEG_5_BASE, numberMap[(received >> 31) & 0x1]);
            if(((received >> 18) & 0x01) == 1) {
   4032c:	e0bff817 	ldw	r2,-32(fp)
   40330:	1004d4ba 	srli	r2,r2,18
   40334:	1080004c 	andi	r2,r2,1
   40338:	10000326 	beq	r2,zero,40348 <main+0xb8>
                fifoWidth = 8;
   4033c:	00800204 	movi	r2,8
   40340:	e0bfed15 	stw	r2,-76(fp)
   40344:	00000206 	br	40350 <main+0xc0>
            } else {
                fifoWidth = 4;
   40348:	00800104 	movi	r2,4
   4034c:	e0bfed15 	stw	r2,-76(fp)
//        if ((((received >> 28) & 0x0F) == 0b1000)) {
//        	printf("avg receinvef \n");
//        }

        // For correlation
        if ((((received >> 28) & 0x0F) == 0b1101)){
   40350:	e0bff817 	ldw	r2,-32(fp)
   40354:	1004d73a 	srli	r2,r2,28
   40358:	10800358 	cmpnei	r2,r2,13
   4035c:	10000e1e 	bne	r2,zero,40398 <main+0x108>
        	printf("received corr pack \n");
   40360:	01000134 	movhi	r4,4
   40364:	21192504 	addi	r4,r4,25748
   40368:	004127c0 	call	4127c <puts>
        	num = 2;
   4036c:	00800084 	movi	r2,2
   40370:	e0bff215 	stw	r2,-56(fp)
            if(((received >> 18) & 0x01) == 1) {
   40374:	e0bff817 	ldw	r2,-32(fp)
   40378:	1004d4ba 	srli	r2,r2,18
   4037c:	1080004c 	andi	r2,r2,1
   40380:	10000326 	beq	r2,zero,40390 <main+0x100>
                corrWindow = 20;
   40384:	00800504 	movi	r2,20
   40388:	e0bfee15 	stw	r2,-72(fp)
   4038c:	00000206 	br	40398 <main+0x108>
            } else {
                corrWindow = 16;
   40390:	00800404 	movi	r2,16
   40394:	e0bfee15 	stw	r2,-72(fp)
            }
        }

        // Checking if we are receiving a valid data packet from PeD
        if ((((received >> 28) & 0x0F) == 0b1000)){ //&& (((received >> 27) & 0x01) == 1)) {
   40398:	e0bff817 	ldw	r2,-32(fp)
   4039c:	1004d73a 	srli	r2,r2,28
   403a0:	10800218 	cmpnei	r2,r2,8
   403a4:	1000771e 	bne	r2,zero,40584 <main+0x2f4>
            // Analyze the freq
        	printf("correlation found \n");
   403a8:	01000134 	movhi	r4,4
   403ac:	21192a04 	addi	r4,r4,25768
   403b0:	004127c0 	call	4127c <puts>
        	num = 3;
   403b4:	008000c4 	movi	r2,3
   403b8:	e0bff215 	stw	r2,-56(fp)
            numberOfCorrelations = received & 0x000FFFFF;
   403bc:	e0fff817 	ldw	r3,-32(fp)
   403c0:	00800434 	movhi	r2,16
   403c4:	10bfffc4 	addi	r2,r2,-1
   403c8:	1884703a 	and	r2,r3,r2
   403cc:	e0bff115 	stw	r2,-60(fp)
          //  printf("Num corr: %u \n",numberOfCorrelations);
          //  printf("CorrWidth: %d, fifowid: %d \n",corrWindow,fifoWidth);
            // Now we begin our frequency analysis
            numADC = (numberOfCorrelations * fifoWidth * corrWindow);
   403d0:	e0ffed17 	ldw	r3,-76(fp)
   403d4:	e0bff117 	ldw	r2,-60(fp)
   403d8:	1887383a 	mul	r3,r3,r2
   403dc:	e0bfee17 	ldw	r2,-72(fp)
   403e0:	1885383a 	mul	r2,r3,r2
   403e4:	e0bff315 	stw	r2,-52(fp)
           // printf("numADC: %u \n",numADC);
            //secondsTaken = numADC * (peakToPeak_t * CLOCK_50_IN_S);
            float nSecsTaken = (float) numADC * peakToPeak_t * inNS;
   403e8:	e13ff317 	ldw	r4,-52(fp)
   403ec:	00410680 	call	41068 <__floatunsisf>
   403f0:	1007883a 	mov	r3,r2
   403f4:	009130f4 	movhi	r2,17603
   403f8:	10940004 	addi	r2,r2,20480
   403fc:	100b883a 	mov	r5,r2
   40400:	1809883a 	mov	r4,r3
   40404:	0040bfc0 	call	40bfc <__mulsf3>
   40408:	1009883a 	mov	r4,r2
   4040c:	2007883a 	mov	r3,r4
   40410:	00906834 	movhi	r2,16800
   40414:	100b883a 	mov	r5,r2
   40418:	1809883a 	mov	r4,r3
   4041c:	0040bfc0 	call	40bfc <__mulsf3>
   40420:	1007883a 	mov	r3,r2
   40424:	e0fff915 	stw	r3,-28(fp)
           // printf("ns: %.2f \n",nSecsTaken);
            secondsTaken = (float) nSecsTaken * 0.000000001f;
   40428:	014c2274 	movhi	r5,12425
   4042c:	295c17c4 	addi	r5,r5,28767
   40430:	e13ff917 	ldw	r4,-28(fp)
   40434:	0040bfc0 	call	40bfc <__mulsf3>
   40438:	1007883a 	mov	r3,r2
   4043c:	e0fff415 	stw	r3,-48(fp)
            //printf("seconds: %f \n",secondsTaken);
            freq = 1 / (secondsTaken);
   40440:	e17ff417 	ldw	r5,-48(fp)
   40444:	010fe034 	movhi	r4,16256
   40448:	00407bc0 	call	407bc <__divsf3>
   4044c:	1007883a 	mov	r3,r2
   40450:	1805883a 	mov	r2,r3
   40454:	1009883a 	mov	r4,r2
   40458:	0040ff80 	call	40ff8 <__fixsfsi>
   4045c:	e0bff015 	stw	r2,-64(fp)
            //determineValue(freq, segments);
            segments[0] = numberMap[freq%10];
   40460:	e0bff017 	ldw	r2,-64(fp)
   40464:	01400284 	movi	r5,10
   40468:	1009883a 	mov	r4,r2
   4046c:	004068c0 	call	4068c <__modsi3>
   40470:	1007883a 	mov	r3,r2
   40474:	00800134 	movhi	r2,4
   40478:	10997c04 	addi	r2,r2,26096
   4047c:	18c7883a 	add	r3,r3,r3
   40480:	18c7883a 	add	r3,r3,r3
   40484:	10c5883a 	add	r2,r2,r3
   40488:	10800017 	ldw	r2,0(r2)
   4048c:	e0bffa15 	stw	r2,-24(fp)
            segments[1] = numberMap[freq/10];
   40490:	e0bff017 	ldw	r2,-64(fp)
   40494:	01400284 	movi	r5,10
   40498:	1009883a 	mov	r4,r2
   4049c:	00406080 	call	40608 <__divsi3>
   404a0:	1007883a 	mov	r3,r2
   404a4:	00800134 	movhi	r2,4
   404a8:	10997c04 	addi	r2,r2,26096
   404ac:	18c7883a 	add	r3,r3,r3
   404b0:	18c7883a 	add	r3,r3,r3
   404b4:	10c5883a 	add	r2,r2,r3
   404b8:	10800017 	ldw	r2,0(r2)
   404bc:	e0bffb15 	stw	r2,-20(fp)
            segments[2] = numberMap[freq/100];
   404c0:	e0bff017 	ldw	r2,-64(fp)
   404c4:	01401904 	movi	r5,100
   404c8:	1009883a 	mov	r4,r2
   404cc:	00406080 	call	40608 <__divsi3>
   404d0:	1007883a 	mov	r3,r2
   404d4:	00800134 	movhi	r2,4
   404d8:	10997c04 	addi	r2,r2,26096
   404dc:	18c7883a 	add	r3,r3,r3
   404e0:	18c7883a 	add	r3,r3,r3
   404e4:	10c5883a 	add	r2,r2,r3
   404e8:	10800017 	ldw	r2,0(r2)
   404ec:	e0bffc15 	stw	r2,-16(fp)
            segments[3] = numberMap[freq/1000];
   404f0:	e0bff017 	ldw	r2,-64(fp)
   404f4:	0140fa04 	movi	r5,1000
   404f8:	1009883a 	mov	r4,r2
   404fc:	00406080 	call	40608 <__divsi3>
   40500:	1007883a 	mov	r3,r2
   40504:	00800134 	movhi	r2,4
   40508:	10997c04 	addi	r2,r2,26096
   4050c:	18c7883a 	add	r3,r3,r3
   40510:	18c7883a 	add	r3,r3,r3
   40514:	10c5883a 	add	r2,r2,r3
   40518:	10800017 	ldw	r2,0(r2)
   4051c:	e0bffd15 	stw	r2,-12(fp)
            segments[4] = numberMap[freq/10000];
   40520:	e0bff017 	ldw	r2,-64(fp)
   40524:	0149c404 	movi	r5,10000
   40528:	1009883a 	mov	r4,r2
   4052c:	00406080 	call	40608 <__divsi3>
   40530:	1007883a 	mov	r3,r2
   40534:	00800134 	movhi	r2,4
   40538:	10997c04 	addi	r2,r2,26096
   4053c:	18c7883a 	add	r3,r3,r3
   40540:	18c7883a 	add	r3,r3,r3
   40544:	10c5883a 	add	r2,r2,r3
   40548:	10800017 	ldw	r2,0(r2)
   4054c:	e0bffe15 	stw	r2,-8(fp)
            segments[5] = numberMap[freq/100000];
   40550:	e0bff017 	ldw	r2,-64(fp)
   40554:	014000b4 	movhi	r5,2
   40558:	2961a804 	addi	r5,r5,-31072
   4055c:	1009883a 	mov	r4,r2
   40560:	00406080 	call	40608 <__divsi3>
   40564:	1007883a 	mov	r3,r2
   40568:	00800134 	movhi	r2,4
   4056c:	10997c04 	addi	r2,r2,26096
   40570:	18c7883a 	add	r3,r3,r3
   40574:	18c7883a 	add	r3,r3,r3
   40578:	10c5883a 	add	r2,r2,r3
   4057c:	10800017 	ldw	r2,0(r2)
   40580:	e0bfff15 	stw	r2,-4(fp)
//                count+=1;
//            }

        }

        IOWR_ALTERA_AVALON_PIO_DATA(SEG_0_BASE, segments[0]);
   40584:	e0fffa17 	ldw	r3,-24(fp)
   40588:	00800234 	movhi	r2,8
   4058c:	10841404 	addi	r2,r2,4176
   40590:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_PIO_DATA(SEG_1_BASE, segments[1]);
   40594:	e0fffb17 	ldw	r3,-20(fp)
   40598:	00800234 	movhi	r2,8
   4059c:	10841004 	addi	r2,r2,4160
   405a0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_PIO_DATA(SEG_2_BASE, segments[2]);
   405a4:	e0fffc17 	ldw	r3,-16(fp)
   405a8:	00800234 	movhi	r2,8
   405ac:	10840c04 	addi	r2,r2,4144
   405b0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_PIO_DATA(SEG_3_BASE, segments[3]);
   405b4:	e0fffd17 	ldw	r3,-12(fp)
   405b8:	00800234 	movhi	r2,8
   405bc:	10840804 	addi	r2,r2,4128
   405c0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_PIO_DATA(SEG_4_BASE, segments[4]);
   405c4:	e0fffe17 	ldw	r3,-8(fp)
   405c8:	00800234 	movhi	r2,8
   405cc:	10840404 	addi	r2,r2,4112
   405d0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_PIO_DATA(SEG_5_BASE, segments[5]);
   405d4:	e0ffff17 	ldw	r3,-4(fp)
   405d8:	00800234 	movhi	r2,8
   405dc:	10840004 	addi	r2,r2,4096
   405e0:	10c00035 	stwio	r3,0(r2)
//        IOWR_ALTERA_AVALON_PIO_DATA(SEG_1_BASE, numberMap[(received >> 1) & 0x1]);
//        IOWR_ALTERA_AVALON_PIO_DATA(SEG_2_BASE, numberMap[(received >> 28) & 0x1]);
//        IOWR_ALTERA_AVALON_PIO_DATA(SEG_3_BASE, numberMap[(received >> 29) & 0x1]);
//        IOWR_ALTERA_AVALON_PIO_DATA(SEG_4_BASE, numberMap[(received >> 30) & 0x1]);
//        IOWR_ALTERA_AVALON_PIO_DATA(SEG_5_BASE, numberMap[(received >> 31) & 0x1]);
        for (int i = 0; i < Delay_Value; i++) {
   405e4:	e03fef15 	stw	zero,-68(fp)
   405e8:	00000306 	br	405f8 <main+0x368>
   405ec:	e0bfef17 	ldw	r2,-68(fp)
   405f0:	10800044 	addi	r2,r2,1
   405f4:	e0bfef15 	stw	r2,-68(fp)
   405f8:	e0ffef17 	ldw	r3,-68(fp)
   405fc:	e0bff717 	ldw	r2,-36(fp)
   40600:	18bffa16 	blt	r3,r2,405ec <__alt_data_end+0xfffd94ec>
                    ;
        }



    }
   40604:	003f3c06 	br	402f8 <__alt_data_end+0xfffd91f8>

00040608 <__divsi3>:
   40608:	20001b16 	blt	r4,zero,40678 <__divsi3+0x70>
   4060c:	000f883a 	mov	r7,zero
   40610:	28001616 	blt	r5,zero,4066c <__divsi3+0x64>
   40614:	200d883a 	mov	r6,r4
   40618:	29001a2e 	bgeu	r5,r4,40684 <__divsi3+0x7c>
   4061c:	00800804 	movi	r2,32
   40620:	00c00044 	movi	r3,1
   40624:	00000106 	br	4062c <__divsi3+0x24>
   40628:	10000d26 	beq	r2,zero,40660 <__divsi3+0x58>
   4062c:	294b883a 	add	r5,r5,r5
   40630:	10bfffc4 	addi	r2,r2,-1
   40634:	18c7883a 	add	r3,r3,r3
   40638:	293ffb36 	bltu	r5,r4,40628 <__alt_data_end+0xfffd9528>
   4063c:	0005883a 	mov	r2,zero
   40640:	18000726 	beq	r3,zero,40660 <__divsi3+0x58>
   40644:	0005883a 	mov	r2,zero
   40648:	31400236 	bltu	r6,r5,40654 <__divsi3+0x4c>
   4064c:	314dc83a 	sub	r6,r6,r5
   40650:	10c4b03a 	or	r2,r2,r3
   40654:	1806d07a 	srli	r3,r3,1
   40658:	280ad07a 	srli	r5,r5,1
   4065c:	183ffa1e 	bne	r3,zero,40648 <__alt_data_end+0xfffd9548>
   40660:	38000126 	beq	r7,zero,40668 <__divsi3+0x60>
   40664:	0085c83a 	sub	r2,zero,r2
   40668:	f800283a 	ret
   4066c:	014bc83a 	sub	r5,zero,r5
   40670:	39c0005c 	xori	r7,r7,1
   40674:	003fe706 	br	40614 <__alt_data_end+0xfffd9514>
   40678:	0109c83a 	sub	r4,zero,r4
   4067c:	01c00044 	movi	r7,1
   40680:	003fe306 	br	40610 <__alt_data_end+0xfffd9510>
   40684:	00c00044 	movi	r3,1
   40688:	003fee06 	br	40644 <__alt_data_end+0xfffd9544>

0004068c <__modsi3>:
   4068c:	20001716 	blt	r4,zero,406ec <__modsi3+0x60>
   40690:	000f883a 	mov	r7,zero
   40694:	2005883a 	mov	r2,r4
   40698:	28001216 	blt	r5,zero,406e4 <__modsi3+0x58>
   4069c:	2900162e 	bgeu	r5,r4,406f8 <__modsi3+0x6c>
   406a0:	01800804 	movi	r6,32
   406a4:	00c00044 	movi	r3,1
   406a8:	00000106 	br	406b0 <__modsi3+0x24>
   406ac:	30000a26 	beq	r6,zero,406d8 <__modsi3+0x4c>
   406b0:	294b883a 	add	r5,r5,r5
   406b4:	31bfffc4 	addi	r6,r6,-1
   406b8:	18c7883a 	add	r3,r3,r3
   406bc:	293ffb36 	bltu	r5,r4,406ac <__alt_data_end+0xfffd95ac>
   406c0:	18000526 	beq	r3,zero,406d8 <__modsi3+0x4c>
   406c4:	1806d07a 	srli	r3,r3,1
   406c8:	11400136 	bltu	r2,r5,406d0 <__modsi3+0x44>
   406cc:	1145c83a 	sub	r2,r2,r5
   406d0:	280ad07a 	srli	r5,r5,1
   406d4:	183ffb1e 	bne	r3,zero,406c4 <__alt_data_end+0xfffd95c4>
   406d8:	38000126 	beq	r7,zero,406e0 <__modsi3+0x54>
   406dc:	0085c83a 	sub	r2,zero,r2
   406e0:	f800283a 	ret
   406e4:	014bc83a 	sub	r5,zero,r5
   406e8:	003fec06 	br	4069c <__alt_data_end+0xfffd959c>
   406ec:	0109c83a 	sub	r4,zero,r4
   406f0:	01c00044 	movi	r7,1
   406f4:	003fe706 	br	40694 <__alt_data_end+0xfffd9594>
   406f8:	00c00044 	movi	r3,1
   406fc:	003ff106 	br	406c4 <__alt_data_end+0xfffd95c4>

00040700 <__udivsi3>:
   40700:	200d883a 	mov	r6,r4
   40704:	2900152e 	bgeu	r5,r4,4075c <__udivsi3+0x5c>
   40708:	28001416 	blt	r5,zero,4075c <__udivsi3+0x5c>
   4070c:	00800804 	movi	r2,32
   40710:	00c00044 	movi	r3,1
   40714:	00000206 	br	40720 <__udivsi3+0x20>
   40718:	10000e26 	beq	r2,zero,40754 <__udivsi3+0x54>
   4071c:	28000516 	blt	r5,zero,40734 <__udivsi3+0x34>
   40720:	294b883a 	add	r5,r5,r5
   40724:	10bfffc4 	addi	r2,r2,-1
   40728:	18c7883a 	add	r3,r3,r3
   4072c:	293ffa36 	bltu	r5,r4,40718 <__alt_data_end+0xfffd9618>
   40730:	18000826 	beq	r3,zero,40754 <__udivsi3+0x54>
   40734:	0005883a 	mov	r2,zero
   40738:	31400236 	bltu	r6,r5,40744 <__udivsi3+0x44>
   4073c:	314dc83a 	sub	r6,r6,r5
   40740:	10c4b03a 	or	r2,r2,r3
   40744:	1806d07a 	srli	r3,r3,1
   40748:	280ad07a 	srli	r5,r5,1
   4074c:	183ffa1e 	bne	r3,zero,40738 <__alt_data_end+0xfffd9638>
   40750:	f800283a 	ret
   40754:	0005883a 	mov	r2,zero
   40758:	f800283a 	ret
   4075c:	00c00044 	movi	r3,1
   40760:	003ff406 	br	40734 <__alt_data_end+0xfffd9634>

00040764 <__umodsi3>:
   40764:	2005883a 	mov	r2,r4
   40768:	2900122e 	bgeu	r5,r4,407b4 <__umodsi3+0x50>
   4076c:	28001116 	blt	r5,zero,407b4 <__umodsi3+0x50>
   40770:	01800804 	movi	r6,32
   40774:	00c00044 	movi	r3,1
   40778:	00000206 	br	40784 <__umodsi3+0x20>
   4077c:	30000c26 	beq	r6,zero,407b0 <__umodsi3+0x4c>
   40780:	28000516 	blt	r5,zero,40798 <__umodsi3+0x34>
   40784:	294b883a 	add	r5,r5,r5
   40788:	31bfffc4 	addi	r6,r6,-1
   4078c:	18c7883a 	add	r3,r3,r3
   40790:	293ffa36 	bltu	r5,r4,4077c <__alt_data_end+0xfffd967c>
   40794:	18000626 	beq	r3,zero,407b0 <__umodsi3+0x4c>
   40798:	1806d07a 	srli	r3,r3,1
   4079c:	11400136 	bltu	r2,r5,407a4 <__umodsi3+0x40>
   407a0:	1145c83a 	sub	r2,r2,r5
   407a4:	280ad07a 	srli	r5,r5,1
   407a8:	183ffb1e 	bne	r3,zero,40798 <__alt_data_end+0xfffd9698>
   407ac:	f800283a 	ret
   407b0:	f800283a 	ret
   407b4:	00c00044 	movi	r3,1
   407b8:	003ff706 	br	40798 <__alt_data_end+0xfffd9698>

000407bc <__divsf3>:
   407bc:	defff504 	addi	sp,sp,-44
   407c0:	200cd5fa 	srli	r6,r4,23
   407c4:	dcc00415 	stw	r19,16(sp)
   407c8:	2026d7fa 	srli	r19,r4,31
   407cc:	00c02034 	movhi	r3,128
   407d0:	dd800715 	stw	r22,28(sp)
   407d4:	dd000515 	stw	r20,20(sp)
   407d8:	dc800315 	stw	r18,12(sp)
   407dc:	18ffffc4 	addi	r3,r3,-1
   407e0:	dfc00a15 	stw	ra,40(sp)
   407e4:	df000915 	stw	fp,36(sp)
   407e8:	ddc00815 	stw	r23,32(sp)
   407ec:	dd400615 	stw	r21,24(sp)
   407f0:	dc400215 	stw	r17,8(sp)
   407f4:	dc000115 	stw	r16,4(sp)
   407f8:	35003fcc 	andi	r20,r6,255
   407fc:	1924703a 	and	r18,r3,r4
   40800:	9d803fcc 	andi	r22,r19,255
   40804:	a0005226 	beq	r20,zero,40950 <__divsf3+0x194>
   40808:	00803fc4 	movi	r2,255
   4080c:	a0802e26 	beq	r20,r2,408c8 <__divsf3+0x10c>
   40810:	91002034 	orhi	r4,r18,128
   40814:	202490fa 	slli	r18,r4,3
   40818:	a53fe044 	addi	r20,r20,-127
   4081c:	0021883a 	mov	r16,zero
   40820:	002f883a 	mov	r23,zero
   40824:	280cd5fa 	srli	r6,r5,23
   40828:	282ad7fa 	srli	r21,r5,31
   4082c:	00c02034 	movhi	r3,128
   40830:	18ffffc4 	addi	r3,r3,-1
   40834:	31803fcc 	andi	r6,r6,255
   40838:	1962703a 	and	r17,r3,r5
   4083c:	af003fcc 	andi	fp,r21,255
   40840:	30004a26 	beq	r6,zero,4096c <__divsf3+0x1b0>
   40844:	00803fc4 	movi	r2,255
   40848:	30804526 	beq	r6,r2,40960 <__divsf3+0x1a4>
   4084c:	89402034 	orhi	r5,r17,128
   40850:	282290fa 	slli	r17,r5,3
   40854:	31bfe044 	addi	r6,r6,-127
   40858:	000b883a 	mov	r5,zero
   4085c:	2c20b03a 	or	r16,r5,r16
   40860:	802090ba 	slli	r16,r16,2
   40864:	00800134 	movhi	r2,4
   40868:	10822204 	addi	r2,r2,2184
   4086c:	80a1883a 	add	r16,r16,r2
   40870:	81000017 	ldw	r4,0(r16)
   40874:	9d46f03a 	xor	r3,r19,r21
   40878:	180f883a 	mov	r7,r3
   4087c:	18803fcc 	andi	r2,r3,255
   40880:	a18dc83a 	sub	r6,r20,r6
   40884:	2000683a 	jmp	r4
   40888:	00040a6c 	andhi	zero,zero,4137
   4088c:	000408f0 	cmpltui	zero,zero,4131
   40890:	00040a60 	cmpeqi	zero,zero,4137
   40894:	000408dc 	xori	zero,zero,4131
   40898:	00040a60 	cmpeqi	zero,zero,4137
   4089c:	00040a38 	rdprs	zero,zero,4136
   408a0:	00040a60 	cmpeqi	zero,zero,4137
   408a4:	000408dc 	xori	zero,zero,4131
   408a8:	000408f0 	cmpltui	zero,zero,4131
   408ac:	000408f0 	cmpltui	zero,zero,4131
   408b0:	00040a38 	rdprs	zero,zero,4136
   408b4:	000408dc 	xori	zero,zero,4131
   408b8:	00040b4c 	andi	zero,zero,4141
   408bc:	00040b4c 	andi	zero,zero,4141
   408c0:	00040b4c 	andi	zero,zero,4141
   408c4:	00040b00 	call	40b0 <__alt_mem_onchip_memory-0x3bf50>
   408c8:	9000581e 	bne	r18,zero,40a2c <__divsf3+0x270>
   408cc:	04000204 	movi	r16,8
   408d0:	05c00084 	movi	r23,2
   408d4:	003fd306 	br	40824 <__alt_data_end+0xfffd9724>
   408d8:	0023883a 	mov	r17,zero
   408dc:	e02d883a 	mov	r22,fp
   408e0:	282f883a 	mov	r23,r5
   408e4:	00800084 	movi	r2,2
   408e8:	b8808f1e 	bne	r23,r2,40b28 <__divsf3+0x36c>
   408ec:	b005883a 	mov	r2,r22
   408f0:	11c0004c 	andi	r7,r2,1
   408f4:	013fffc4 	movi	r4,-1
   408f8:	000d883a 	mov	r6,zero
   408fc:	21003fcc 	andi	r4,r4,255
   40900:	200895fa 	slli	r4,r4,23
   40904:	38803fcc 	andi	r2,r7,255
   40908:	00c02034 	movhi	r3,128
   4090c:	100497fa 	slli	r2,r2,31
   40910:	18ffffc4 	addi	r3,r3,-1
   40914:	30c6703a 	and	r3,r6,r3
   40918:	1906b03a 	or	r3,r3,r4
   4091c:	1884b03a 	or	r2,r3,r2
   40920:	dfc00a17 	ldw	ra,40(sp)
   40924:	df000917 	ldw	fp,36(sp)
   40928:	ddc00817 	ldw	r23,32(sp)
   4092c:	dd800717 	ldw	r22,28(sp)
   40930:	dd400617 	ldw	r21,24(sp)
   40934:	dd000517 	ldw	r20,20(sp)
   40938:	dcc00417 	ldw	r19,16(sp)
   4093c:	dc800317 	ldw	r18,12(sp)
   40940:	dc400217 	ldw	r17,8(sp)
   40944:	dc000117 	ldw	r16,4(sp)
   40948:	dec00b04 	addi	sp,sp,44
   4094c:	f800283a 	ret
   40950:	90002b1e 	bne	r18,zero,40a00 <__divsf3+0x244>
   40954:	04000104 	movi	r16,4
   40958:	05c00044 	movi	r23,1
   4095c:	003fb106 	br	40824 <__alt_data_end+0xfffd9724>
   40960:	8800251e 	bne	r17,zero,409f8 <__divsf3+0x23c>
   40964:	01400084 	movi	r5,2
   40968:	00000206 	br	40974 <__divsf3+0x1b8>
   4096c:	88001a1e 	bne	r17,zero,409d8 <__divsf3+0x21c>
   40970:	01400044 	movi	r5,1
   40974:	8160b03a 	or	r16,r16,r5
   40978:	802090ba 	slli	r16,r16,2
   4097c:	00c00134 	movhi	r3,4
   40980:	18c26604 	addi	r3,r3,2456
   40984:	80e1883a 	add	r16,r16,r3
   40988:	80c00017 	ldw	r3,0(r16)
   4098c:	9d44f03a 	xor	r2,r19,r21
   40990:	a18dc83a 	sub	r6,r20,r6
   40994:	1800683a 	jmp	r3
   40998:	000408f0 	cmpltui	zero,zero,4131
   4099c:	000408f0 	cmpltui	zero,zero,4131
   409a0:	00040b3c 	xorhi	zero,zero,4140
   409a4:	000408d8 	cmpnei	zero,zero,4131
   409a8:	00040b3c 	xorhi	zero,zero,4140
   409ac:	00040a38 	rdprs	zero,zero,4136
   409b0:	00040b3c 	xorhi	zero,zero,4140
   409b4:	000408d8 	cmpnei	zero,zero,4131
   409b8:	000408f0 	cmpltui	zero,zero,4131
   409bc:	000408f0 	cmpltui	zero,zero,4131
   409c0:	00040a38 	rdprs	zero,zero,4136
   409c4:	000408d8 	cmpnei	zero,zero,4131
   409c8:	00040b4c 	andi	zero,zero,4141
   409cc:	00040b4c 	andi	zero,zero,4141
   409d0:	00040b4c 	andi	zero,zero,4141
   409d4:	00040b64 	muli	zero,zero,4141
   409d8:	8809883a 	mov	r4,r17
   409dc:	00411580 	call	41158 <__clzsi2>
   409e0:	10fffec4 	addi	r3,r2,-5
   409e4:	10801d84 	addi	r2,r2,118
   409e8:	88e2983a 	sll	r17,r17,r3
   409ec:	008dc83a 	sub	r6,zero,r2
   409f0:	000b883a 	mov	r5,zero
   409f4:	003f9906 	br	4085c <__alt_data_end+0xfffd975c>
   409f8:	014000c4 	movi	r5,3
   409fc:	003f9706 	br	4085c <__alt_data_end+0xfffd975c>
   40a00:	9009883a 	mov	r4,r18
   40a04:	d9400015 	stw	r5,0(sp)
   40a08:	00411580 	call	41158 <__clzsi2>
   40a0c:	10fffec4 	addi	r3,r2,-5
   40a10:	11801d84 	addi	r6,r2,118
   40a14:	90e4983a 	sll	r18,r18,r3
   40a18:	01a9c83a 	sub	r20,zero,r6
   40a1c:	0021883a 	mov	r16,zero
   40a20:	002f883a 	mov	r23,zero
   40a24:	d9400017 	ldw	r5,0(sp)
   40a28:	003f7e06 	br	40824 <__alt_data_end+0xfffd9724>
   40a2c:	04000304 	movi	r16,12
   40a30:	05c000c4 	movi	r23,3
   40a34:	003f7b06 	br	40824 <__alt_data_end+0xfffd9724>
   40a38:	01802034 	movhi	r6,128
   40a3c:	000f883a 	mov	r7,zero
   40a40:	31bfffc4 	addi	r6,r6,-1
   40a44:	013fffc4 	movi	r4,-1
   40a48:	003fac06 	br	408fc <__alt_data_end+0xfffd97fc>
   40a4c:	01400044 	movi	r5,1
   40a50:	2909c83a 	sub	r4,r5,r4
   40a54:	00c006c4 	movi	r3,27
   40a58:	19004b0e 	bge	r3,r4,40b88 <__divsf3+0x3cc>
   40a5c:	114e703a 	and	r7,r2,r5
   40a60:	0009883a 	mov	r4,zero
   40a64:	000d883a 	mov	r6,zero
   40a68:	003fa406 	br	408fc <__alt_data_end+0xfffd97fc>
   40a6c:	9006917a 	slli	r3,r18,5
   40a70:	8822917a 	slli	r17,r17,5
   40a74:	1c40372e 	bgeu	r3,r17,40b54 <__divsf3+0x398>
   40a78:	31bfffc4 	addi	r6,r6,-1
   40a7c:	010006c4 	movi	r4,27
   40a80:	000b883a 	mov	r5,zero
   40a84:	180f883a 	mov	r7,r3
   40a88:	294b883a 	add	r5,r5,r5
   40a8c:	18c7883a 	add	r3,r3,r3
   40a90:	38000116 	blt	r7,zero,40a98 <__divsf3+0x2dc>
   40a94:	1c400236 	bltu	r3,r17,40aa0 <__divsf3+0x2e4>
   40a98:	1c47c83a 	sub	r3,r3,r17
   40a9c:	29400054 	ori	r5,r5,1
   40aa0:	213fffc4 	addi	r4,r4,-1
   40aa4:	203ff71e 	bne	r4,zero,40a84 <__alt_data_end+0xfffd9984>
   40aa8:	1806c03a 	cmpne	r3,r3,zero
   40aac:	1962b03a 	or	r17,r3,r5
   40ab0:	31001fc4 	addi	r4,r6,127
   40ab4:	013fe50e 	bge	zero,r4,40a4c <__alt_data_end+0xfffd994c>
   40ab8:	88c001cc 	andi	r3,r17,7
   40abc:	18000426 	beq	r3,zero,40ad0 <__divsf3+0x314>
   40ac0:	88c003cc 	andi	r3,r17,15
   40ac4:	01400104 	movi	r5,4
   40ac8:	19400126 	beq	r3,r5,40ad0 <__divsf3+0x314>
   40acc:	8963883a 	add	r17,r17,r5
   40ad0:	88c2002c 	andhi	r3,r17,2048
   40ad4:	18000426 	beq	r3,zero,40ae8 <__divsf3+0x32c>
   40ad8:	00fe0034 	movhi	r3,63488
   40adc:	18ffffc4 	addi	r3,r3,-1
   40ae0:	31002004 	addi	r4,r6,128
   40ae4:	88e2703a 	and	r17,r17,r3
   40ae8:	00c03f84 	movi	r3,254
   40aec:	193f8016 	blt	r3,r4,408f0 <__alt_data_end+0xfffd97f0>
   40af0:	880c91ba 	slli	r6,r17,6
   40af4:	11c0004c 	andi	r7,r2,1
   40af8:	300cd27a 	srli	r6,r6,9
   40afc:	003f7f06 	br	408fc <__alt_data_end+0xfffd97fc>
   40b00:	9080102c 	andhi	r2,r18,64
   40b04:	10000226 	beq	r2,zero,40b10 <__divsf3+0x354>
   40b08:	8880102c 	andhi	r2,r17,64
   40b0c:	10001826 	beq	r2,zero,40b70 <__divsf3+0x3b4>
   40b10:	00802034 	movhi	r2,128
   40b14:	91801034 	orhi	r6,r18,64
   40b18:	10bfffc4 	addi	r2,r2,-1
   40b1c:	980f883a 	mov	r7,r19
   40b20:	308c703a 	and	r6,r6,r2
   40b24:	003fc706 	br	40a44 <__alt_data_end+0xfffd9944>
   40b28:	008000c4 	movi	r2,3
   40b2c:	b8802d26 	beq	r23,r2,40be4 <__divsf3+0x428>
   40b30:	00c00044 	movi	r3,1
   40b34:	b005883a 	mov	r2,r22
   40b38:	b8ffdd1e 	bne	r23,r3,40ab0 <__alt_data_end+0xfffd99b0>
   40b3c:	11c0004c 	andi	r7,r2,1
   40b40:	0009883a 	mov	r4,zero
   40b44:	000d883a 	mov	r6,zero
   40b48:	003f6c06 	br	408fc <__alt_data_end+0xfffd97fc>
   40b4c:	9023883a 	mov	r17,r18
   40b50:	003f6406 	br	408e4 <__alt_data_end+0xfffd97e4>
   40b54:	1c47c83a 	sub	r3,r3,r17
   40b58:	01000684 	movi	r4,26
   40b5c:	01400044 	movi	r5,1
   40b60:	003fc806 	br	40a84 <__alt_data_end+0xfffd9984>
   40b64:	9080102c 	andhi	r2,r18,64
   40b68:	103fe926 	beq	r2,zero,40b10 <__alt_data_end+0xfffd9a10>
   40b6c:	0023883a 	mov	r17,zero
   40b70:	00802034 	movhi	r2,128
   40b74:	89801034 	orhi	r6,r17,64
   40b78:	10bfffc4 	addi	r2,r2,-1
   40b7c:	a80f883a 	mov	r7,r21
   40b80:	308c703a 	and	r6,r6,r2
   40b84:	003faf06 	br	40a44 <__alt_data_end+0xfffd9944>
   40b88:	01c00804 	movi	r7,32
   40b8c:	390fc83a 	sub	r7,r7,r4
   40b90:	89ce983a 	sll	r7,r17,r7
   40b94:	890ad83a 	srl	r5,r17,r4
   40b98:	380ec03a 	cmpne	r7,r7,zero
   40b9c:	29cab03a 	or	r5,r5,r7
   40ba0:	28c001cc 	andi	r3,r5,7
   40ba4:	18000426 	beq	r3,zero,40bb8 <__divsf3+0x3fc>
   40ba8:	28c003cc 	andi	r3,r5,15
   40bac:	01000104 	movi	r4,4
   40bb0:	19000126 	beq	r3,r4,40bb8 <__divsf3+0x3fc>
   40bb4:	290b883a 	add	r5,r5,r4
   40bb8:	28c1002c 	andhi	r3,r5,1024
   40bbc:	18000426 	beq	r3,zero,40bd0 <__divsf3+0x414>
   40bc0:	11c0004c 	andi	r7,r2,1
   40bc4:	01000044 	movi	r4,1
   40bc8:	000d883a 	mov	r6,zero
   40bcc:	003f4b06 	br	408fc <__alt_data_end+0xfffd97fc>
   40bd0:	280a91ba 	slli	r5,r5,6
   40bd4:	11c0004c 	andi	r7,r2,1
   40bd8:	0009883a 	mov	r4,zero
   40bdc:	280cd27a 	srli	r6,r5,9
   40be0:	003f4606 	br	408fc <__alt_data_end+0xfffd97fc>
   40be4:	00802034 	movhi	r2,128
   40be8:	89801034 	orhi	r6,r17,64
   40bec:	10bfffc4 	addi	r2,r2,-1
   40bf0:	b00f883a 	mov	r7,r22
   40bf4:	308c703a 	and	r6,r6,r2
   40bf8:	003f9206 	br	40a44 <__alt_data_end+0xfffd9944>

00040bfc <__mulsf3>:
   40bfc:	defff504 	addi	sp,sp,-44
   40c00:	dc000115 	stw	r16,4(sp)
   40c04:	2020d5fa 	srli	r16,r4,23
   40c08:	dd400615 	stw	r21,24(sp)
   40c0c:	202ad7fa 	srli	r21,r4,31
   40c10:	dc800315 	stw	r18,12(sp)
   40c14:	04802034 	movhi	r18,128
   40c18:	df000915 	stw	fp,36(sp)
   40c1c:	dd000515 	stw	r20,20(sp)
   40c20:	94bfffc4 	addi	r18,r18,-1
   40c24:	dfc00a15 	stw	ra,40(sp)
   40c28:	ddc00815 	stw	r23,32(sp)
   40c2c:	dd800715 	stw	r22,28(sp)
   40c30:	dcc00415 	stw	r19,16(sp)
   40c34:	dc400215 	stw	r17,8(sp)
   40c38:	84003fcc 	andi	r16,r16,255
   40c3c:	9124703a 	and	r18,r18,r4
   40c40:	a829883a 	mov	r20,r21
   40c44:	af003fcc 	andi	fp,r21,255
   40c48:	80005426 	beq	r16,zero,40d9c <__mulsf3+0x1a0>
   40c4c:	00803fc4 	movi	r2,255
   40c50:	80802f26 	beq	r16,r2,40d10 <__mulsf3+0x114>
   40c54:	91002034 	orhi	r4,r18,128
   40c58:	202490fa 	slli	r18,r4,3
   40c5c:	843fe044 	addi	r16,r16,-127
   40c60:	0023883a 	mov	r17,zero
   40c64:	002f883a 	mov	r23,zero
   40c68:	2804d5fa 	srli	r2,r5,23
   40c6c:	282cd7fa 	srli	r22,r5,31
   40c70:	01002034 	movhi	r4,128
   40c74:	213fffc4 	addi	r4,r4,-1
   40c78:	10803fcc 	andi	r2,r2,255
   40c7c:	2166703a 	and	r19,r4,r5
   40c80:	b1803fcc 	andi	r6,r22,255
   40c84:	10004c26 	beq	r2,zero,40db8 <__mulsf3+0x1bc>
   40c88:	00c03fc4 	movi	r3,255
   40c8c:	10c04726 	beq	r2,r3,40dac <__mulsf3+0x1b0>
   40c90:	99002034 	orhi	r4,r19,128
   40c94:	202690fa 	slli	r19,r4,3
   40c98:	10bfe044 	addi	r2,r2,-127
   40c9c:	0007883a 	mov	r3,zero
   40ca0:	80a1883a 	add	r16,r16,r2
   40ca4:	010003c4 	movi	r4,15
   40ca8:	1c44b03a 	or	r2,r3,r17
   40cac:	b56af03a 	xor	r21,r22,r21
   40cb0:	81c00044 	addi	r7,r16,1
   40cb4:	20806b36 	bltu	r4,r2,40e64 <__mulsf3+0x268>
   40cb8:	100490ba 	slli	r2,r2,2
   40cbc:	01000134 	movhi	r4,4
   40cc0:	21033404 	addi	r4,r4,3280
   40cc4:	1105883a 	add	r2,r2,r4
   40cc8:	10800017 	ldw	r2,0(r2)
   40ccc:	1000683a 	jmp	r2
   40cd0:	00040e64 	muli	zero,zero,4153
   40cd4:	00040d24 	muli	zero,zero,4148
   40cd8:	00040d24 	muli	zero,zero,4148
   40cdc:	00040d20 	cmpeqi	zero,zero,4148
   40ce0:	00040e48 	cmpgei	zero,zero,4153
   40ce4:	00040e48 	cmpgei	zero,zero,4153
   40ce8:	00040e34 	movhi	zero,4152
   40cec:	00040d20 	cmpeqi	zero,zero,4148
   40cf0:	00040e48 	cmpgei	zero,zero,4153
   40cf4:	00040e34 	movhi	zero,4152
   40cf8:	00040e48 	cmpgei	zero,zero,4153
   40cfc:	00040d20 	cmpeqi	zero,zero,4148
   40d00:	00040e54 	movui	zero,4153
   40d04:	00040e54 	movui	zero,4153
   40d08:	00040e54 	movui	zero,4153
   40d0c:	00040f30 	cmpltui	zero,zero,4156
   40d10:	90003b1e 	bne	r18,zero,40e00 <__mulsf3+0x204>
   40d14:	04400204 	movi	r17,8
   40d18:	05c00084 	movi	r23,2
   40d1c:	003fd206 	br	40c68 <__alt_data_end+0xfffd9b68>
   40d20:	302b883a 	mov	r21,r6
   40d24:	00800084 	movi	r2,2
   40d28:	18802626 	beq	r3,r2,40dc4 <__mulsf3+0x1c8>
   40d2c:	008000c4 	movi	r2,3
   40d30:	1880ab26 	beq	r3,r2,40fe0 <__mulsf3+0x3e4>
   40d34:	00800044 	movi	r2,1
   40d38:	1880a21e 	bne	r3,r2,40fc4 <__mulsf3+0x3c8>
   40d3c:	a829883a 	mov	r20,r21
   40d40:	0007883a 	mov	r3,zero
   40d44:	0009883a 	mov	r4,zero
   40d48:	18803fcc 	andi	r2,r3,255
   40d4c:	100695fa 	slli	r3,r2,23
   40d50:	a0803fcc 	andi	r2,r20,255
   40d54:	100a97fa 	slli	r5,r2,31
   40d58:	00802034 	movhi	r2,128
   40d5c:	10bfffc4 	addi	r2,r2,-1
   40d60:	2084703a 	and	r2,r4,r2
   40d64:	10c4b03a 	or	r2,r2,r3
   40d68:	1144b03a 	or	r2,r2,r5
   40d6c:	dfc00a17 	ldw	ra,40(sp)
   40d70:	df000917 	ldw	fp,36(sp)
   40d74:	ddc00817 	ldw	r23,32(sp)
   40d78:	dd800717 	ldw	r22,28(sp)
   40d7c:	dd400617 	ldw	r21,24(sp)
   40d80:	dd000517 	ldw	r20,20(sp)
   40d84:	dcc00417 	ldw	r19,16(sp)
   40d88:	dc800317 	ldw	r18,12(sp)
   40d8c:	dc400217 	ldw	r17,8(sp)
   40d90:	dc000117 	ldw	r16,4(sp)
   40d94:	dec00b04 	addi	sp,sp,44
   40d98:	f800283a 	ret
   40d9c:	90000d1e 	bne	r18,zero,40dd4 <__mulsf3+0x1d8>
   40da0:	04400104 	movi	r17,4
   40da4:	05c00044 	movi	r23,1
   40da8:	003faf06 	br	40c68 <__alt_data_end+0xfffd9b68>
   40dac:	9806c03a 	cmpne	r3,r19,zero
   40db0:	18c00084 	addi	r3,r3,2
   40db4:	003fba06 	br	40ca0 <__alt_data_end+0xfffd9ba0>
   40db8:	9800141e 	bne	r19,zero,40e0c <__mulsf3+0x210>
   40dbc:	00c00044 	movi	r3,1
   40dc0:	003fb706 	br	40ca0 <__alt_data_end+0xfffd9ba0>
   40dc4:	a829883a 	mov	r20,r21
   40dc8:	00ffffc4 	movi	r3,-1
   40dcc:	0009883a 	mov	r4,zero
   40dd0:	003fdd06 	br	40d48 <__alt_data_end+0xfffd9c48>
   40dd4:	9009883a 	mov	r4,r18
   40dd8:	d9400015 	stw	r5,0(sp)
   40ddc:	00411580 	call	41158 <__clzsi2>
   40de0:	10fffec4 	addi	r3,r2,-5
   40de4:	10801d84 	addi	r2,r2,118
   40de8:	90e4983a 	sll	r18,r18,r3
   40dec:	00a1c83a 	sub	r16,zero,r2
   40df0:	0023883a 	mov	r17,zero
   40df4:	002f883a 	mov	r23,zero
   40df8:	d9400017 	ldw	r5,0(sp)
   40dfc:	003f9a06 	br	40c68 <__alt_data_end+0xfffd9b68>
   40e00:	04400304 	movi	r17,12
   40e04:	05c000c4 	movi	r23,3
   40e08:	003f9706 	br	40c68 <__alt_data_end+0xfffd9b68>
   40e0c:	9809883a 	mov	r4,r19
   40e10:	d9800015 	stw	r6,0(sp)
   40e14:	00411580 	call	41158 <__clzsi2>
   40e18:	10fffec4 	addi	r3,r2,-5
   40e1c:	10801d84 	addi	r2,r2,118
   40e20:	98e6983a 	sll	r19,r19,r3
   40e24:	0085c83a 	sub	r2,zero,r2
   40e28:	0007883a 	mov	r3,zero
   40e2c:	d9800017 	ldw	r6,0(sp)
   40e30:	003f9b06 	br	40ca0 <__alt_data_end+0xfffd9ba0>
   40e34:	01002034 	movhi	r4,128
   40e38:	0029883a 	mov	r20,zero
   40e3c:	213fffc4 	addi	r4,r4,-1
   40e40:	00ffffc4 	movi	r3,-1
   40e44:	003fc006 	br	40d48 <__alt_data_end+0xfffd9c48>
   40e48:	9027883a 	mov	r19,r18
   40e4c:	b807883a 	mov	r3,r23
   40e50:	003fb406 	br	40d24 <__alt_data_end+0xfffd9c24>
   40e54:	9027883a 	mov	r19,r18
   40e58:	e02b883a 	mov	r21,fp
   40e5c:	b807883a 	mov	r3,r23
   40e60:	003fb006 	br	40d24 <__alt_data_end+0xfffd9c24>
   40e64:	9004d43a 	srli	r2,r18,16
   40e68:	9810d43a 	srli	r8,r19,16
   40e6c:	94bfffcc 	andi	r18,r18,65535
   40e70:	993fffcc 	andi	r4,r19,65535
   40e74:	910d383a 	mul	r6,r18,r4
   40e78:	20a7383a 	mul	r19,r4,r2
   40e7c:	9225383a 	mul	r18,r18,r8
   40e80:	3006d43a 	srli	r3,r6,16
   40e84:	1211383a 	mul	r8,r2,r8
   40e88:	94e5883a 	add	r18,r18,r19
   40e8c:	1c87883a 	add	r3,r3,r18
   40e90:	1cc0022e 	bgeu	r3,r19,40e9c <__mulsf3+0x2a0>
   40e94:	00800074 	movhi	r2,1
   40e98:	4091883a 	add	r8,r8,r2
   40e9c:	1804943a 	slli	r2,r3,16
   40ea0:	31bfffcc 	andi	r6,r6,65535
   40ea4:	1806d43a 	srli	r3,r3,16
   40ea8:	1185883a 	add	r2,r2,r6
   40eac:	102691ba 	slli	r19,r2,6
   40eb0:	1a07883a 	add	r3,r3,r8
   40eb4:	1004d6ba 	srli	r2,r2,26
   40eb8:	180891ba 	slli	r4,r3,6
   40ebc:	9826c03a 	cmpne	r19,r19,zero
   40ec0:	9884b03a 	or	r2,r19,r2
   40ec4:	1126b03a 	or	r19,r2,r4
   40ec8:	9882002c 	andhi	r2,r19,2048
   40ecc:	10000426 	beq	r2,zero,40ee0 <__mulsf3+0x2e4>
   40ed0:	9804d07a 	srli	r2,r19,1
   40ed4:	9900004c 	andi	r4,r19,1
   40ed8:	3821883a 	mov	r16,r7
   40edc:	1126b03a 	or	r19,r2,r4
   40ee0:	80c01fc4 	addi	r3,r16,127
   40ee4:	00c0210e 	bge	zero,r3,40f6c <__mulsf3+0x370>
   40ee8:	988001cc 	andi	r2,r19,7
   40eec:	10000426 	beq	r2,zero,40f00 <__mulsf3+0x304>
   40ef0:	988003cc 	andi	r2,r19,15
   40ef4:	01000104 	movi	r4,4
   40ef8:	11000126 	beq	r2,r4,40f00 <__mulsf3+0x304>
   40efc:	9927883a 	add	r19,r19,r4
   40f00:	9882002c 	andhi	r2,r19,2048
   40f04:	10000426 	beq	r2,zero,40f18 <__mulsf3+0x31c>
   40f08:	00be0034 	movhi	r2,63488
   40f0c:	10bfffc4 	addi	r2,r2,-1
   40f10:	80c02004 	addi	r3,r16,128
   40f14:	98a6703a 	and	r19,r19,r2
   40f18:	00803f84 	movi	r2,254
   40f1c:	10ffa916 	blt	r2,r3,40dc4 <__alt_data_end+0xfffd9cc4>
   40f20:	980891ba 	slli	r4,r19,6
   40f24:	a829883a 	mov	r20,r21
   40f28:	2008d27a 	srli	r4,r4,9
   40f2c:	003f8606 	br	40d48 <__alt_data_end+0xfffd9c48>
   40f30:	9080102c 	andhi	r2,r18,64
   40f34:	10000826 	beq	r2,zero,40f58 <__mulsf3+0x35c>
   40f38:	9880102c 	andhi	r2,r19,64
   40f3c:	1000061e 	bne	r2,zero,40f58 <__mulsf3+0x35c>
   40f40:	00802034 	movhi	r2,128
   40f44:	99001034 	orhi	r4,r19,64
   40f48:	10bfffc4 	addi	r2,r2,-1
   40f4c:	b029883a 	mov	r20,r22
   40f50:	2088703a 	and	r4,r4,r2
   40f54:	003fba06 	br	40e40 <__alt_data_end+0xfffd9d40>
   40f58:	00802034 	movhi	r2,128
   40f5c:	91001034 	orhi	r4,r18,64
   40f60:	10bfffc4 	addi	r2,r2,-1
   40f64:	2088703a 	and	r4,r4,r2
   40f68:	003fb506 	br	40e40 <__alt_data_end+0xfffd9d40>
   40f6c:	00800044 	movi	r2,1
   40f70:	10c7c83a 	sub	r3,r2,r3
   40f74:	008006c4 	movi	r2,27
   40f78:	10ff7016 	blt	r2,r3,40d3c <__alt_data_end+0xfffd9c3c>
   40f7c:	00800804 	movi	r2,32
   40f80:	10c5c83a 	sub	r2,r2,r3
   40f84:	9884983a 	sll	r2,r19,r2
   40f88:	98c6d83a 	srl	r3,r19,r3
   40f8c:	1004c03a 	cmpne	r2,r2,zero
   40f90:	1884b03a 	or	r2,r3,r2
   40f94:	10c001cc 	andi	r3,r2,7
   40f98:	18000426 	beq	r3,zero,40fac <__mulsf3+0x3b0>
   40f9c:	10c003cc 	andi	r3,r2,15
   40fa0:	01000104 	movi	r4,4
   40fa4:	19000126 	beq	r3,r4,40fac <__mulsf3+0x3b0>
   40fa8:	1105883a 	add	r2,r2,r4
   40fac:	10c1002c 	andhi	r3,r2,1024
   40fb0:	18000626 	beq	r3,zero,40fcc <__mulsf3+0x3d0>
   40fb4:	a829883a 	mov	r20,r21
   40fb8:	00c00044 	movi	r3,1
   40fbc:	0009883a 	mov	r4,zero
   40fc0:	003f6106 	br	40d48 <__alt_data_end+0xfffd9c48>
   40fc4:	3821883a 	mov	r16,r7
   40fc8:	003fc506 	br	40ee0 <__alt_data_end+0xfffd9de0>
   40fcc:	100491ba 	slli	r2,r2,6
   40fd0:	a829883a 	mov	r20,r21
   40fd4:	0007883a 	mov	r3,zero
   40fd8:	1008d27a 	srli	r4,r2,9
   40fdc:	003f5a06 	br	40d48 <__alt_data_end+0xfffd9c48>
   40fe0:	00802034 	movhi	r2,128
   40fe4:	99001034 	orhi	r4,r19,64
   40fe8:	10bfffc4 	addi	r2,r2,-1
   40fec:	a829883a 	mov	r20,r21
   40ff0:	2088703a 	and	r4,r4,r2
   40ff4:	003f9206 	br	40e40 <__alt_data_end+0xfffd9d40>

00040ff8 <__fixsfsi>:
   40ff8:	200ad5fa 	srli	r5,r4,23
   40ffc:	00c02034 	movhi	r3,128
   41000:	18ffffc4 	addi	r3,r3,-1
   41004:	29403fcc 	andi	r5,r5,255
   41008:	00801f84 	movi	r2,126
   4100c:	1906703a 	and	r3,r3,r4
   41010:	2008d7fa 	srli	r4,r4,31
   41014:	11400e0e 	bge	r2,r5,41050 <__fixsfsi+0x58>
   41018:	00802744 	movi	r2,157
   4101c:	11400816 	blt	r2,r5,41040 <__fixsfsi+0x48>
   41020:	00802544 	movi	r2,149
   41024:	18c02034 	orhi	r3,r3,128
   41028:	11400b0e 	bge	r2,r5,41058 <__fixsfsi+0x60>
   4102c:	28bfda84 	addi	r2,r5,-150
   41030:	1884983a 	sll	r2,r3,r2
   41034:	20000726 	beq	r4,zero,41054 <__fixsfsi+0x5c>
   41038:	0085c83a 	sub	r2,zero,r2
   4103c:	f800283a 	ret
   41040:	00a00034 	movhi	r2,32768
   41044:	10bfffc4 	addi	r2,r2,-1
   41048:	2085883a 	add	r2,r4,r2
   4104c:	f800283a 	ret
   41050:	0005883a 	mov	r2,zero
   41054:	f800283a 	ret
   41058:	00802584 	movi	r2,150
   4105c:	1145c83a 	sub	r2,r2,r5
   41060:	1884d83a 	srl	r2,r3,r2
   41064:	003ff306 	br	41034 <__alt_data_end+0xfffd9f34>

00041068 <__floatunsisf>:
   41068:	defffe04 	addi	sp,sp,-8
   4106c:	dfc00115 	stw	ra,4(sp)
   41070:	dc000015 	stw	r16,0(sp)
   41074:	20002c26 	beq	r4,zero,41128 <__floatunsisf+0xc0>
   41078:	2021883a 	mov	r16,r4
   4107c:	00411580 	call	41158 <__clzsi2>
   41080:	00c02784 	movi	r3,158
   41084:	1887c83a 	sub	r3,r3,r2
   41088:	01002584 	movi	r4,150
   4108c:	20c00f16 	blt	r4,r3,410cc <__floatunsisf+0x64>
   41090:	20c9c83a 	sub	r4,r4,r3
   41094:	8108983a 	sll	r4,r16,r4
   41098:	00802034 	movhi	r2,128
   4109c:	10bfffc4 	addi	r2,r2,-1
   410a0:	2088703a 	and	r4,r4,r2
   410a4:	18803fcc 	andi	r2,r3,255
   410a8:	100695fa 	slli	r3,r2,23
   410ac:	00802034 	movhi	r2,128
   410b0:	10bfffc4 	addi	r2,r2,-1
   410b4:	2084703a 	and	r2,r4,r2
   410b8:	10c4b03a 	or	r2,r2,r3
   410bc:	dfc00117 	ldw	ra,4(sp)
   410c0:	dc000017 	ldw	r16,0(sp)
   410c4:	dec00204 	addi	sp,sp,8
   410c8:	f800283a 	ret
   410cc:	01002644 	movi	r4,153
   410d0:	20c01816 	blt	r4,r3,41134 <__floatunsisf+0xcc>
   410d4:	20c9c83a 	sub	r4,r4,r3
   410d8:	8108983a 	sll	r4,r16,r4
   410dc:	017f0034 	movhi	r5,64512
   410e0:	297fffc4 	addi	r5,r5,-1
   410e4:	218001cc 	andi	r6,r4,7
   410e8:	214a703a 	and	r5,r4,r5
   410ec:	30000426 	beq	r6,zero,41100 <__floatunsisf+0x98>
   410f0:	210003cc 	andi	r4,r4,15
   410f4:	01800104 	movi	r6,4
   410f8:	21800126 	beq	r4,r6,41100 <__floatunsisf+0x98>
   410fc:	298b883a 	add	r5,r5,r6
   41100:	2901002c 	andhi	r4,r5,1024
   41104:	20000526 	beq	r4,zero,4111c <__floatunsisf+0xb4>
   41108:	00c027c4 	movi	r3,159
   4110c:	1887c83a 	sub	r3,r3,r2
   41110:	00bf0034 	movhi	r2,64512
   41114:	10bfffc4 	addi	r2,r2,-1
   41118:	288a703a 	and	r5,r5,r2
   4111c:	280891ba 	slli	r4,r5,6
   41120:	2008d27a 	srli	r4,r4,9
   41124:	003fdf06 	br	410a4 <__alt_data_end+0xfffd9fa4>
   41128:	0007883a 	mov	r3,zero
   4112c:	0009883a 	mov	r4,zero
   41130:	003fdc06 	br	410a4 <__alt_data_end+0xfffd9fa4>
   41134:	01402e44 	movi	r5,185
   41138:	28cbc83a 	sub	r5,r5,r3
   4113c:	01000144 	movi	r4,5
   41140:	2089c83a 	sub	r4,r4,r2
   41144:	814a983a 	sll	r5,r16,r5
   41148:	8108d83a 	srl	r4,r16,r4
   4114c:	2820c03a 	cmpne	r16,r5,zero
   41150:	2408b03a 	or	r4,r4,r16
   41154:	003fe106 	br	410dc <__alt_data_end+0xfffd9fdc>

00041158 <__clzsi2>:
   41158:	00bfffd4 	movui	r2,65535
   4115c:	11000536 	bltu	r2,r4,41174 <__clzsi2+0x1c>
   41160:	00803fc4 	movi	r2,255
   41164:	11000f36 	bltu	r2,r4,411a4 <__clzsi2+0x4c>
   41168:	00800804 	movi	r2,32
   4116c:	0007883a 	mov	r3,zero
   41170:	00000506 	br	41188 <__clzsi2+0x30>
   41174:	00804034 	movhi	r2,256
   41178:	10bfffc4 	addi	r2,r2,-1
   4117c:	11000c2e 	bgeu	r2,r4,411b0 <__clzsi2+0x58>
   41180:	00800204 	movi	r2,8
   41184:	00c00604 	movi	r3,24
   41188:	20c8d83a 	srl	r4,r4,r3
   4118c:	00c00134 	movhi	r3,4
   41190:	18d92ec4 	addi	r3,r3,25787
   41194:	1909883a 	add	r4,r3,r4
   41198:	20c00003 	ldbu	r3,0(r4)
   4119c:	10c5c83a 	sub	r2,r2,r3
   411a0:	f800283a 	ret
   411a4:	00800604 	movi	r2,24
   411a8:	00c00204 	movi	r3,8
   411ac:	003ff606 	br	41188 <__alt_data_end+0xfffda088>
   411b0:	00800404 	movi	r2,16
   411b4:	1007883a 	mov	r3,r2
   411b8:	003ff306 	br	41188 <__alt_data_end+0xfffda088>

000411bc <_puts_r>:
   411bc:	defff604 	addi	sp,sp,-40
   411c0:	dc000715 	stw	r16,28(sp)
   411c4:	2021883a 	mov	r16,r4
   411c8:	2809883a 	mov	r4,r5
   411cc:	dc400815 	stw	r17,32(sp)
   411d0:	dfc00915 	stw	ra,36(sp)
   411d4:	2823883a 	mov	r17,r5
   411d8:	00412900 	call	41290 <strlen>
   411dc:	10c00044 	addi	r3,r2,1
   411e0:	d8800115 	stw	r2,4(sp)
   411e4:	00800134 	movhi	r2,4
   411e8:	10996f04 	addi	r2,r2,26044
   411ec:	d8800215 	stw	r2,8(sp)
   411f0:	00800044 	movi	r2,1
   411f4:	d8800315 	stw	r2,12(sp)
   411f8:	00800084 	movi	r2,2
   411fc:	dc400015 	stw	r17,0(sp)
   41200:	d8c00615 	stw	r3,24(sp)
   41204:	dec00415 	stw	sp,16(sp)
   41208:	d8800515 	stw	r2,20(sp)
   4120c:	80000226 	beq	r16,zero,41218 <_puts_r+0x5c>
   41210:	80800e17 	ldw	r2,56(r16)
   41214:	10001426 	beq	r2,zero,41268 <_puts_r+0xac>
   41218:	81400217 	ldw	r5,8(r16)
   4121c:	2880030b 	ldhu	r2,12(r5)
   41220:	10c8000c 	andi	r3,r2,8192
   41224:	1800061e 	bne	r3,zero,41240 <_puts_r+0x84>
   41228:	29001917 	ldw	r4,100(r5)
   4122c:	00f7ffc4 	movi	r3,-8193
   41230:	10880014 	ori	r2,r2,8192
   41234:	20c6703a 	and	r3,r4,r3
   41238:	2880030d 	sth	r2,12(r5)
   4123c:	28c01915 	stw	r3,100(r5)
   41240:	d9800404 	addi	r6,sp,16
   41244:	8009883a 	mov	r4,r16
   41248:	00416c80 	call	416c8 <__sfvwrite_r>
   4124c:	1000091e 	bne	r2,zero,41274 <_puts_r+0xb8>
   41250:	00800284 	movi	r2,10
   41254:	dfc00917 	ldw	ra,36(sp)
   41258:	dc400817 	ldw	r17,32(sp)
   4125c:	dc000717 	ldw	r16,28(sp)
   41260:	dec00a04 	addi	sp,sp,40
   41264:	f800283a 	ret
   41268:	8009883a 	mov	r4,r16
   4126c:	00416780 	call	41678 <__sinit>
   41270:	003fe906 	br	41218 <__alt_data_end+0xfffda118>
   41274:	00bfffc4 	movi	r2,-1
   41278:	003ff606 	br	41254 <__alt_data_end+0xfffda154>

0004127c <puts>:
   4127c:	00800174 	movhi	r2,5
   41280:	10a01704 	addi	r2,r2,-32676
   41284:	200b883a 	mov	r5,r4
   41288:	11000017 	ldw	r4,0(r2)
   4128c:	00411bc1 	jmpi	411bc <_puts_r>

00041290 <strlen>:
   41290:	208000cc 	andi	r2,r4,3
   41294:	10002026 	beq	r2,zero,41318 <strlen+0x88>
   41298:	20800007 	ldb	r2,0(r4)
   4129c:	10002026 	beq	r2,zero,41320 <strlen+0x90>
   412a0:	2005883a 	mov	r2,r4
   412a4:	00000206 	br	412b0 <strlen+0x20>
   412a8:	10c00007 	ldb	r3,0(r2)
   412ac:	18001826 	beq	r3,zero,41310 <strlen+0x80>
   412b0:	10800044 	addi	r2,r2,1
   412b4:	10c000cc 	andi	r3,r2,3
   412b8:	183ffb1e 	bne	r3,zero,412a8 <__alt_data_end+0xfffda1a8>
   412bc:	10c00017 	ldw	r3,0(r2)
   412c0:	01ffbff4 	movhi	r7,65279
   412c4:	39ffbfc4 	addi	r7,r7,-257
   412c8:	00ca303a 	nor	r5,zero,r3
   412cc:	01a02074 	movhi	r6,32897
   412d0:	19c7883a 	add	r3,r3,r7
   412d4:	31a02004 	addi	r6,r6,-32640
   412d8:	1946703a 	and	r3,r3,r5
   412dc:	1986703a 	and	r3,r3,r6
   412e0:	1800091e 	bne	r3,zero,41308 <strlen+0x78>
   412e4:	10800104 	addi	r2,r2,4
   412e8:	10c00017 	ldw	r3,0(r2)
   412ec:	19cb883a 	add	r5,r3,r7
   412f0:	00c6303a 	nor	r3,zero,r3
   412f4:	28c6703a 	and	r3,r5,r3
   412f8:	1986703a 	and	r3,r3,r6
   412fc:	183ff926 	beq	r3,zero,412e4 <__alt_data_end+0xfffda1e4>
   41300:	00000106 	br	41308 <strlen+0x78>
   41304:	10800044 	addi	r2,r2,1
   41308:	10c00007 	ldb	r3,0(r2)
   4130c:	183ffd1e 	bne	r3,zero,41304 <__alt_data_end+0xfffda204>
   41310:	1105c83a 	sub	r2,r2,r4
   41314:	f800283a 	ret
   41318:	2005883a 	mov	r2,r4
   4131c:	003fe706 	br	412bc <__alt_data_end+0xfffda1bc>
   41320:	0005883a 	mov	r2,zero
   41324:	f800283a 	ret

00041328 <__fp_unlock>:
   41328:	0005883a 	mov	r2,zero
   4132c:	f800283a 	ret

00041330 <_cleanup_r>:
   41330:	01400134 	movhi	r5,4
   41334:	294cb104 	addi	r5,r5,12996
   41338:	0041c481 	jmpi	41c48 <_fwalk_reent>

0004133c <__sinit.part.1>:
   4133c:	defff704 	addi	sp,sp,-36
   41340:	00c00134 	movhi	r3,4
   41344:	dfc00815 	stw	ra,32(sp)
   41348:	ddc00715 	stw	r23,28(sp)
   4134c:	dd800615 	stw	r22,24(sp)
   41350:	dd400515 	stw	r21,20(sp)
   41354:	dd000415 	stw	r20,16(sp)
   41358:	dcc00315 	stw	r19,12(sp)
   4135c:	dc800215 	stw	r18,8(sp)
   41360:	dc400115 	stw	r17,4(sp)
   41364:	dc000015 	stw	r16,0(sp)
   41368:	18c4cc04 	addi	r3,r3,4912
   4136c:	24000117 	ldw	r16,4(r4)
   41370:	20c00f15 	stw	r3,60(r4)
   41374:	2080bb04 	addi	r2,r4,748
   41378:	00c000c4 	movi	r3,3
   4137c:	20c0b915 	stw	r3,740(r4)
   41380:	2080ba15 	stw	r2,744(r4)
   41384:	2000b815 	stw	zero,736(r4)
   41388:	05c00204 	movi	r23,8
   4138c:	00800104 	movi	r2,4
   41390:	2025883a 	mov	r18,r4
   41394:	b80d883a 	mov	r6,r23
   41398:	81001704 	addi	r4,r16,92
   4139c:	000b883a 	mov	r5,zero
   413a0:	80000015 	stw	zero,0(r16)
   413a4:	80000115 	stw	zero,4(r16)
   413a8:	80000215 	stw	zero,8(r16)
   413ac:	8080030d 	sth	r2,12(r16)
   413b0:	80001915 	stw	zero,100(r16)
   413b4:	8000038d 	sth	zero,14(r16)
   413b8:	80000415 	stw	zero,16(r16)
   413bc:	80000515 	stw	zero,20(r16)
   413c0:	80000615 	stw	zero,24(r16)
   413c4:	00428a00 	call	428a0 <memset>
   413c8:	05800134 	movhi	r22,4
   413cc:	94400217 	ldw	r17,8(r18)
   413d0:	05400134 	movhi	r21,4
   413d4:	05000134 	movhi	r20,4
   413d8:	04c00134 	movhi	r19,4
   413dc:	b58be004 	addi	r22,r22,12160
   413e0:	ad4bf704 	addi	r21,r21,12252
   413e4:	a50c1604 	addi	r20,r20,12376
   413e8:	9ccc2d04 	addi	r19,r19,12468
   413ec:	85800815 	stw	r22,32(r16)
   413f0:	85400915 	stw	r21,36(r16)
   413f4:	85000a15 	stw	r20,40(r16)
   413f8:	84c00b15 	stw	r19,44(r16)
   413fc:	84000715 	stw	r16,28(r16)
   41400:	00800284 	movi	r2,10
   41404:	8880030d 	sth	r2,12(r17)
   41408:	00800044 	movi	r2,1
   4140c:	b80d883a 	mov	r6,r23
   41410:	89001704 	addi	r4,r17,92
   41414:	000b883a 	mov	r5,zero
   41418:	88000015 	stw	zero,0(r17)
   4141c:	88000115 	stw	zero,4(r17)
   41420:	88000215 	stw	zero,8(r17)
   41424:	88001915 	stw	zero,100(r17)
   41428:	8880038d 	sth	r2,14(r17)
   4142c:	88000415 	stw	zero,16(r17)
   41430:	88000515 	stw	zero,20(r17)
   41434:	88000615 	stw	zero,24(r17)
   41438:	00428a00 	call	428a0 <memset>
   4143c:	94000317 	ldw	r16,12(r18)
   41440:	00800484 	movi	r2,18
   41444:	8c400715 	stw	r17,28(r17)
   41448:	8d800815 	stw	r22,32(r17)
   4144c:	8d400915 	stw	r21,36(r17)
   41450:	8d000a15 	stw	r20,40(r17)
   41454:	8cc00b15 	stw	r19,44(r17)
   41458:	8080030d 	sth	r2,12(r16)
   4145c:	00800084 	movi	r2,2
   41460:	80000015 	stw	zero,0(r16)
   41464:	80000115 	stw	zero,4(r16)
   41468:	80000215 	stw	zero,8(r16)
   4146c:	80001915 	stw	zero,100(r16)
   41470:	8080038d 	sth	r2,14(r16)
   41474:	80000415 	stw	zero,16(r16)
   41478:	80000515 	stw	zero,20(r16)
   4147c:	80000615 	stw	zero,24(r16)
   41480:	b80d883a 	mov	r6,r23
   41484:	000b883a 	mov	r5,zero
   41488:	81001704 	addi	r4,r16,92
   4148c:	00428a00 	call	428a0 <memset>
   41490:	00800044 	movi	r2,1
   41494:	84000715 	stw	r16,28(r16)
   41498:	85800815 	stw	r22,32(r16)
   4149c:	85400915 	stw	r21,36(r16)
   414a0:	85000a15 	stw	r20,40(r16)
   414a4:	84c00b15 	stw	r19,44(r16)
   414a8:	90800e15 	stw	r2,56(r18)
   414ac:	dfc00817 	ldw	ra,32(sp)
   414b0:	ddc00717 	ldw	r23,28(sp)
   414b4:	dd800617 	ldw	r22,24(sp)
   414b8:	dd400517 	ldw	r21,20(sp)
   414bc:	dd000417 	ldw	r20,16(sp)
   414c0:	dcc00317 	ldw	r19,12(sp)
   414c4:	dc800217 	ldw	r18,8(sp)
   414c8:	dc400117 	ldw	r17,4(sp)
   414cc:	dc000017 	ldw	r16,0(sp)
   414d0:	dec00904 	addi	sp,sp,36
   414d4:	f800283a 	ret

000414d8 <__fp_lock>:
   414d8:	0005883a 	mov	r2,zero
   414dc:	f800283a 	ret

000414e0 <__sfmoreglue>:
   414e0:	defffc04 	addi	sp,sp,-16
   414e4:	dc400115 	stw	r17,4(sp)
   414e8:	2c7fffc4 	addi	r17,r5,-1
   414ec:	8c401a24 	muli	r17,r17,104
   414f0:	dc800215 	stw	r18,8(sp)
   414f4:	2825883a 	mov	r18,r5
   414f8:	89401d04 	addi	r5,r17,116
   414fc:	dc000015 	stw	r16,0(sp)
   41500:	dfc00315 	stw	ra,12(sp)
   41504:	0041d0c0 	call	41d0c <_malloc_r>
   41508:	1021883a 	mov	r16,r2
   4150c:	10000726 	beq	r2,zero,4152c <__sfmoreglue+0x4c>
   41510:	11000304 	addi	r4,r2,12
   41514:	10000015 	stw	zero,0(r2)
   41518:	14800115 	stw	r18,4(r2)
   4151c:	11000215 	stw	r4,8(r2)
   41520:	89801a04 	addi	r6,r17,104
   41524:	000b883a 	mov	r5,zero
   41528:	00428a00 	call	428a0 <memset>
   4152c:	8005883a 	mov	r2,r16
   41530:	dfc00317 	ldw	ra,12(sp)
   41534:	dc800217 	ldw	r18,8(sp)
   41538:	dc400117 	ldw	r17,4(sp)
   4153c:	dc000017 	ldw	r16,0(sp)
   41540:	dec00404 	addi	sp,sp,16
   41544:	f800283a 	ret

00041548 <__sfp>:
   41548:	defffb04 	addi	sp,sp,-20
   4154c:	dc000015 	stw	r16,0(sp)
   41550:	04000174 	movhi	r16,5
   41554:	84201604 	addi	r16,r16,-32680
   41558:	dcc00315 	stw	r19,12(sp)
   4155c:	2027883a 	mov	r19,r4
   41560:	81000017 	ldw	r4,0(r16)
   41564:	dfc00415 	stw	ra,16(sp)
   41568:	dc800215 	stw	r18,8(sp)
   4156c:	20800e17 	ldw	r2,56(r4)
   41570:	dc400115 	stw	r17,4(sp)
   41574:	1000021e 	bne	r2,zero,41580 <__sfp+0x38>
   41578:	004133c0 	call	4133c <__sinit.part.1>
   4157c:	81000017 	ldw	r4,0(r16)
   41580:	2480b804 	addi	r18,r4,736
   41584:	047fffc4 	movi	r17,-1
   41588:	91000117 	ldw	r4,4(r18)
   4158c:	94000217 	ldw	r16,8(r18)
   41590:	213fffc4 	addi	r4,r4,-1
   41594:	20000a16 	blt	r4,zero,415c0 <__sfp+0x78>
   41598:	8080030f 	ldh	r2,12(r16)
   4159c:	10000c26 	beq	r2,zero,415d0 <__sfp+0x88>
   415a0:	80c01d04 	addi	r3,r16,116
   415a4:	00000206 	br	415b0 <__sfp+0x68>
   415a8:	18bfe60f 	ldh	r2,-104(r3)
   415ac:	10000826 	beq	r2,zero,415d0 <__sfp+0x88>
   415b0:	213fffc4 	addi	r4,r4,-1
   415b4:	1c3ffd04 	addi	r16,r3,-12
   415b8:	18c01a04 	addi	r3,r3,104
   415bc:	247ffa1e 	bne	r4,r17,415a8 <__alt_data_end+0xfffda4a8>
   415c0:	90800017 	ldw	r2,0(r18)
   415c4:	10001d26 	beq	r2,zero,4163c <__sfp+0xf4>
   415c8:	1025883a 	mov	r18,r2
   415cc:	003fee06 	br	41588 <__alt_data_end+0xfffda488>
   415d0:	00bfffc4 	movi	r2,-1
   415d4:	8080038d 	sth	r2,14(r16)
   415d8:	00800044 	movi	r2,1
   415dc:	8080030d 	sth	r2,12(r16)
   415e0:	80001915 	stw	zero,100(r16)
   415e4:	80000015 	stw	zero,0(r16)
   415e8:	80000215 	stw	zero,8(r16)
   415ec:	80000115 	stw	zero,4(r16)
   415f0:	80000415 	stw	zero,16(r16)
   415f4:	80000515 	stw	zero,20(r16)
   415f8:	80000615 	stw	zero,24(r16)
   415fc:	01800204 	movi	r6,8
   41600:	000b883a 	mov	r5,zero
   41604:	81001704 	addi	r4,r16,92
   41608:	00428a00 	call	428a0 <memset>
   4160c:	8005883a 	mov	r2,r16
   41610:	80000c15 	stw	zero,48(r16)
   41614:	80000d15 	stw	zero,52(r16)
   41618:	80001115 	stw	zero,68(r16)
   4161c:	80001215 	stw	zero,72(r16)
   41620:	dfc00417 	ldw	ra,16(sp)
   41624:	dcc00317 	ldw	r19,12(sp)
   41628:	dc800217 	ldw	r18,8(sp)
   4162c:	dc400117 	ldw	r17,4(sp)
   41630:	dc000017 	ldw	r16,0(sp)
   41634:	dec00504 	addi	sp,sp,20
   41638:	f800283a 	ret
   4163c:	01400104 	movi	r5,4
   41640:	9809883a 	mov	r4,r19
   41644:	00414e00 	call	414e0 <__sfmoreglue>
   41648:	90800015 	stw	r2,0(r18)
   4164c:	103fde1e 	bne	r2,zero,415c8 <__alt_data_end+0xfffda4c8>
   41650:	00800304 	movi	r2,12
   41654:	98800015 	stw	r2,0(r19)
   41658:	0005883a 	mov	r2,zero
   4165c:	003ff006 	br	41620 <__alt_data_end+0xfffda520>

00041660 <_cleanup>:
   41660:	00800174 	movhi	r2,5
   41664:	10a01604 	addi	r2,r2,-32680
   41668:	11000017 	ldw	r4,0(r2)
   4166c:	01400134 	movhi	r5,4
   41670:	294cb104 	addi	r5,r5,12996
   41674:	0041c481 	jmpi	41c48 <_fwalk_reent>

00041678 <__sinit>:
   41678:	20800e17 	ldw	r2,56(r4)
   4167c:	10000126 	beq	r2,zero,41684 <__sinit+0xc>
   41680:	f800283a 	ret
   41684:	004133c1 	jmpi	4133c <__sinit.part.1>

00041688 <__sfp_lock_acquire>:
   41688:	f800283a 	ret

0004168c <__sfp_lock_release>:
   4168c:	f800283a 	ret

00041690 <__sinit_lock_acquire>:
   41690:	f800283a 	ret

00041694 <__sinit_lock_release>:
   41694:	f800283a 	ret

00041698 <__fp_lock_all>:
   41698:	00800174 	movhi	r2,5
   4169c:	10a01704 	addi	r2,r2,-32676
   416a0:	11000017 	ldw	r4,0(r2)
   416a4:	01400134 	movhi	r5,4
   416a8:	29453604 	addi	r5,r5,5336
   416ac:	0041b841 	jmpi	41b84 <_fwalk>

000416b0 <__fp_unlock_all>:
   416b0:	00800174 	movhi	r2,5
   416b4:	10a01704 	addi	r2,r2,-32676
   416b8:	11000017 	ldw	r4,0(r2)
   416bc:	01400134 	movhi	r5,4
   416c0:	2944ca04 	addi	r5,r5,4904
   416c4:	0041b841 	jmpi	41b84 <_fwalk>

000416c8 <__sfvwrite_r>:
   416c8:	30800217 	ldw	r2,8(r6)
   416cc:	10006726 	beq	r2,zero,4186c <__sfvwrite_r+0x1a4>
   416d0:	28c0030b 	ldhu	r3,12(r5)
   416d4:	defff404 	addi	sp,sp,-48
   416d8:	dd400715 	stw	r21,28(sp)
   416dc:	dd000615 	stw	r20,24(sp)
   416e0:	dc000215 	stw	r16,8(sp)
   416e4:	dfc00b15 	stw	ra,44(sp)
   416e8:	df000a15 	stw	fp,40(sp)
   416ec:	ddc00915 	stw	r23,36(sp)
   416f0:	dd800815 	stw	r22,32(sp)
   416f4:	dcc00515 	stw	r19,20(sp)
   416f8:	dc800415 	stw	r18,16(sp)
   416fc:	dc400315 	stw	r17,12(sp)
   41700:	1880020c 	andi	r2,r3,8
   41704:	2821883a 	mov	r16,r5
   41708:	202b883a 	mov	r21,r4
   4170c:	3029883a 	mov	r20,r6
   41710:	10002726 	beq	r2,zero,417b0 <__sfvwrite_r+0xe8>
   41714:	28800417 	ldw	r2,16(r5)
   41718:	10002526 	beq	r2,zero,417b0 <__sfvwrite_r+0xe8>
   4171c:	1880008c 	andi	r2,r3,2
   41720:	a4400017 	ldw	r17,0(r20)
   41724:	10002a26 	beq	r2,zero,417d0 <__sfvwrite_r+0x108>
   41728:	05a00034 	movhi	r22,32768
   4172c:	0027883a 	mov	r19,zero
   41730:	0025883a 	mov	r18,zero
   41734:	b5bf0004 	addi	r22,r22,-1024
   41738:	980d883a 	mov	r6,r19
   4173c:	a809883a 	mov	r4,r21
   41740:	90004626 	beq	r18,zero,4185c <__sfvwrite_r+0x194>
   41744:	900f883a 	mov	r7,r18
   41748:	b480022e 	bgeu	r22,r18,41754 <__sfvwrite_r+0x8c>
   4174c:	01e00034 	movhi	r7,32768
   41750:	39ff0004 	addi	r7,r7,-1024
   41754:	80800917 	ldw	r2,36(r16)
   41758:	81400717 	ldw	r5,28(r16)
   4175c:	103ee83a 	callr	r2
   41760:	0080570e 	bge	zero,r2,418c0 <__sfvwrite_r+0x1f8>
   41764:	a0c00217 	ldw	r3,8(r20)
   41768:	98a7883a 	add	r19,r19,r2
   4176c:	90a5c83a 	sub	r18,r18,r2
   41770:	1885c83a 	sub	r2,r3,r2
   41774:	a0800215 	stw	r2,8(r20)
   41778:	103fef1e 	bne	r2,zero,41738 <__alt_data_end+0xfffda638>
   4177c:	0005883a 	mov	r2,zero
   41780:	dfc00b17 	ldw	ra,44(sp)
   41784:	df000a17 	ldw	fp,40(sp)
   41788:	ddc00917 	ldw	r23,36(sp)
   4178c:	dd800817 	ldw	r22,32(sp)
   41790:	dd400717 	ldw	r21,28(sp)
   41794:	dd000617 	ldw	r20,24(sp)
   41798:	dcc00517 	ldw	r19,20(sp)
   4179c:	dc800417 	ldw	r18,16(sp)
   417a0:	dc400317 	ldw	r17,12(sp)
   417a4:	dc000217 	ldw	r16,8(sp)
   417a8:	dec00c04 	addi	sp,sp,48
   417ac:	f800283a 	ret
   417b0:	800b883a 	mov	r5,r16
   417b4:	a809883a 	mov	r4,r21
   417b8:	004311c0 	call	4311c <__swsetup_r>
   417bc:	1000eb1e 	bne	r2,zero,41b6c <__sfvwrite_r+0x4a4>
   417c0:	80c0030b 	ldhu	r3,12(r16)
   417c4:	a4400017 	ldw	r17,0(r20)
   417c8:	1880008c 	andi	r2,r3,2
   417cc:	103fd61e 	bne	r2,zero,41728 <__alt_data_end+0xfffda628>
   417d0:	1880004c 	andi	r2,r3,1
   417d4:	10003f1e 	bne	r2,zero,418d4 <__sfvwrite_r+0x20c>
   417d8:	0039883a 	mov	fp,zero
   417dc:	0025883a 	mov	r18,zero
   417e0:	90001a26 	beq	r18,zero,4184c <__sfvwrite_r+0x184>
   417e4:	1880800c 	andi	r2,r3,512
   417e8:	84c00217 	ldw	r19,8(r16)
   417ec:	10002126 	beq	r2,zero,41874 <__sfvwrite_r+0x1ac>
   417f0:	982f883a 	mov	r23,r19
   417f4:	94c09336 	bltu	r18,r19,41a44 <__sfvwrite_r+0x37c>
   417f8:	1881200c 	andi	r2,r3,1152
   417fc:	10009e1e 	bne	r2,zero,41a78 <__sfvwrite_r+0x3b0>
   41800:	81000017 	ldw	r4,0(r16)
   41804:	b80d883a 	mov	r6,r23
   41808:	e00b883a 	mov	r5,fp
   4180c:	00427440 	call	42744 <memmove>
   41810:	80c00217 	ldw	r3,8(r16)
   41814:	81000017 	ldw	r4,0(r16)
   41818:	9005883a 	mov	r2,r18
   4181c:	1ce7c83a 	sub	r19,r3,r19
   41820:	25cf883a 	add	r7,r4,r23
   41824:	84c00215 	stw	r19,8(r16)
   41828:	81c00015 	stw	r7,0(r16)
   4182c:	a0c00217 	ldw	r3,8(r20)
   41830:	e0b9883a 	add	fp,fp,r2
   41834:	90a5c83a 	sub	r18,r18,r2
   41838:	18a7c83a 	sub	r19,r3,r2
   4183c:	a4c00215 	stw	r19,8(r20)
   41840:	983fce26 	beq	r19,zero,4177c <__alt_data_end+0xfffda67c>
   41844:	80c0030b 	ldhu	r3,12(r16)
   41848:	903fe61e 	bne	r18,zero,417e4 <__alt_data_end+0xfffda6e4>
   4184c:	8f000017 	ldw	fp,0(r17)
   41850:	8c800117 	ldw	r18,4(r17)
   41854:	8c400204 	addi	r17,r17,8
   41858:	003fe106 	br	417e0 <__alt_data_end+0xfffda6e0>
   4185c:	8cc00017 	ldw	r19,0(r17)
   41860:	8c800117 	ldw	r18,4(r17)
   41864:	8c400204 	addi	r17,r17,8
   41868:	003fb306 	br	41738 <__alt_data_end+0xfffda638>
   4186c:	0005883a 	mov	r2,zero
   41870:	f800283a 	ret
   41874:	81000017 	ldw	r4,0(r16)
   41878:	80800417 	ldw	r2,16(r16)
   4187c:	11005736 	bltu	r2,r4,419dc <__sfvwrite_r+0x314>
   41880:	85c00517 	ldw	r23,20(r16)
   41884:	95c05536 	bltu	r18,r23,419dc <__sfvwrite_r+0x314>
   41888:	00a00034 	movhi	r2,32768
   4188c:	10bfffc4 	addi	r2,r2,-1
   41890:	9009883a 	mov	r4,r18
   41894:	1480012e 	bgeu	r2,r18,4189c <__sfvwrite_r+0x1d4>
   41898:	1009883a 	mov	r4,r2
   4189c:	b80b883a 	mov	r5,r23
   418a0:	00406080 	call	40608 <__divsi3>
   418a4:	15cf383a 	mul	r7,r2,r23
   418a8:	81400717 	ldw	r5,28(r16)
   418ac:	80800917 	ldw	r2,36(r16)
   418b0:	e00d883a 	mov	r6,fp
   418b4:	a809883a 	mov	r4,r21
   418b8:	103ee83a 	callr	r2
   418bc:	00bfdb16 	blt	zero,r2,4182c <__alt_data_end+0xfffda72c>
   418c0:	8080030b 	ldhu	r2,12(r16)
   418c4:	10801014 	ori	r2,r2,64
   418c8:	8080030d 	sth	r2,12(r16)
   418cc:	00bfffc4 	movi	r2,-1
   418d0:	003fab06 	br	41780 <__alt_data_end+0xfffda680>
   418d4:	0027883a 	mov	r19,zero
   418d8:	0011883a 	mov	r8,zero
   418dc:	0039883a 	mov	fp,zero
   418e0:	0025883a 	mov	r18,zero
   418e4:	90001f26 	beq	r18,zero,41964 <__sfvwrite_r+0x29c>
   418e8:	40005a26 	beq	r8,zero,41a54 <__sfvwrite_r+0x38c>
   418ec:	982d883a 	mov	r22,r19
   418f0:	94c0012e 	bgeu	r18,r19,418f8 <__sfvwrite_r+0x230>
   418f4:	902d883a 	mov	r22,r18
   418f8:	81000017 	ldw	r4,0(r16)
   418fc:	80800417 	ldw	r2,16(r16)
   41900:	b02f883a 	mov	r23,r22
   41904:	81c00517 	ldw	r7,20(r16)
   41908:	1100032e 	bgeu	r2,r4,41918 <__sfvwrite_r+0x250>
   4190c:	80c00217 	ldw	r3,8(r16)
   41910:	38c7883a 	add	r3,r7,r3
   41914:	1d801816 	blt	r3,r22,41978 <__sfvwrite_r+0x2b0>
   41918:	b1c03e16 	blt	r22,r7,41a14 <__sfvwrite_r+0x34c>
   4191c:	80800917 	ldw	r2,36(r16)
   41920:	81400717 	ldw	r5,28(r16)
   41924:	e00d883a 	mov	r6,fp
   41928:	da000115 	stw	r8,4(sp)
   4192c:	a809883a 	mov	r4,r21
   41930:	103ee83a 	callr	r2
   41934:	102f883a 	mov	r23,r2
   41938:	da000117 	ldw	r8,4(sp)
   4193c:	00bfe00e 	bge	zero,r2,418c0 <__alt_data_end+0xfffda7c0>
   41940:	9de7c83a 	sub	r19,r19,r23
   41944:	98001f26 	beq	r19,zero,419c4 <__sfvwrite_r+0x2fc>
   41948:	a0800217 	ldw	r2,8(r20)
   4194c:	e5f9883a 	add	fp,fp,r23
   41950:	95e5c83a 	sub	r18,r18,r23
   41954:	15efc83a 	sub	r23,r2,r23
   41958:	a5c00215 	stw	r23,8(r20)
   4195c:	b83f8726 	beq	r23,zero,4177c <__alt_data_end+0xfffda67c>
   41960:	903fe11e 	bne	r18,zero,418e8 <__alt_data_end+0xfffda7e8>
   41964:	8f000017 	ldw	fp,0(r17)
   41968:	8c800117 	ldw	r18,4(r17)
   4196c:	0011883a 	mov	r8,zero
   41970:	8c400204 	addi	r17,r17,8
   41974:	003fdb06 	br	418e4 <__alt_data_end+0xfffda7e4>
   41978:	180d883a 	mov	r6,r3
   4197c:	e00b883a 	mov	r5,fp
   41980:	da000115 	stw	r8,4(sp)
   41984:	d8c00015 	stw	r3,0(sp)
   41988:	00427440 	call	42744 <memmove>
   4198c:	d8c00017 	ldw	r3,0(sp)
   41990:	80800017 	ldw	r2,0(r16)
   41994:	800b883a 	mov	r5,r16
   41998:	a809883a 	mov	r4,r21
   4199c:	10c5883a 	add	r2,r2,r3
   419a0:	80800015 	stw	r2,0(r16)
   419a4:	d8c00015 	stw	r3,0(sp)
   419a8:	00435e40 	call	435e4 <_fflush_r>
   419ac:	d8c00017 	ldw	r3,0(sp)
   419b0:	da000117 	ldw	r8,4(sp)
   419b4:	103fc21e 	bne	r2,zero,418c0 <__alt_data_end+0xfffda7c0>
   419b8:	182f883a 	mov	r23,r3
   419bc:	9de7c83a 	sub	r19,r19,r23
   419c0:	983fe11e 	bne	r19,zero,41948 <__alt_data_end+0xfffda848>
   419c4:	800b883a 	mov	r5,r16
   419c8:	a809883a 	mov	r4,r21
   419cc:	00435e40 	call	435e4 <_fflush_r>
   419d0:	103fbb1e 	bne	r2,zero,418c0 <__alt_data_end+0xfffda7c0>
   419d4:	0011883a 	mov	r8,zero
   419d8:	003fdb06 	br	41948 <__alt_data_end+0xfffda848>
   419dc:	94c0012e 	bgeu	r18,r19,419e4 <__sfvwrite_r+0x31c>
   419e0:	9027883a 	mov	r19,r18
   419e4:	980d883a 	mov	r6,r19
   419e8:	e00b883a 	mov	r5,fp
   419ec:	00427440 	call	42744 <memmove>
   419f0:	80800217 	ldw	r2,8(r16)
   419f4:	80c00017 	ldw	r3,0(r16)
   419f8:	14c5c83a 	sub	r2,r2,r19
   419fc:	1cc7883a 	add	r3,r3,r19
   41a00:	80800215 	stw	r2,8(r16)
   41a04:	80c00015 	stw	r3,0(r16)
   41a08:	10004326 	beq	r2,zero,41b18 <__sfvwrite_r+0x450>
   41a0c:	9805883a 	mov	r2,r19
   41a10:	003f8606 	br	4182c <__alt_data_end+0xfffda72c>
   41a14:	b00d883a 	mov	r6,r22
   41a18:	e00b883a 	mov	r5,fp
   41a1c:	da000115 	stw	r8,4(sp)
   41a20:	00427440 	call	42744 <memmove>
   41a24:	80800217 	ldw	r2,8(r16)
   41a28:	80c00017 	ldw	r3,0(r16)
   41a2c:	da000117 	ldw	r8,4(sp)
   41a30:	1585c83a 	sub	r2,r2,r22
   41a34:	1dad883a 	add	r22,r3,r22
   41a38:	80800215 	stw	r2,8(r16)
   41a3c:	85800015 	stw	r22,0(r16)
   41a40:	003fbf06 	br	41940 <__alt_data_end+0xfffda840>
   41a44:	81000017 	ldw	r4,0(r16)
   41a48:	9027883a 	mov	r19,r18
   41a4c:	902f883a 	mov	r23,r18
   41a50:	003f6c06 	br	41804 <__alt_data_end+0xfffda704>
   41a54:	900d883a 	mov	r6,r18
   41a58:	01400284 	movi	r5,10
   41a5c:	e009883a 	mov	r4,fp
   41a60:	00425180 	call	42518 <memchr>
   41a64:	10003e26 	beq	r2,zero,41b60 <__sfvwrite_r+0x498>
   41a68:	10800044 	addi	r2,r2,1
   41a6c:	1727c83a 	sub	r19,r2,fp
   41a70:	02000044 	movi	r8,1
   41a74:	003f9d06 	br	418ec <__alt_data_end+0xfffda7ec>
   41a78:	80800517 	ldw	r2,20(r16)
   41a7c:	81400417 	ldw	r5,16(r16)
   41a80:	81c00017 	ldw	r7,0(r16)
   41a84:	10a7883a 	add	r19,r2,r2
   41a88:	9885883a 	add	r2,r19,r2
   41a8c:	1026d7fa 	srli	r19,r2,31
   41a90:	396dc83a 	sub	r22,r7,r5
   41a94:	b1000044 	addi	r4,r22,1
   41a98:	9885883a 	add	r2,r19,r2
   41a9c:	1027d07a 	srai	r19,r2,1
   41aa0:	2485883a 	add	r2,r4,r18
   41aa4:	980d883a 	mov	r6,r19
   41aa8:	9880022e 	bgeu	r19,r2,41ab4 <__sfvwrite_r+0x3ec>
   41aac:	1027883a 	mov	r19,r2
   41ab0:	100d883a 	mov	r6,r2
   41ab4:	18c1000c 	andi	r3,r3,1024
   41ab8:	18001c26 	beq	r3,zero,41b2c <__sfvwrite_r+0x464>
   41abc:	300b883a 	mov	r5,r6
   41ac0:	a809883a 	mov	r4,r21
   41ac4:	0041d0c0 	call	41d0c <_malloc_r>
   41ac8:	102f883a 	mov	r23,r2
   41acc:	10002926 	beq	r2,zero,41b74 <__sfvwrite_r+0x4ac>
   41ad0:	81400417 	ldw	r5,16(r16)
   41ad4:	b00d883a 	mov	r6,r22
   41ad8:	1009883a 	mov	r4,r2
   41adc:	00425fc0 	call	425fc <memcpy>
   41ae0:	8080030b 	ldhu	r2,12(r16)
   41ae4:	00fedfc4 	movi	r3,-1153
   41ae8:	10c4703a 	and	r2,r2,r3
   41aec:	10802014 	ori	r2,r2,128
   41af0:	8080030d 	sth	r2,12(r16)
   41af4:	bd89883a 	add	r4,r23,r22
   41af8:	9d8fc83a 	sub	r7,r19,r22
   41afc:	85c00415 	stw	r23,16(r16)
   41b00:	84c00515 	stw	r19,20(r16)
   41b04:	81000015 	stw	r4,0(r16)
   41b08:	9027883a 	mov	r19,r18
   41b0c:	81c00215 	stw	r7,8(r16)
   41b10:	902f883a 	mov	r23,r18
   41b14:	003f3b06 	br	41804 <__alt_data_end+0xfffda704>
   41b18:	800b883a 	mov	r5,r16
   41b1c:	a809883a 	mov	r4,r21
   41b20:	00435e40 	call	435e4 <_fflush_r>
   41b24:	103fb926 	beq	r2,zero,41a0c <__alt_data_end+0xfffda90c>
   41b28:	003f6506 	br	418c0 <__alt_data_end+0xfffda7c0>
   41b2c:	a809883a 	mov	r4,r21
   41b30:	00429c80 	call	429c8 <_realloc_r>
   41b34:	102f883a 	mov	r23,r2
   41b38:	103fee1e 	bne	r2,zero,41af4 <__alt_data_end+0xfffda9f4>
   41b3c:	81400417 	ldw	r5,16(r16)
   41b40:	a809883a 	mov	r4,r21
   41b44:	00437940 	call	43794 <_free_r>
   41b48:	8080030b 	ldhu	r2,12(r16)
   41b4c:	00ffdfc4 	movi	r3,-129
   41b50:	1884703a 	and	r2,r3,r2
   41b54:	00c00304 	movi	r3,12
   41b58:	a8c00015 	stw	r3,0(r21)
   41b5c:	003f5906 	br	418c4 <__alt_data_end+0xfffda7c4>
   41b60:	94c00044 	addi	r19,r18,1
   41b64:	02000044 	movi	r8,1
   41b68:	003f6006 	br	418ec <__alt_data_end+0xfffda7ec>
   41b6c:	00bfffc4 	movi	r2,-1
   41b70:	003f0306 	br	41780 <__alt_data_end+0xfffda680>
   41b74:	00800304 	movi	r2,12
   41b78:	a8800015 	stw	r2,0(r21)
   41b7c:	8080030b 	ldhu	r2,12(r16)
   41b80:	003f5006 	br	418c4 <__alt_data_end+0xfffda7c4>

00041b84 <_fwalk>:
   41b84:	defff704 	addi	sp,sp,-36
   41b88:	dd000415 	stw	r20,16(sp)
   41b8c:	dfc00815 	stw	ra,32(sp)
   41b90:	ddc00715 	stw	r23,28(sp)
   41b94:	dd800615 	stw	r22,24(sp)
   41b98:	dd400515 	stw	r21,20(sp)
   41b9c:	dcc00315 	stw	r19,12(sp)
   41ba0:	dc800215 	stw	r18,8(sp)
   41ba4:	dc400115 	stw	r17,4(sp)
   41ba8:	dc000015 	stw	r16,0(sp)
   41bac:	2500b804 	addi	r20,r4,736
   41bb0:	a0002326 	beq	r20,zero,41c40 <_fwalk+0xbc>
   41bb4:	282b883a 	mov	r21,r5
   41bb8:	002f883a 	mov	r23,zero
   41bbc:	05800044 	movi	r22,1
   41bc0:	04ffffc4 	movi	r19,-1
   41bc4:	a4400117 	ldw	r17,4(r20)
   41bc8:	a4800217 	ldw	r18,8(r20)
   41bcc:	8c7fffc4 	addi	r17,r17,-1
   41bd0:	88000d16 	blt	r17,zero,41c08 <_fwalk+0x84>
   41bd4:	94000304 	addi	r16,r18,12
   41bd8:	94800384 	addi	r18,r18,14
   41bdc:	8080000b 	ldhu	r2,0(r16)
   41be0:	8c7fffc4 	addi	r17,r17,-1
   41be4:	813ffd04 	addi	r4,r16,-12
   41be8:	b080042e 	bgeu	r22,r2,41bfc <_fwalk+0x78>
   41bec:	9080000f 	ldh	r2,0(r18)
   41bf0:	14c00226 	beq	r2,r19,41bfc <_fwalk+0x78>
   41bf4:	a83ee83a 	callr	r21
   41bf8:	b8aeb03a 	or	r23,r23,r2
   41bfc:	84001a04 	addi	r16,r16,104
   41c00:	94801a04 	addi	r18,r18,104
   41c04:	8cfff51e 	bne	r17,r19,41bdc <__alt_data_end+0xfffdaadc>
   41c08:	a5000017 	ldw	r20,0(r20)
   41c0c:	a03fed1e 	bne	r20,zero,41bc4 <__alt_data_end+0xfffdaac4>
   41c10:	b805883a 	mov	r2,r23
   41c14:	dfc00817 	ldw	ra,32(sp)
   41c18:	ddc00717 	ldw	r23,28(sp)
   41c1c:	dd800617 	ldw	r22,24(sp)
   41c20:	dd400517 	ldw	r21,20(sp)
   41c24:	dd000417 	ldw	r20,16(sp)
   41c28:	dcc00317 	ldw	r19,12(sp)
   41c2c:	dc800217 	ldw	r18,8(sp)
   41c30:	dc400117 	ldw	r17,4(sp)
   41c34:	dc000017 	ldw	r16,0(sp)
   41c38:	dec00904 	addi	sp,sp,36
   41c3c:	f800283a 	ret
   41c40:	002f883a 	mov	r23,zero
   41c44:	003ff206 	br	41c10 <__alt_data_end+0xfffdab10>

00041c48 <_fwalk_reent>:
   41c48:	defff704 	addi	sp,sp,-36
   41c4c:	dd000415 	stw	r20,16(sp)
   41c50:	dfc00815 	stw	ra,32(sp)
   41c54:	ddc00715 	stw	r23,28(sp)
   41c58:	dd800615 	stw	r22,24(sp)
   41c5c:	dd400515 	stw	r21,20(sp)
   41c60:	dcc00315 	stw	r19,12(sp)
   41c64:	dc800215 	stw	r18,8(sp)
   41c68:	dc400115 	stw	r17,4(sp)
   41c6c:	dc000015 	stw	r16,0(sp)
   41c70:	2500b804 	addi	r20,r4,736
   41c74:	a0002326 	beq	r20,zero,41d04 <_fwalk_reent+0xbc>
   41c78:	282b883a 	mov	r21,r5
   41c7c:	2027883a 	mov	r19,r4
   41c80:	002f883a 	mov	r23,zero
   41c84:	05800044 	movi	r22,1
   41c88:	04bfffc4 	movi	r18,-1
   41c8c:	a4400117 	ldw	r17,4(r20)
   41c90:	a4000217 	ldw	r16,8(r20)
   41c94:	8c7fffc4 	addi	r17,r17,-1
   41c98:	88000c16 	blt	r17,zero,41ccc <_fwalk_reent+0x84>
   41c9c:	84000304 	addi	r16,r16,12
   41ca0:	8080000b 	ldhu	r2,0(r16)
   41ca4:	8c7fffc4 	addi	r17,r17,-1
   41ca8:	817ffd04 	addi	r5,r16,-12
   41cac:	b080052e 	bgeu	r22,r2,41cc4 <_fwalk_reent+0x7c>
   41cb0:	8080008f 	ldh	r2,2(r16)
   41cb4:	9809883a 	mov	r4,r19
   41cb8:	14800226 	beq	r2,r18,41cc4 <_fwalk_reent+0x7c>
   41cbc:	a83ee83a 	callr	r21
   41cc0:	b8aeb03a 	or	r23,r23,r2
   41cc4:	84001a04 	addi	r16,r16,104
   41cc8:	8cbff51e 	bne	r17,r18,41ca0 <__alt_data_end+0xfffdaba0>
   41ccc:	a5000017 	ldw	r20,0(r20)
   41cd0:	a03fee1e 	bne	r20,zero,41c8c <__alt_data_end+0xfffdab8c>
   41cd4:	b805883a 	mov	r2,r23
   41cd8:	dfc00817 	ldw	ra,32(sp)
   41cdc:	ddc00717 	ldw	r23,28(sp)
   41ce0:	dd800617 	ldw	r22,24(sp)
   41ce4:	dd400517 	ldw	r21,20(sp)
   41ce8:	dd000417 	ldw	r20,16(sp)
   41cec:	dcc00317 	ldw	r19,12(sp)
   41cf0:	dc800217 	ldw	r18,8(sp)
   41cf4:	dc400117 	ldw	r17,4(sp)
   41cf8:	dc000017 	ldw	r16,0(sp)
   41cfc:	dec00904 	addi	sp,sp,36
   41d00:	f800283a 	ret
   41d04:	002f883a 	mov	r23,zero
   41d08:	003ff206 	br	41cd4 <__alt_data_end+0xfffdabd4>

00041d0c <_malloc_r>:
   41d0c:	defff504 	addi	sp,sp,-44
   41d10:	dc800315 	stw	r18,12(sp)
   41d14:	dfc00a15 	stw	ra,40(sp)
   41d18:	df000915 	stw	fp,36(sp)
   41d1c:	ddc00815 	stw	r23,32(sp)
   41d20:	dd800715 	stw	r22,28(sp)
   41d24:	dd400615 	stw	r21,24(sp)
   41d28:	dd000515 	stw	r20,20(sp)
   41d2c:	dcc00415 	stw	r19,16(sp)
   41d30:	dc400215 	stw	r17,8(sp)
   41d34:	dc000115 	stw	r16,4(sp)
   41d38:	288002c4 	addi	r2,r5,11
   41d3c:	00c00584 	movi	r3,22
   41d40:	2025883a 	mov	r18,r4
   41d44:	18807f2e 	bgeu	r3,r2,41f44 <_malloc_r+0x238>
   41d48:	047ffe04 	movi	r17,-8
   41d4c:	1462703a 	and	r17,r2,r17
   41d50:	8800a316 	blt	r17,zero,41fe0 <_malloc_r+0x2d4>
   41d54:	8940a236 	bltu	r17,r5,41fe0 <_malloc_r+0x2d4>
   41d58:	004434c0 	call	4434c <__malloc_lock>
   41d5c:	00807dc4 	movi	r2,503
   41d60:	1441e92e 	bgeu	r2,r17,42508 <_malloc_r+0x7fc>
   41d64:	8804d27a 	srli	r2,r17,9
   41d68:	1000a126 	beq	r2,zero,41ff0 <_malloc_r+0x2e4>
   41d6c:	00c00104 	movi	r3,4
   41d70:	18811e36 	bltu	r3,r2,421ec <_malloc_r+0x4e0>
   41d74:	8804d1ba 	srli	r2,r17,6
   41d78:	12000e44 	addi	r8,r2,57
   41d7c:	11c00e04 	addi	r7,r2,56
   41d80:	4209883a 	add	r4,r8,r8
   41d84:	04c00134 	movhi	r19,4
   41d88:	2109883a 	add	r4,r4,r4
   41d8c:	9cda8f04 	addi	r19,r19,27196
   41d90:	2109883a 	add	r4,r4,r4
   41d94:	9909883a 	add	r4,r19,r4
   41d98:	24000117 	ldw	r16,4(r4)
   41d9c:	213ffe04 	addi	r4,r4,-8
   41da0:	24009726 	beq	r4,r16,42000 <_malloc_r+0x2f4>
   41da4:	80800117 	ldw	r2,4(r16)
   41da8:	01bfff04 	movi	r6,-4
   41dac:	014003c4 	movi	r5,15
   41db0:	1184703a 	and	r2,r2,r6
   41db4:	1447c83a 	sub	r3,r2,r17
   41db8:	28c00716 	blt	r5,r3,41dd8 <_malloc_r+0xcc>
   41dbc:	1800920e 	bge	r3,zero,42008 <_malloc_r+0x2fc>
   41dc0:	84000317 	ldw	r16,12(r16)
   41dc4:	24008e26 	beq	r4,r16,42000 <_malloc_r+0x2f4>
   41dc8:	80800117 	ldw	r2,4(r16)
   41dcc:	1184703a 	and	r2,r2,r6
   41dd0:	1447c83a 	sub	r3,r2,r17
   41dd4:	28fff90e 	bge	r5,r3,41dbc <__alt_data_end+0xfffdacbc>
   41dd8:	3809883a 	mov	r4,r7
   41ddc:	01800134 	movhi	r6,4
   41de0:	9c000417 	ldw	r16,16(r19)
   41de4:	319a8f04 	addi	r6,r6,27196
   41de8:	32000204 	addi	r8,r6,8
   41dec:	82013426 	beq	r16,r8,422c0 <_malloc_r+0x5b4>
   41df0:	80c00117 	ldw	r3,4(r16)
   41df4:	00bfff04 	movi	r2,-4
   41df8:	188e703a 	and	r7,r3,r2
   41dfc:	3c45c83a 	sub	r2,r7,r17
   41e00:	00c003c4 	movi	r3,15
   41e04:	18811f16 	blt	r3,r2,42284 <_malloc_r+0x578>
   41e08:	32000515 	stw	r8,20(r6)
   41e0c:	32000415 	stw	r8,16(r6)
   41e10:	10007f0e 	bge	r2,zero,42010 <_malloc_r+0x304>
   41e14:	00807fc4 	movi	r2,511
   41e18:	11c0fd36 	bltu	r2,r7,42210 <_malloc_r+0x504>
   41e1c:	3806d0fa 	srli	r3,r7,3
   41e20:	01c00044 	movi	r7,1
   41e24:	30800117 	ldw	r2,4(r6)
   41e28:	19400044 	addi	r5,r3,1
   41e2c:	294b883a 	add	r5,r5,r5
   41e30:	1807d0ba 	srai	r3,r3,2
   41e34:	294b883a 	add	r5,r5,r5
   41e38:	294b883a 	add	r5,r5,r5
   41e3c:	298b883a 	add	r5,r5,r6
   41e40:	38c6983a 	sll	r3,r7,r3
   41e44:	29c00017 	ldw	r7,0(r5)
   41e48:	2a7ffe04 	addi	r9,r5,-8
   41e4c:	1886b03a 	or	r3,r3,r2
   41e50:	82400315 	stw	r9,12(r16)
   41e54:	81c00215 	stw	r7,8(r16)
   41e58:	30c00115 	stw	r3,4(r6)
   41e5c:	2c000015 	stw	r16,0(r5)
   41e60:	3c000315 	stw	r16,12(r7)
   41e64:	2005d0ba 	srai	r2,r4,2
   41e68:	01400044 	movi	r5,1
   41e6c:	288a983a 	sll	r5,r5,r2
   41e70:	19406f36 	bltu	r3,r5,42030 <_malloc_r+0x324>
   41e74:	28c4703a 	and	r2,r5,r3
   41e78:	10000a1e 	bne	r2,zero,41ea4 <_malloc_r+0x198>
   41e7c:	00bfff04 	movi	r2,-4
   41e80:	294b883a 	add	r5,r5,r5
   41e84:	2088703a 	and	r4,r4,r2
   41e88:	28c4703a 	and	r2,r5,r3
   41e8c:	21000104 	addi	r4,r4,4
   41e90:	1000041e 	bne	r2,zero,41ea4 <_malloc_r+0x198>
   41e94:	294b883a 	add	r5,r5,r5
   41e98:	28c4703a 	and	r2,r5,r3
   41e9c:	21000104 	addi	r4,r4,4
   41ea0:	103ffc26 	beq	r2,zero,41e94 <__alt_data_end+0xfffdad94>
   41ea4:	02bfff04 	movi	r10,-4
   41ea8:	024003c4 	movi	r9,15
   41eac:	21800044 	addi	r6,r4,1
   41eb0:	318d883a 	add	r6,r6,r6
   41eb4:	318d883a 	add	r6,r6,r6
   41eb8:	318d883a 	add	r6,r6,r6
   41ebc:	998d883a 	add	r6,r19,r6
   41ec0:	333ffe04 	addi	r12,r6,-8
   41ec4:	2017883a 	mov	r11,r4
   41ec8:	31800104 	addi	r6,r6,4
   41ecc:	34000017 	ldw	r16,0(r6)
   41ed0:	31fffd04 	addi	r7,r6,-12
   41ed4:	81c0041e 	bne	r16,r7,41ee8 <_malloc_r+0x1dc>
   41ed8:	0000fb06 	br	422c8 <_malloc_r+0x5bc>
   41edc:	1801030e 	bge	r3,zero,422ec <_malloc_r+0x5e0>
   41ee0:	84000317 	ldw	r16,12(r16)
   41ee4:	81c0f826 	beq	r16,r7,422c8 <_malloc_r+0x5bc>
   41ee8:	80800117 	ldw	r2,4(r16)
   41eec:	1284703a 	and	r2,r2,r10
   41ef0:	1447c83a 	sub	r3,r2,r17
   41ef4:	48fff90e 	bge	r9,r3,41edc <__alt_data_end+0xfffdaddc>
   41ef8:	80800317 	ldw	r2,12(r16)
   41efc:	81000217 	ldw	r4,8(r16)
   41f00:	89400054 	ori	r5,r17,1
   41f04:	81400115 	stw	r5,4(r16)
   41f08:	20800315 	stw	r2,12(r4)
   41f0c:	11000215 	stw	r4,8(r2)
   41f10:	8463883a 	add	r17,r16,r17
   41f14:	9c400515 	stw	r17,20(r19)
   41f18:	9c400415 	stw	r17,16(r19)
   41f1c:	18800054 	ori	r2,r3,1
   41f20:	88800115 	stw	r2,4(r17)
   41f24:	8a000315 	stw	r8,12(r17)
   41f28:	8a000215 	stw	r8,8(r17)
   41f2c:	88e3883a 	add	r17,r17,r3
   41f30:	88c00015 	stw	r3,0(r17)
   41f34:	9009883a 	mov	r4,r18
   41f38:	00443700 	call	44370 <__malloc_unlock>
   41f3c:	80800204 	addi	r2,r16,8
   41f40:	00001b06 	br	41fb0 <_malloc_r+0x2a4>
   41f44:	04400404 	movi	r17,16
   41f48:	89402536 	bltu	r17,r5,41fe0 <_malloc_r+0x2d4>
   41f4c:	004434c0 	call	4434c <__malloc_lock>
   41f50:	00800184 	movi	r2,6
   41f54:	01000084 	movi	r4,2
   41f58:	04c00134 	movhi	r19,4
   41f5c:	1085883a 	add	r2,r2,r2
   41f60:	9cda8f04 	addi	r19,r19,27196
   41f64:	1085883a 	add	r2,r2,r2
   41f68:	9885883a 	add	r2,r19,r2
   41f6c:	14000117 	ldw	r16,4(r2)
   41f70:	10fffe04 	addi	r3,r2,-8
   41f74:	80c0d926 	beq	r16,r3,422dc <_malloc_r+0x5d0>
   41f78:	80c00117 	ldw	r3,4(r16)
   41f7c:	81000317 	ldw	r4,12(r16)
   41f80:	00bfff04 	movi	r2,-4
   41f84:	1884703a 	and	r2,r3,r2
   41f88:	81400217 	ldw	r5,8(r16)
   41f8c:	8085883a 	add	r2,r16,r2
   41f90:	10c00117 	ldw	r3,4(r2)
   41f94:	29000315 	stw	r4,12(r5)
   41f98:	21400215 	stw	r5,8(r4)
   41f9c:	18c00054 	ori	r3,r3,1
   41fa0:	10c00115 	stw	r3,4(r2)
   41fa4:	9009883a 	mov	r4,r18
   41fa8:	00443700 	call	44370 <__malloc_unlock>
   41fac:	80800204 	addi	r2,r16,8
   41fb0:	dfc00a17 	ldw	ra,40(sp)
   41fb4:	df000917 	ldw	fp,36(sp)
   41fb8:	ddc00817 	ldw	r23,32(sp)
   41fbc:	dd800717 	ldw	r22,28(sp)
   41fc0:	dd400617 	ldw	r21,24(sp)
   41fc4:	dd000517 	ldw	r20,20(sp)
   41fc8:	dcc00417 	ldw	r19,16(sp)
   41fcc:	dc800317 	ldw	r18,12(sp)
   41fd0:	dc400217 	ldw	r17,8(sp)
   41fd4:	dc000117 	ldw	r16,4(sp)
   41fd8:	dec00b04 	addi	sp,sp,44
   41fdc:	f800283a 	ret
   41fe0:	00800304 	movi	r2,12
   41fe4:	90800015 	stw	r2,0(r18)
   41fe8:	0005883a 	mov	r2,zero
   41fec:	003ff006 	br	41fb0 <__alt_data_end+0xfffdaeb0>
   41ff0:	01002004 	movi	r4,128
   41ff4:	02001004 	movi	r8,64
   41ff8:	01c00fc4 	movi	r7,63
   41ffc:	003f6106 	br	41d84 <__alt_data_end+0xfffdac84>
   42000:	4009883a 	mov	r4,r8
   42004:	003f7506 	br	41ddc <__alt_data_end+0xfffdacdc>
   42008:	81000317 	ldw	r4,12(r16)
   4200c:	003fde06 	br	41f88 <__alt_data_end+0xfffdae88>
   42010:	81c5883a 	add	r2,r16,r7
   42014:	11400117 	ldw	r5,4(r2)
   42018:	9009883a 	mov	r4,r18
   4201c:	29400054 	ori	r5,r5,1
   42020:	11400115 	stw	r5,4(r2)
   42024:	00443700 	call	44370 <__malloc_unlock>
   42028:	80800204 	addi	r2,r16,8
   4202c:	003fe006 	br	41fb0 <__alt_data_end+0xfffdaeb0>
   42030:	9c000217 	ldw	r16,8(r19)
   42034:	00bfff04 	movi	r2,-4
   42038:	85800117 	ldw	r22,4(r16)
   4203c:	b0ac703a 	and	r22,r22,r2
   42040:	b4400336 	bltu	r22,r17,42050 <_malloc_r+0x344>
   42044:	b445c83a 	sub	r2,r22,r17
   42048:	00c003c4 	movi	r3,15
   4204c:	18805d16 	blt	r3,r2,421c4 <_malloc_r+0x4b8>
   42050:	05c00174 	movhi	r23,5
   42054:	00800174 	movhi	r2,5
   42058:	10a6ce04 	addi	r2,r2,-25800
   4205c:	bde01804 	addi	r23,r23,-32672
   42060:	15400017 	ldw	r21,0(r2)
   42064:	b8c00017 	ldw	r3,0(r23)
   42068:	00bfffc4 	movi	r2,-1
   4206c:	858d883a 	add	r6,r16,r22
   42070:	8d6b883a 	add	r21,r17,r21
   42074:	1880ea26 	beq	r3,r2,42420 <_malloc_r+0x714>
   42078:	ad4403c4 	addi	r21,r21,4111
   4207c:	00bc0004 	movi	r2,-4096
   42080:	a8aa703a 	and	r21,r21,r2
   42084:	a80b883a 	mov	r5,r21
   42088:	9009883a 	mov	r4,r18
   4208c:	d9800015 	stw	r6,0(sp)
   42090:	0042f2c0 	call	42f2c <_sbrk_r>
   42094:	1029883a 	mov	r20,r2
   42098:	00bfffc4 	movi	r2,-1
   4209c:	d9800017 	ldw	r6,0(sp)
   420a0:	a080e826 	beq	r20,r2,42444 <_malloc_r+0x738>
   420a4:	a180a636 	bltu	r20,r6,42340 <_malloc_r+0x634>
   420a8:	07000174 	movhi	fp,5
   420ac:	e726d704 	addi	fp,fp,-25764
   420b0:	e0800017 	ldw	r2,0(fp)
   420b4:	a887883a 	add	r3,r21,r2
   420b8:	e0c00015 	stw	r3,0(fp)
   420bc:	3500e626 	beq	r6,r20,42458 <_malloc_r+0x74c>
   420c0:	b9000017 	ldw	r4,0(r23)
   420c4:	00bfffc4 	movi	r2,-1
   420c8:	2080ee26 	beq	r4,r2,42484 <_malloc_r+0x778>
   420cc:	a185c83a 	sub	r2,r20,r6
   420d0:	10c5883a 	add	r2,r2,r3
   420d4:	e0800015 	stw	r2,0(fp)
   420d8:	a0c001cc 	andi	r3,r20,7
   420dc:	1800bc26 	beq	r3,zero,423d0 <_malloc_r+0x6c4>
   420e0:	a0e9c83a 	sub	r20,r20,r3
   420e4:	00840204 	movi	r2,4104
   420e8:	a5000204 	addi	r20,r20,8
   420ec:	10c7c83a 	sub	r3,r2,r3
   420f0:	a545883a 	add	r2,r20,r21
   420f4:	1083ffcc 	andi	r2,r2,4095
   420f8:	18abc83a 	sub	r21,r3,r2
   420fc:	a80b883a 	mov	r5,r21
   42100:	9009883a 	mov	r4,r18
   42104:	0042f2c0 	call	42f2c <_sbrk_r>
   42108:	00ffffc4 	movi	r3,-1
   4210c:	10c0e126 	beq	r2,r3,42494 <_malloc_r+0x788>
   42110:	1505c83a 	sub	r2,r2,r20
   42114:	1545883a 	add	r2,r2,r21
   42118:	10800054 	ori	r2,r2,1
   4211c:	e0c00017 	ldw	r3,0(fp)
   42120:	9d000215 	stw	r20,8(r19)
   42124:	a0800115 	stw	r2,4(r20)
   42128:	a8c7883a 	add	r3,r21,r3
   4212c:	e0c00015 	stw	r3,0(fp)
   42130:	84c00e26 	beq	r16,r19,4216c <_malloc_r+0x460>
   42134:	018003c4 	movi	r6,15
   42138:	3580a72e 	bgeu	r6,r22,423d8 <_malloc_r+0x6cc>
   4213c:	81400117 	ldw	r5,4(r16)
   42140:	013ffe04 	movi	r4,-8
   42144:	b0bffd04 	addi	r2,r22,-12
   42148:	1104703a 	and	r2,r2,r4
   4214c:	2900004c 	andi	r4,r5,1
   42150:	2088b03a 	or	r4,r4,r2
   42154:	81000115 	stw	r4,4(r16)
   42158:	01400144 	movi	r5,5
   4215c:	8089883a 	add	r4,r16,r2
   42160:	21400115 	stw	r5,4(r4)
   42164:	21400215 	stw	r5,8(r4)
   42168:	3080cd36 	bltu	r6,r2,424a0 <_malloc_r+0x794>
   4216c:	00800174 	movhi	r2,5
   42170:	10a6cd04 	addi	r2,r2,-25804
   42174:	11000017 	ldw	r4,0(r2)
   42178:	20c0012e 	bgeu	r4,r3,42180 <_malloc_r+0x474>
   4217c:	10c00015 	stw	r3,0(r2)
   42180:	00800174 	movhi	r2,5
   42184:	10a6cc04 	addi	r2,r2,-25808
   42188:	11000017 	ldw	r4,0(r2)
   4218c:	9c000217 	ldw	r16,8(r19)
   42190:	20c0012e 	bgeu	r4,r3,42198 <_malloc_r+0x48c>
   42194:	10c00015 	stw	r3,0(r2)
   42198:	80c00117 	ldw	r3,4(r16)
   4219c:	00bfff04 	movi	r2,-4
   421a0:	1886703a 	and	r3,r3,r2
   421a4:	1c45c83a 	sub	r2,r3,r17
   421a8:	1c400236 	bltu	r3,r17,421b4 <_malloc_r+0x4a8>
   421ac:	00c003c4 	movi	r3,15
   421b0:	18800416 	blt	r3,r2,421c4 <_malloc_r+0x4b8>
   421b4:	9009883a 	mov	r4,r18
   421b8:	00443700 	call	44370 <__malloc_unlock>
   421bc:	0005883a 	mov	r2,zero
   421c0:	003f7b06 	br	41fb0 <__alt_data_end+0xfffdaeb0>
   421c4:	88c00054 	ori	r3,r17,1
   421c8:	80c00115 	stw	r3,4(r16)
   421cc:	8463883a 	add	r17,r16,r17
   421d0:	10800054 	ori	r2,r2,1
   421d4:	9c400215 	stw	r17,8(r19)
   421d8:	88800115 	stw	r2,4(r17)
   421dc:	9009883a 	mov	r4,r18
   421e0:	00443700 	call	44370 <__malloc_unlock>
   421e4:	80800204 	addi	r2,r16,8
   421e8:	003f7106 	br	41fb0 <__alt_data_end+0xfffdaeb0>
   421ec:	00c00504 	movi	r3,20
   421f0:	18804a2e 	bgeu	r3,r2,4231c <_malloc_r+0x610>
   421f4:	00c01504 	movi	r3,84
   421f8:	18806e36 	bltu	r3,r2,423b4 <_malloc_r+0x6a8>
   421fc:	8804d33a 	srli	r2,r17,12
   42200:	12001bc4 	addi	r8,r2,111
   42204:	11c01b84 	addi	r7,r2,110
   42208:	4209883a 	add	r4,r8,r8
   4220c:	003edd06 	br	41d84 <__alt_data_end+0xfffdac84>
   42210:	3804d27a 	srli	r2,r7,9
   42214:	00c00104 	movi	r3,4
   42218:	1880442e 	bgeu	r3,r2,4232c <_malloc_r+0x620>
   4221c:	00c00504 	movi	r3,20
   42220:	18808136 	bltu	r3,r2,42428 <_malloc_r+0x71c>
   42224:	11401704 	addi	r5,r2,92
   42228:	10c016c4 	addi	r3,r2,91
   4222c:	294b883a 	add	r5,r5,r5
   42230:	294b883a 	add	r5,r5,r5
   42234:	294b883a 	add	r5,r5,r5
   42238:	994b883a 	add	r5,r19,r5
   4223c:	28800017 	ldw	r2,0(r5)
   42240:	01800134 	movhi	r6,4
   42244:	297ffe04 	addi	r5,r5,-8
   42248:	319a8f04 	addi	r6,r6,27196
   4224c:	28806526 	beq	r5,r2,423e4 <_malloc_r+0x6d8>
   42250:	01bfff04 	movi	r6,-4
   42254:	10c00117 	ldw	r3,4(r2)
   42258:	1986703a 	and	r3,r3,r6
   4225c:	38c0022e 	bgeu	r7,r3,42268 <_malloc_r+0x55c>
   42260:	10800217 	ldw	r2,8(r2)
   42264:	28bffb1e 	bne	r5,r2,42254 <__alt_data_end+0xfffdb154>
   42268:	11400317 	ldw	r5,12(r2)
   4226c:	98c00117 	ldw	r3,4(r19)
   42270:	81400315 	stw	r5,12(r16)
   42274:	80800215 	stw	r2,8(r16)
   42278:	2c000215 	stw	r16,8(r5)
   4227c:	14000315 	stw	r16,12(r2)
   42280:	003ef806 	br	41e64 <__alt_data_end+0xfffdad64>
   42284:	88c00054 	ori	r3,r17,1
   42288:	80c00115 	stw	r3,4(r16)
   4228c:	8463883a 	add	r17,r16,r17
   42290:	34400515 	stw	r17,20(r6)
   42294:	34400415 	stw	r17,16(r6)
   42298:	10c00054 	ori	r3,r2,1
   4229c:	8a000315 	stw	r8,12(r17)
   422a0:	8a000215 	stw	r8,8(r17)
   422a4:	88c00115 	stw	r3,4(r17)
   422a8:	88a3883a 	add	r17,r17,r2
   422ac:	88800015 	stw	r2,0(r17)
   422b0:	9009883a 	mov	r4,r18
   422b4:	00443700 	call	44370 <__malloc_unlock>
   422b8:	80800204 	addi	r2,r16,8
   422bc:	003f3c06 	br	41fb0 <__alt_data_end+0xfffdaeb0>
   422c0:	30c00117 	ldw	r3,4(r6)
   422c4:	003ee706 	br	41e64 <__alt_data_end+0xfffdad64>
   422c8:	5ac00044 	addi	r11,r11,1
   422cc:	588000cc 	andi	r2,r11,3
   422d0:	31800204 	addi	r6,r6,8
   422d4:	103efd1e 	bne	r2,zero,41ecc <__alt_data_end+0xfffdadcc>
   422d8:	00002406 	br	4236c <_malloc_r+0x660>
   422dc:	14000317 	ldw	r16,12(r2)
   422e0:	143f251e 	bne	r2,r16,41f78 <__alt_data_end+0xfffdae78>
   422e4:	21000084 	addi	r4,r4,2
   422e8:	003ebc06 	br	41ddc <__alt_data_end+0xfffdacdc>
   422ec:	8085883a 	add	r2,r16,r2
   422f0:	10c00117 	ldw	r3,4(r2)
   422f4:	81000317 	ldw	r4,12(r16)
   422f8:	81400217 	ldw	r5,8(r16)
   422fc:	18c00054 	ori	r3,r3,1
   42300:	10c00115 	stw	r3,4(r2)
   42304:	29000315 	stw	r4,12(r5)
   42308:	21400215 	stw	r5,8(r4)
   4230c:	9009883a 	mov	r4,r18
   42310:	00443700 	call	44370 <__malloc_unlock>
   42314:	80800204 	addi	r2,r16,8
   42318:	003f2506 	br	41fb0 <__alt_data_end+0xfffdaeb0>
   4231c:	12001704 	addi	r8,r2,92
   42320:	11c016c4 	addi	r7,r2,91
   42324:	4209883a 	add	r4,r8,r8
   42328:	003e9606 	br	41d84 <__alt_data_end+0xfffdac84>
   4232c:	3804d1ba 	srli	r2,r7,6
   42330:	11400e44 	addi	r5,r2,57
   42334:	10c00e04 	addi	r3,r2,56
   42338:	294b883a 	add	r5,r5,r5
   4233c:	003fbc06 	br	42230 <__alt_data_end+0xfffdb130>
   42340:	84ff5926 	beq	r16,r19,420a8 <__alt_data_end+0xfffdafa8>
   42344:	00800134 	movhi	r2,4
   42348:	109a8f04 	addi	r2,r2,27196
   4234c:	14000217 	ldw	r16,8(r2)
   42350:	00bfff04 	movi	r2,-4
   42354:	80c00117 	ldw	r3,4(r16)
   42358:	1886703a 	and	r3,r3,r2
   4235c:	003f9106 	br	421a4 <__alt_data_end+0xfffdb0a4>
   42360:	60800217 	ldw	r2,8(r12)
   42364:	213fffc4 	addi	r4,r4,-1
   42368:	1300651e 	bne	r2,r12,42500 <_malloc_r+0x7f4>
   4236c:	208000cc 	andi	r2,r4,3
   42370:	633ffe04 	addi	r12,r12,-8
   42374:	103ffa1e 	bne	r2,zero,42360 <__alt_data_end+0xfffdb260>
   42378:	98800117 	ldw	r2,4(r19)
   4237c:	0146303a 	nor	r3,zero,r5
   42380:	1884703a 	and	r2,r3,r2
   42384:	98800115 	stw	r2,4(r19)
   42388:	294b883a 	add	r5,r5,r5
   4238c:	117f2836 	bltu	r2,r5,42030 <__alt_data_end+0xfffdaf30>
   42390:	283f2726 	beq	r5,zero,42030 <__alt_data_end+0xfffdaf30>
   42394:	2886703a 	and	r3,r5,r2
   42398:	5809883a 	mov	r4,r11
   4239c:	183ec31e 	bne	r3,zero,41eac <__alt_data_end+0xfffdadac>
   423a0:	294b883a 	add	r5,r5,r5
   423a4:	2886703a 	and	r3,r5,r2
   423a8:	21000104 	addi	r4,r4,4
   423ac:	183ffc26 	beq	r3,zero,423a0 <__alt_data_end+0xfffdb2a0>
   423b0:	003ebe06 	br	41eac <__alt_data_end+0xfffdadac>
   423b4:	00c05504 	movi	r3,340
   423b8:	18801236 	bltu	r3,r2,42404 <_malloc_r+0x6f8>
   423bc:	8804d3fa 	srli	r2,r17,15
   423c0:	12001e04 	addi	r8,r2,120
   423c4:	11c01dc4 	addi	r7,r2,119
   423c8:	4209883a 	add	r4,r8,r8
   423cc:	003e6d06 	br	41d84 <__alt_data_end+0xfffdac84>
   423d0:	00c40004 	movi	r3,4096
   423d4:	003f4606 	br	420f0 <__alt_data_end+0xfffdaff0>
   423d8:	00800044 	movi	r2,1
   423dc:	a0800115 	stw	r2,4(r20)
   423e0:	003f7406 	br	421b4 <__alt_data_end+0xfffdb0b4>
   423e4:	1805d0ba 	srai	r2,r3,2
   423e8:	01c00044 	movi	r7,1
   423ec:	30c00117 	ldw	r3,4(r6)
   423f0:	388e983a 	sll	r7,r7,r2
   423f4:	2805883a 	mov	r2,r5
   423f8:	38c6b03a 	or	r3,r7,r3
   423fc:	30c00115 	stw	r3,4(r6)
   42400:	003f9b06 	br	42270 <__alt_data_end+0xfffdb170>
   42404:	00c15504 	movi	r3,1364
   42408:	18801a36 	bltu	r3,r2,42474 <_malloc_r+0x768>
   4240c:	8804d4ba 	srli	r2,r17,18
   42410:	12001f44 	addi	r8,r2,125
   42414:	11c01f04 	addi	r7,r2,124
   42418:	4209883a 	add	r4,r8,r8
   4241c:	003e5906 	br	41d84 <__alt_data_end+0xfffdac84>
   42420:	ad400404 	addi	r21,r21,16
   42424:	003f1706 	br	42084 <__alt_data_end+0xfffdaf84>
   42428:	00c01504 	movi	r3,84
   4242c:	18802336 	bltu	r3,r2,424bc <_malloc_r+0x7b0>
   42430:	3804d33a 	srli	r2,r7,12
   42434:	11401bc4 	addi	r5,r2,111
   42438:	10c01b84 	addi	r3,r2,110
   4243c:	294b883a 	add	r5,r5,r5
   42440:	003f7b06 	br	42230 <__alt_data_end+0xfffdb130>
   42444:	9c000217 	ldw	r16,8(r19)
   42448:	00bfff04 	movi	r2,-4
   4244c:	80c00117 	ldw	r3,4(r16)
   42450:	1886703a 	and	r3,r3,r2
   42454:	003f5306 	br	421a4 <__alt_data_end+0xfffdb0a4>
   42458:	3083ffcc 	andi	r2,r6,4095
   4245c:	103f181e 	bne	r2,zero,420c0 <__alt_data_end+0xfffdafc0>
   42460:	99000217 	ldw	r4,8(r19)
   42464:	b545883a 	add	r2,r22,r21
   42468:	10800054 	ori	r2,r2,1
   4246c:	20800115 	stw	r2,4(r4)
   42470:	003f3e06 	br	4216c <__alt_data_end+0xfffdb06c>
   42474:	01003f84 	movi	r4,254
   42478:	02001fc4 	movi	r8,127
   4247c:	01c01f84 	movi	r7,126
   42480:	003e4006 	br	41d84 <__alt_data_end+0xfffdac84>
   42484:	00800174 	movhi	r2,5
   42488:	10a01804 	addi	r2,r2,-32672
   4248c:	15000015 	stw	r20,0(r2)
   42490:	003f1106 	br	420d8 <__alt_data_end+0xfffdafd8>
   42494:	00800044 	movi	r2,1
   42498:	002b883a 	mov	r21,zero
   4249c:	003f1f06 	br	4211c <__alt_data_end+0xfffdb01c>
   424a0:	81400204 	addi	r5,r16,8
   424a4:	9009883a 	mov	r4,r18
   424a8:	00437940 	call	43794 <_free_r>
   424ac:	00800174 	movhi	r2,5
   424b0:	10a6d704 	addi	r2,r2,-25764
   424b4:	10c00017 	ldw	r3,0(r2)
   424b8:	003f2c06 	br	4216c <__alt_data_end+0xfffdb06c>
   424bc:	00c05504 	movi	r3,340
   424c0:	18800536 	bltu	r3,r2,424d8 <_malloc_r+0x7cc>
   424c4:	3804d3fa 	srli	r2,r7,15
   424c8:	11401e04 	addi	r5,r2,120
   424cc:	10c01dc4 	addi	r3,r2,119
   424d0:	294b883a 	add	r5,r5,r5
   424d4:	003f5606 	br	42230 <__alt_data_end+0xfffdb130>
   424d8:	00c15504 	movi	r3,1364
   424dc:	18800536 	bltu	r3,r2,424f4 <_malloc_r+0x7e8>
   424e0:	3804d4ba 	srli	r2,r7,18
   424e4:	11401f44 	addi	r5,r2,125
   424e8:	10c01f04 	addi	r3,r2,124
   424ec:	294b883a 	add	r5,r5,r5
   424f0:	003f4f06 	br	42230 <__alt_data_end+0xfffdb130>
   424f4:	01403f84 	movi	r5,254
   424f8:	00c01f84 	movi	r3,126
   424fc:	003f4c06 	br	42230 <__alt_data_end+0xfffdb130>
   42500:	98800117 	ldw	r2,4(r19)
   42504:	003fa006 	br	42388 <__alt_data_end+0xfffdb288>
   42508:	8808d0fa 	srli	r4,r17,3
   4250c:	20800044 	addi	r2,r4,1
   42510:	1085883a 	add	r2,r2,r2
   42514:	003e9006 	br	41f58 <__alt_data_end+0xfffdae58>

00042518 <memchr>:
   42518:	208000cc 	andi	r2,r4,3
   4251c:	280f883a 	mov	r7,r5
   42520:	10003426 	beq	r2,zero,425f4 <memchr+0xdc>
   42524:	30bfffc4 	addi	r2,r6,-1
   42528:	30001a26 	beq	r6,zero,42594 <memchr+0x7c>
   4252c:	20c00003 	ldbu	r3,0(r4)
   42530:	29803fcc 	andi	r6,r5,255
   42534:	30c0051e 	bne	r6,r3,4254c <memchr+0x34>
   42538:	00001806 	br	4259c <memchr+0x84>
   4253c:	10001526 	beq	r2,zero,42594 <memchr+0x7c>
   42540:	20c00003 	ldbu	r3,0(r4)
   42544:	10bfffc4 	addi	r2,r2,-1
   42548:	30c01426 	beq	r6,r3,4259c <memchr+0x84>
   4254c:	21000044 	addi	r4,r4,1
   42550:	20c000cc 	andi	r3,r4,3
   42554:	183ff91e 	bne	r3,zero,4253c <__alt_data_end+0xfffdb43c>
   42558:	020000c4 	movi	r8,3
   4255c:	40801136 	bltu	r8,r2,425a4 <memchr+0x8c>
   42560:	10000c26 	beq	r2,zero,42594 <memchr+0x7c>
   42564:	20c00003 	ldbu	r3,0(r4)
   42568:	29403fcc 	andi	r5,r5,255
   4256c:	28c00b26 	beq	r5,r3,4259c <memchr+0x84>
   42570:	20c00044 	addi	r3,r4,1
   42574:	39803fcc 	andi	r6,r7,255
   42578:	2089883a 	add	r4,r4,r2
   4257c:	00000306 	br	4258c <memchr+0x74>
   42580:	18c00044 	addi	r3,r3,1
   42584:	197fffc3 	ldbu	r5,-1(r3)
   42588:	31400526 	beq	r6,r5,425a0 <memchr+0x88>
   4258c:	1805883a 	mov	r2,r3
   42590:	20fffb1e 	bne	r4,r3,42580 <__alt_data_end+0xfffdb480>
   42594:	0005883a 	mov	r2,zero
   42598:	f800283a 	ret
   4259c:	2005883a 	mov	r2,r4
   425a0:	f800283a 	ret
   425a4:	28c03fcc 	andi	r3,r5,255
   425a8:	1812923a 	slli	r9,r3,8
   425ac:	02ffbff4 	movhi	r11,65279
   425b0:	02a02074 	movhi	r10,32897
   425b4:	48d2b03a 	or	r9,r9,r3
   425b8:	4806943a 	slli	r3,r9,16
   425bc:	5affbfc4 	addi	r11,r11,-257
   425c0:	52a02004 	addi	r10,r10,-32640
   425c4:	48d2b03a 	or	r9,r9,r3
   425c8:	20c00017 	ldw	r3,0(r4)
   425cc:	48c6f03a 	xor	r3,r9,r3
   425d0:	1acd883a 	add	r6,r3,r11
   425d4:	00c6303a 	nor	r3,zero,r3
   425d8:	30c6703a 	and	r3,r6,r3
   425dc:	1a86703a 	and	r3,r3,r10
   425e0:	183fe01e 	bne	r3,zero,42564 <__alt_data_end+0xfffdb464>
   425e4:	10bfff04 	addi	r2,r2,-4
   425e8:	21000104 	addi	r4,r4,4
   425ec:	40bff636 	bltu	r8,r2,425c8 <__alt_data_end+0xfffdb4c8>
   425f0:	003fdb06 	br	42560 <__alt_data_end+0xfffdb460>
   425f4:	3005883a 	mov	r2,r6
   425f8:	003fd706 	br	42558 <__alt_data_end+0xfffdb458>

000425fc <memcpy>:
   425fc:	defffd04 	addi	sp,sp,-12
   42600:	dfc00215 	stw	ra,8(sp)
   42604:	dc400115 	stw	r17,4(sp)
   42608:	dc000015 	stw	r16,0(sp)
   4260c:	00c003c4 	movi	r3,15
   42610:	2005883a 	mov	r2,r4
   42614:	1980452e 	bgeu	r3,r6,4272c <memcpy+0x130>
   42618:	2906b03a 	or	r3,r5,r4
   4261c:	18c000cc 	andi	r3,r3,3
   42620:	1800441e 	bne	r3,zero,42734 <memcpy+0x138>
   42624:	347ffc04 	addi	r17,r6,-16
   42628:	8822d13a 	srli	r17,r17,4
   4262c:	28c00104 	addi	r3,r5,4
   42630:	23400104 	addi	r13,r4,4
   42634:	8820913a 	slli	r16,r17,4
   42638:	2b000204 	addi	r12,r5,8
   4263c:	22c00204 	addi	r11,r4,8
   42640:	84000504 	addi	r16,r16,20
   42644:	2a800304 	addi	r10,r5,12
   42648:	22400304 	addi	r9,r4,12
   4264c:	2c21883a 	add	r16,r5,r16
   42650:	2811883a 	mov	r8,r5
   42654:	200f883a 	mov	r7,r4
   42658:	41000017 	ldw	r4,0(r8)
   4265c:	1fc00017 	ldw	ra,0(r3)
   42660:	63c00017 	ldw	r15,0(r12)
   42664:	39000015 	stw	r4,0(r7)
   42668:	53800017 	ldw	r14,0(r10)
   4266c:	6fc00015 	stw	ra,0(r13)
   42670:	5bc00015 	stw	r15,0(r11)
   42674:	4b800015 	stw	r14,0(r9)
   42678:	18c00404 	addi	r3,r3,16
   4267c:	39c00404 	addi	r7,r7,16
   42680:	42000404 	addi	r8,r8,16
   42684:	6b400404 	addi	r13,r13,16
   42688:	63000404 	addi	r12,r12,16
   4268c:	5ac00404 	addi	r11,r11,16
   42690:	52800404 	addi	r10,r10,16
   42694:	4a400404 	addi	r9,r9,16
   42698:	1c3fef1e 	bne	r3,r16,42658 <__alt_data_end+0xfffdb558>
   4269c:	89c00044 	addi	r7,r17,1
   426a0:	380e913a 	slli	r7,r7,4
   426a4:	310003cc 	andi	r4,r6,15
   426a8:	02c000c4 	movi	r11,3
   426ac:	11c7883a 	add	r3,r2,r7
   426b0:	29cb883a 	add	r5,r5,r7
   426b4:	5900212e 	bgeu	r11,r4,4273c <memcpy+0x140>
   426b8:	1813883a 	mov	r9,r3
   426bc:	2811883a 	mov	r8,r5
   426c0:	200f883a 	mov	r7,r4
   426c4:	42800017 	ldw	r10,0(r8)
   426c8:	4a400104 	addi	r9,r9,4
   426cc:	39ffff04 	addi	r7,r7,-4
   426d0:	4abfff15 	stw	r10,-4(r9)
   426d4:	42000104 	addi	r8,r8,4
   426d8:	59fffa36 	bltu	r11,r7,426c4 <__alt_data_end+0xfffdb5c4>
   426dc:	213fff04 	addi	r4,r4,-4
   426e0:	2008d0ba 	srli	r4,r4,2
   426e4:	318000cc 	andi	r6,r6,3
   426e8:	21000044 	addi	r4,r4,1
   426ec:	2109883a 	add	r4,r4,r4
   426f0:	2109883a 	add	r4,r4,r4
   426f4:	1907883a 	add	r3,r3,r4
   426f8:	290b883a 	add	r5,r5,r4
   426fc:	30000626 	beq	r6,zero,42718 <memcpy+0x11c>
   42700:	198d883a 	add	r6,r3,r6
   42704:	29c00003 	ldbu	r7,0(r5)
   42708:	18c00044 	addi	r3,r3,1
   4270c:	29400044 	addi	r5,r5,1
   42710:	19ffffc5 	stb	r7,-1(r3)
   42714:	19bffb1e 	bne	r3,r6,42704 <__alt_data_end+0xfffdb604>
   42718:	dfc00217 	ldw	ra,8(sp)
   4271c:	dc400117 	ldw	r17,4(sp)
   42720:	dc000017 	ldw	r16,0(sp)
   42724:	dec00304 	addi	sp,sp,12
   42728:	f800283a 	ret
   4272c:	2007883a 	mov	r3,r4
   42730:	003ff206 	br	426fc <__alt_data_end+0xfffdb5fc>
   42734:	2007883a 	mov	r3,r4
   42738:	003ff106 	br	42700 <__alt_data_end+0xfffdb600>
   4273c:	200d883a 	mov	r6,r4
   42740:	003fee06 	br	426fc <__alt_data_end+0xfffdb5fc>

00042744 <memmove>:
   42744:	2005883a 	mov	r2,r4
   42748:	29000b2e 	bgeu	r5,r4,42778 <memmove+0x34>
   4274c:	298f883a 	add	r7,r5,r6
   42750:	21c0092e 	bgeu	r4,r7,42778 <memmove+0x34>
   42754:	2187883a 	add	r3,r4,r6
   42758:	198bc83a 	sub	r5,r3,r6
   4275c:	30004826 	beq	r6,zero,42880 <memmove+0x13c>
   42760:	39ffffc4 	addi	r7,r7,-1
   42764:	39000003 	ldbu	r4,0(r7)
   42768:	18ffffc4 	addi	r3,r3,-1
   4276c:	19000005 	stb	r4,0(r3)
   42770:	28fffb1e 	bne	r5,r3,42760 <__alt_data_end+0xfffdb660>
   42774:	f800283a 	ret
   42778:	00c003c4 	movi	r3,15
   4277c:	1980412e 	bgeu	r3,r6,42884 <memmove+0x140>
   42780:	2886b03a 	or	r3,r5,r2
   42784:	18c000cc 	andi	r3,r3,3
   42788:	1800401e 	bne	r3,zero,4288c <memmove+0x148>
   4278c:	33fffc04 	addi	r15,r6,-16
   42790:	781ed13a 	srli	r15,r15,4
   42794:	28c00104 	addi	r3,r5,4
   42798:	13400104 	addi	r13,r2,4
   4279c:	781c913a 	slli	r14,r15,4
   427a0:	2b000204 	addi	r12,r5,8
   427a4:	12c00204 	addi	r11,r2,8
   427a8:	73800504 	addi	r14,r14,20
   427ac:	2a800304 	addi	r10,r5,12
   427b0:	12400304 	addi	r9,r2,12
   427b4:	2b9d883a 	add	r14,r5,r14
   427b8:	2811883a 	mov	r8,r5
   427bc:	100f883a 	mov	r7,r2
   427c0:	41000017 	ldw	r4,0(r8)
   427c4:	39c00404 	addi	r7,r7,16
   427c8:	18c00404 	addi	r3,r3,16
   427cc:	393ffc15 	stw	r4,-16(r7)
   427d0:	193ffc17 	ldw	r4,-16(r3)
   427d4:	6b400404 	addi	r13,r13,16
   427d8:	5ac00404 	addi	r11,r11,16
   427dc:	693ffc15 	stw	r4,-16(r13)
   427e0:	61000017 	ldw	r4,0(r12)
   427e4:	4a400404 	addi	r9,r9,16
   427e8:	42000404 	addi	r8,r8,16
   427ec:	593ffc15 	stw	r4,-16(r11)
   427f0:	51000017 	ldw	r4,0(r10)
   427f4:	63000404 	addi	r12,r12,16
   427f8:	52800404 	addi	r10,r10,16
   427fc:	493ffc15 	stw	r4,-16(r9)
   42800:	1bbfef1e 	bne	r3,r14,427c0 <__alt_data_end+0xfffdb6c0>
   42804:	79000044 	addi	r4,r15,1
   42808:	2008913a 	slli	r4,r4,4
   4280c:	328003cc 	andi	r10,r6,15
   42810:	02c000c4 	movi	r11,3
   42814:	1107883a 	add	r3,r2,r4
   42818:	290b883a 	add	r5,r5,r4
   4281c:	5a801e2e 	bgeu	r11,r10,42898 <memmove+0x154>
   42820:	1813883a 	mov	r9,r3
   42824:	2811883a 	mov	r8,r5
   42828:	500f883a 	mov	r7,r10
   4282c:	41000017 	ldw	r4,0(r8)
   42830:	4a400104 	addi	r9,r9,4
   42834:	39ffff04 	addi	r7,r7,-4
   42838:	493fff15 	stw	r4,-4(r9)
   4283c:	42000104 	addi	r8,r8,4
   42840:	59fffa36 	bltu	r11,r7,4282c <__alt_data_end+0xfffdb72c>
   42844:	513fff04 	addi	r4,r10,-4
   42848:	2008d0ba 	srli	r4,r4,2
   4284c:	318000cc 	andi	r6,r6,3
   42850:	21000044 	addi	r4,r4,1
   42854:	2109883a 	add	r4,r4,r4
   42858:	2109883a 	add	r4,r4,r4
   4285c:	1907883a 	add	r3,r3,r4
   42860:	290b883a 	add	r5,r5,r4
   42864:	30000b26 	beq	r6,zero,42894 <memmove+0x150>
   42868:	198d883a 	add	r6,r3,r6
   4286c:	29c00003 	ldbu	r7,0(r5)
   42870:	18c00044 	addi	r3,r3,1
   42874:	29400044 	addi	r5,r5,1
   42878:	19ffffc5 	stb	r7,-1(r3)
   4287c:	19bffb1e 	bne	r3,r6,4286c <__alt_data_end+0xfffdb76c>
   42880:	f800283a 	ret
   42884:	1007883a 	mov	r3,r2
   42888:	003ff606 	br	42864 <__alt_data_end+0xfffdb764>
   4288c:	1007883a 	mov	r3,r2
   42890:	003ff506 	br	42868 <__alt_data_end+0xfffdb768>
   42894:	f800283a 	ret
   42898:	500d883a 	mov	r6,r10
   4289c:	003ff106 	br	42864 <__alt_data_end+0xfffdb764>

000428a0 <memset>:
   428a0:	20c000cc 	andi	r3,r4,3
   428a4:	2005883a 	mov	r2,r4
   428a8:	18004426 	beq	r3,zero,429bc <memset+0x11c>
   428ac:	31ffffc4 	addi	r7,r6,-1
   428b0:	30004026 	beq	r6,zero,429b4 <memset+0x114>
   428b4:	2813883a 	mov	r9,r5
   428b8:	200d883a 	mov	r6,r4
   428bc:	2007883a 	mov	r3,r4
   428c0:	00000406 	br	428d4 <memset+0x34>
   428c4:	3a3fffc4 	addi	r8,r7,-1
   428c8:	31800044 	addi	r6,r6,1
   428cc:	38003926 	beq	r7,zero,429b4 <memset+0x114>
   428d0:	400f883a 	mov	r7,r8
   428d4:	18c00044 	addi	r3,r3,1
   428d8:	32400005 	stb	r9,0(r6)
   428dc:	1a0000cc 	andi	r8,r3,3
   428e0:	403ff81e 	bne	r8,zero,428c4 <__alt_data_end+0xfffdb7c4>
   428e4:	010000c4 	movi	r4,3
   428e8:	21c02d2e 	bgeu	r4,r7,429a0 <memset+0x100>
   428ec:	29003fcc 	andi	r4,r5,255
   428f0:	200c923a 	slli	r6,r4,8
   428f4:	3108b03a 	or	r4,r6,r4
   428f8:	200c943a 	slli	r6,r4,16
   428fc:	218cb03a 	or	r6,r4,r6
   42900:	010003c4 	movi	r4,15
   42904:	21c0182e 	bgeu	r4,r7,42968 <memset+0xc8>
   42908:	3b3ffc04 	addi	r12,r7,-16
   4290c:	6018d13a 	srli	r12,r12,4
   42910:	1a000104 	addi	r8,r3,4
   42914:	1ac00204 	addi	r11,r3,8
   42918:	6008913a 	slli	r4,r12,4
   4291c:	1a800304 	addi	r10,r3,12
   42920:	1813883a 	mov	r9,r3
   42924:	21000504 	addi	r4,r4,20
   42928:	1909883a 	add	r4,r3,r4
   4292c:	49800015 	stw	r6,0(r9)
   42930:	41800015 	stw	r6,0(r8)
   42934:	59800015 	stw	r6,0(r11)
   42938:	51800015 	stw	r6,0(r10)
   4293c:	42000404 	addi	r8,r8,16
   42940:	4a400404 	addi	r9,r9,16
   42944:	5ac00404 	addi	r11,r11,16
   42948:	52800404 	addi	r10,r10,16
   4294c:	413ff71e 	bne	r8,r4,4292c <__alt_data_end+0xfffdb82c>
   42950:	63000044 	addi	r12,r12,1
   42954:	6018913a 	slli	r12,r12,4
   42958:	39c003cc 	andi	r7,r7,15
   4295c:	010000c4 	movi	r4,3
   42960:	1b07883a 	add	r3,r3,r12
   42964:	21c00e2e 	bgeu	r4,r7,429a0 <memset+0x100>
   42968:	1813883a 	mov	r9,r3
   4296c:	3811883a 	mov	r8,r7
   42970:	010000c4 	movi	r4,3
   42974:	49800015 	stw	r6,0(r9)
   42978:	423fff04 	addi	r8,r8,-4
   4297c:	4a400104 	addi	r9,r9,4
   42980:	223ffc36 	bltu	r4,r8,42974 <__alt_data_end+0xfffdb874>
   42984:	393fff04 	addi	r4,r7,-4
   42988:	2008d0ba 	srli	r4,r4,2
   4298c:	39c000cc 	andi	r7,r7,3
   42990:	21000044 	addi	r4,r4,1
   42994:	2109883a 	add	r4,r4,r4
   42998:	2109883a 	add	r4,r4,r4
   4299c:	1907883a 	add	r3,r3,r4
   429a0:	38000526 	beq	r7,zero,429b8 <memset+0x118>
   429a4:	19cf883a 	add	r7,r3,r7
   429a8:	19400005 	stb	r5,0(r3)
   429ac:	18c00044 	addi	r3,r3,1
   429b0:	38fffd1e 	bne	r7,r3,429a8 <__alt_data_end+0xfffdb8a8>
   429b4:	f800283a 	ret
   429b8:	f800283a 	ret
   429bc:	2007883a 	mov	r3,r4
   429c0:	300f883a 	mov	r7,r6
   429c4:	003fc706 	br	428e4 <__alt_data_end+0xfffdb7e4>

000429c8 <_realloc_r>:
   429c8:	defff604 	addi	sp,sp,-40
   429cc:	dc800215 	stw	r18,8(sp)
   429d0:	dfc00915 	stw	ra,36(sp)
   429d4:	df000815 	stw	fp,32(sp)
   429d8:	ddc00715 	stw	r23,28(sp)
   429dc:	dd800615 	stw	r22,24(sp)
   429e0:	dd400515 	stw	r21,20(sp)
   429e4:	dd000415 	stw	r20,16(sp)
   429e8:	dcc00315 	stw	r19,12(sp)
   429ec:	dc400115 	stw	r17,4(sp)
   429f0:	dc000015 	stw	r16,0(sp)
   429f4:	3025883a 	mov	r18,r6
   429f8:	2800b726 	beq	r5,zero,42cd8 <_realloc_r+0x310>
   429fc:	282b883a 	mov	r21,r5
   42a00:	2029883a 	mov	r20,r4
   42a04:	004434c0 	call	4434c <__malloc_lock>
   42a08:	a8bfff17 	ldw	r2,-4(r21)
   42a0c:	043fff04 	movi	r16,-4
   42a10:	90c002c4 	addi	r3,r18,11
   42a14:	01000584 	movi	r4,22
   42a18:	acfffe04 	addi	r19,r21,-8
   42a1c:	1420703a 	and	r16,r2,r16
   42a20:	20c0332e 	bgeu	r4,r3,42af0 <_realloc_r+0x128>
   42a24:	047ffe04 	movi	r17,-8
   42a28:	1c62703a 	and	r17,r3,r17
   42a2c:	8807883a 	mov	r3,r17
   42a30:	88005816 	blt	r17,zero,42b94 <_realloc_r+0x1cc>
   42a34:	8c805736 	bltu	r17,r18,42b94 <_realloc_r+0x1cc>
   42a38:	80c0300e 	bge	r16,r3,42afc <_realloc_r+0x134>
   42a3c:	07000134 	movhi	fp,4
   42a40:	e71a8f04 	addi	fp,fp,27196
   42a44:	e1c00217 	ldw	r7,8(fp)
   42a48:	9c09883a 	add	r4,r19,r16
   42a4c:	22000117 	ldw	r8,4(r4)
   42a50:	21c06326 	beq	r4,r7,42be0 <_realloc_r+0x218>
   42a54:	017fff84 	movi	r5,-2
   42a58:	414a703a 	and	r5,r8,r5
   42a5c:	214b883a 	add	r5,r4,r5
   42a60:	29800117 	ldw	r6,4(r5)
   42a64:	3180004c 	andi	r6,r6,1
   42a68:	30003f26 	beq	r6,zero,42b68 <_realloc_r+0x1a0>
   42a6c:	1080004c 	andi	r2,r2,1
   42a70:	10008326 	beq	r2,zero,42c80 <_realloc_r+0x2b8>
   42a74:	900b883a 	mov	r5,r18
   42a78:	a009883a 	mov	r4,r20
   42a7c:	0041d0c0 	call	41d0c <_malloc_r>
   42a80:	1025883a 	mov	r18,r2
   42a84:	10011e26 	beq	r2,zero,42f00 <_realloc_r+0x538>
   42a88:	a93fff17 	ldw	r4,-4(r21)
   42a8c:	10fffe04 	addi	r3,r2,-8
   42a90:	00bfff84 	movi	r2,-2
   42a94:	2084703a 	and	r2,r4,r2
   42a98:	9885883a 	add	r2,r19,r2
   42a9c:	1880ee26 	beq	r3,r2,42e58 <_realloc_r+0x490>
   42aa0:	81bfff04 	addi	r6,r16,-4
   42aa4:	00800904 	movi	r2,36
   42aa8:	1180b836 	bltu	r2,r6,42d8c <_realloc_r+0x3c4>
   42aac:	00c004c4 	movi	r3,19
   42ab0:	19809636 	bltu	r3,r6,42d0c <_realloc_r+0x344>
   42ab4:	9005883a 	mov	r2,r18
   42ab8:	a807883a 	mov	r3,r21
   42abc:	19000017 	ldw	r4,0(r3)
   42ac0:	11000015 	stw	r4,0(r2)
   42ac4:	19000117 	ldw	r4,4(r3)
   42ac8:	11000115 	stw	r4,4(r2)
   42acc:	18c00217 	ldw	r3,8(r3)
   42ad0:	10c00215 	stw	r3,8(r2)
   42ad4:	a80b883a 	mov	r5,r21
   42ad8:	a009883a 	mov	r4,r20
   42adc:	00437940 	call	43794 <_free_r>
   42ae0:	a009883a 	mov	r4,r20
   42ae4:	00443700 	call	44370 <__malloc_unlock>
   42ae8:	9005883a 	mov	r2,r18
   42aec:	00001206 	br	42b38 <_realloc_r+0x170>
   42af0:	00c00404 	movi	r3,16
   42af4:	1823883a 	mov	r17,r3
   42af8:	003fce06 	br	42a34 <__alt_data_end+0xfffdb934>
   42afc:	a825883a 	mov	r18,r21
   42b00:	8445c83a 	sub	r2,r16,r17
   42b04:	00c003c4 	movi	r3,15
   42b08:	18802636 	bltu	r3,r2,42ba4 <_realloc_r+0x1dc>
   42b0c:	99800117 	ldw	r6,4(r19)
   42b10:	9c07883a 	add	r3,r19,r16
   42b14:	3180004c 	andi	r6,r6,1
   42b18:	3420b03a 	or	r16,r6,r16
   42b1c:	9c000115 	stw	r16,4(r19)
   42b20:	18800117 	ldw	r2,4(r3)
   42b24:	10800054 	ori	r2,r2,1
   42b28:	18800115 	stw	r2,4(r3)
   42b2c:	a009883a 	mov	r4,r20
   42b30:	00443700 	call	44370 <__malloc_unlock>
   42b34:	9005883a 	mov	r2,r18
   42b38:	dfc00917 	ldw	ra,36(sp)
   42b3c:	df000817 	ldw	fp,32(sp)
   42b40:	ddc00717 	ldw	r23,28(sp)
   42b44:	dd800617 	ldw	r22,24(sp)
   42b48:	dd400517 	ldw	r21,20(sp)
   42b4c:	dd000417 	ldw	r20,16(sp)
   42b50:	dcc00317 	ldw	r19,12(sp)
   42b54:	dc800217 	ldw	r18,8(sp)
   42b58:	dc400117 	ldw	r17,4(sp)
   42b5c:	dc000017 	ldw	r16,0(sp)
   42b60:	dec00a04 	addi	sp,sp,40
   42b64:	f800283a 	ret
   42b68:	017fff04 	movi	r5,-4
   42b6c:	414a703a 	and	r5,r8,r5
   42b70:	814d883a 	add	r6,r16,r5
   42b74:	30c01f16 	blt	r6,r3,42bf4 <_realloc_r+0x22c>
   42b78:	20800317 	ldw	r2,12(r4)
   42b7c:	20c00217 	ldw	r3,8(r4)
   42b80:	a825883a 	mov	r18,r21
   42b84:	3021883a 	mov	r16,r6
   42b88:	18800315 	stw	r2,12(r3)
   42b8c:	10c00215 	stw	r3,8(r2)
   42b90:	003fdb06 	br	42b00 <__alt_data_end+0xfffdba00>
   42b94:	00800304 	movi	r2,12
   42b98:	a0800015 	stw	r2,0(r20)
   42b9c:	0005883a 	mov	r2,zero
   42ba0:	003fe506 	br	42b38 <__alt_data_end+0xfffdba38>
   42ba4:	98c00117 	ldw	r3,4(r19)
   42ba8:	9c4b883a 	add	r5,r19,r17
   42bac:	11000054 	ori	r4,r2,1
   42bb0:	18c0004c 	andi	r3,r3,1
   42bb4:	1c62b03a 	or	r17,r3,r17
   42bb8:	9c400115 	stw	r17,4(r19)
   42bbc:	29000115 	stw	r4,4(r5)
   42bc0:	2885883a 	add	r2,r5,r2
   42bc4:	10c00117 	ldw	r3,4(r2)
   42bc8:	29400204 	addi	r5,r5,8
   42bcc:	a009883a 	mov	r4,r20
   42bd0:	18c00054 	ori	r3,r3,1
   42bd4:	10c00115 	stw	r3,4(r2)
   42bd8:	00437940 	call	43794 <_free_r>
   42bdc:	003fd306 	br	42b2c <__alt_data_end+0xfffdba2c>
   42be0:	017fff04 	movi	r5,-4
   42be4:	414a703a 	and	r5,r8,r5
   42be8:	89800404 	addi	r6,r17,16
   42bec:	8151883a 	add	r8,r16,r5
   42bf0:	4180590e 	bge	r8,r6,42d58 <_realloc_r+0x390>
   42bf4:	1080004c 	andi	r2,r2,1
   42bf8:	103f9e1e 	bne	r2,zero,42a74 <__alt_data_end+0xfffdb974>
   42bfc:	adbffe17 	ldw	r22,-8(r21)
   42c00:	00bfff04 	movi	r2,-4
   42c04:	9dadc83a 	sub	r22,r19,r22
   42c08:	b1800117 	ldw	r6,4(r22)
   42c0c:	3084703a 	and	r2,r6,r2
   42c10:	20002026 	beq	r4,zero,42c94 <_realloc_r+0x2cc>
   42c14:	80af883a 	add	r23,r16,r2
   42c18:	b96f883a 	add	r23,r23,r5
   42c1c:	21c05f26 	beq	r4,r7,42d9c <_realloc_r+0x3d4>
   42c20:	b8c01c16 	blt	r23,r3,42c94 <_realloc_r+0x2cc>
   42c24:	20800317 	ldw	r2,12(r4)
   42c28:	20c00217 	ldw	r3,8(r4)
   42c2c:	81bfff04 	addi	r6,r16,-4
   42c30:	01000904 	movi	r4,36
   42c34:	18800315 	stw	r2,12(r3)
   42c38:	10c00215 	stw	r3,8(r2)
   42c3c:	b0c00217 	ldw	r3,8(r22)
   42c40:	b0800317 	ldw	r2,12(r22)
   42c44:	b4800204 	addi	r18,r22,8
   42c48:	18800315 	stw	r2,12(r3)
   42c4c:	10c00215 	stw	r3,8(r2)
   42c50:	21801b36 	bltu	r4,r6,42cc0 <_realloc_r+0x2f8>
   42c54:	008004c4 	movi	r2,19
   42c58:	1180352e 	bgeu	r2,r6,42d30 <_realloc_r+0x368>
   42c5c:	a8800017 	ldw	r2,0(r21)
   42c60:	b0800215 	stw	r2,8(r22)
   42c64:	a8800117 	ldw	r2,4(r21)
   42c68:	b0800315 	stw	r2,12(r22)
   42c6c:	008006c4 	movi	r2,27
   42c70:	11807f36 	bltu	r2,r6,42e70 <_realloc_r+0x4a8>
   42c74:	b0800404 	addi	r2,r22,16
   42c78:	ad400204 	addi	r21,r21,8
   42c7c:	00002d06 	br	42d34 <_realloc_r+0x36c>
   42c80:	adbffe17 	ldw	r22,-8(r21)
   42c84:	00bfff04 	movi	r2,-4
   42c88:	9dadc83a 	sub	r22,r19,r22
   42c8c:	b1000117 	ldw	r4,4(r22)
   42c90:	2084703a 	and	r2,r4,r2
   42c94:	b03f7726 	beq	r22,zero,42a74 <__alt_data_end+0xfffdb974>
   42c98:	80af883a 	add	r23,r16,r2
   42c9c:	b8ff7516 	blt	r23,r3,42a74 <__alt_data_end+0xfffdb974>
   42ca0:	b0800317 	ldw	r2,12(r22)
   42ca4:	b0c00217 	ldw	r3,8(r22)
   42ca8:	81bfff04 	addi	r6,r16,-4
   42cac:	01000904 	movi	r4,36
   42cb0:	18800315 	stw	r2,12(r3)
   42cb4:	10c00215 	stw	r3,8(r2)
   42cb8:	b4800204 	addi	r18,r22,8
   42cbc:	21bfe52e 	bgeu	r4,r6,42c54 <__alt_data_end+0xfffdbb54>
   42cc0:	a80b883a 	mov	r5,r21
   42cc4:	9009883a 	mov	r4,r18
   42cc8:	00427440 	call	42744 <memmove>
   42ccc:	b821883a 	mov	r16,r23
   42cd0:	b027883a 	mov	r19,r22
   42cd4:	003f8a06 	br	42b00 <__alt_data_end+0xfffdba00>
   42cd8:	300b883a 	mov	r5,r6
   42cdc:	dfc00917 	ldw	ra,36(sp)
   42ce0:	df000817 	ldw	fp,32(sp)
   42ce4:	ddc00717 	ldw	r23,28(sp)
   42ce8:	dd800617 	ldw	r22,24(sp)
   42cec:	dd400517 	ldw	r21,20(sp)
   42cf0:	dd000417 	ldw	r20,16(sp)
   42cf4:	dcc00317 	ldw	r19,12(sp)
   42cf8:	dc800217 	ldw	r18,8(sp)
   42cfc:	dc400117 	ldw	r17,4(sp)
   42d00:	dc000017 	ldw	r16,0(sp)
   42d04:	dec00a04 	addi	sp,sp,40
   42d08:	0041d0c1 	jmpi	41d0c <_malloc_r>
   42d0c:	a8c00017 	ldw	r3,0(r21)
   42d10:	90c00015 	stw	r3,0(r18)
   42d14:	a8c00117 	ldw	r3,4(r21)
   42d18:	90c00115 	stw	r3,4(r18)
   42d1c:	00c006c4 	movi	r3,27
   42d20:	19804536 	bltu	r3,r6,42e38 <_realloc_r+0x470>
   42d24:	90800204 	addi	r2,r18,8
   42d28:	a8c00204 	addi	r3,r21,8
   42d2c:	003f6306 	br	42abc <__alt_data_end+0xfffdb9bc>
   42d30:	9005883a 	mov	r2,r18
   42d34:	a8c00017 	ldw	r3,0(r21)
   42d38:	b821883a 	mov	r16,r23
   42d3c:	b027883a 	mov	r19,r22
   42d40:	10c00015 	stw	r3,0(r2)
   42d44:	a8c00117 	ldw	r3,4(r21)
   42d48:	10c00115 	stw	r3,4(r2)
   42d4c:	a8c00217 	ldw	r3,8(r21)
   42d50:	10c00215 	stw	r3,8(r2)
   42d54:	003f6a06 	br	42b00 <__alt_data_end+0xfffdba00>
   42d58:	9c67883a 	add	r19,r19,r17
   42d5c:	4445c83a 	sub	r2,r8,r17
   42d60:	e4c00215 	stw	r19,8(fp)
   42d64:	10800054 	ori	r2,r2,1
   42d68:	98800115 	stw	r2,4(r19)
   42d6c:	a8bfff17 	ldw	r2,-4(r21)
   42d70:	a009883a 	mov	r4,r20
   42d74:	1080004c 	andi	r2,r2,1
   42d78:	1462b03a 	or	r17,r2,r17
   42d7c:	ac7fff15 	stw	r17,-4(r21)
   42d80:	00443700 	call	44370 <__malloc_unlock>
   42d84:	a805883a 	mov	r2,r21
   42d88:	003f6b06 	br	42b38 <__alt_data_end+0xfffdba38>
   42d8c:	a80b883a 	mov	r5,r21
   42d90:	9009883a 	mov	r4,r18
   42d94:	00427440 	call	42744 <memmove>
   42d98:	003f4e06 	br	42ad4 <__alt_data_end+0xfffdb9d4>
   42d9c:	89000404 	addi	r4,r17,16
   42da0:	b93fbc16 	blt	r23,r4,42c94 <__alt_data_end+0xfffdbb94>
   42da4:	b0800317 	ldw	r2,12(r22)
   42da8:	b0c00217 	ldw	r3,8(r22)
   42dac:	81bfff04 	addi	r6,r16,-4
   42db0:	01000904 	movi	r4,36
   42db4:	18800315 	stw	r2,12(r3)
   42db8:	10c00215 	stw	r3,8(r2)
   42dbc:	b4800204 	addi	r18,r22,8
   42dc0:	21804336 	bltu	r4,r6,42ed0 <_realloc_r+0x508>
   42dc4:	008004c4 	movi	r2,19
   42dc8:	11803f2e 	bgeu	r2,r6,42ec8 <_realloc_r+0x500>
   42dcc:	a8800017 	ldw	r2,0(r21)
   42dd0:	b0800215 	stw	r2,8(r22)
   42dd4:	a8800117 	ldw	r2,4(r21)
   42dd8:	b0800315 	stw	r2,12(r22)
   42ddc:	008006c4 	movi	r2,27
   42de0:	11803f36 	bltu	r2,r6,42ee0 <_realloc_r+0x518>
   42de4:	b0800404 	addi	r2,r22,16
   42de8:	ad400204 	addi	r21,r21,8
   42dec:	a8c00017 	ldw	r3,0(r21)
   42df0:	10c00015 	stw	r3,0(r2)
   42df4:	a8c00117 	ldw	r3,4(r21)
   42df8:	10c00115 	stw	r3,4(r2)
   42dfc:	a8c00217 	ldw	r3,8(r21)
   42e00:	10c00215 	stw	r3,8(r2)
   42e04:	b447883a 	add	r3,r22,r17
   42e08:	bc45c83a 	sub	r2,r23,r17
   42e0c:	e0c00215 	stw	r3,8(fp)
   42e10:	10800054 	ori	r2,r2,1
   42e14:	18800115 	stw	r2,4(r3)
   42e18:	b0800117 	ldw	r2,4(r22)
   42e1c:	a009883a 	mov	r4,r20
   42e20:	1080004c 	andi	r2,r2,1
   42e24:	1462b03a 	or	r17,r2,r17
   42e28:	b4400115 	stw	r17,4(r22)
   42e2c:	00443700 	call	44370 <__malloc_unlock>
   42e30:	9005883a 	mov	r2,r18
   42e34:	003f4006 	br	42b38 <__alt_data_end+0xfffdba38>
   42e38:	a8c00217 	ldw	r3,8(r21)
   42e3c:	90c00215 	stw	r3,8(r18)
   42e40:	a8c00317 	ldw	r3,12(r21)
   42e44:	90c00315 	stw	r3,12(r18)
   42e48:	30801126 	beq	r6,r2,42e90 <_realloc_r+0x4c8>
   42e4c:	90800404 	addi	r2,r18,16
   42e50:	a8c00404 	addi	r3,r21,16
   42e54:	003f1906 	br	42abc <__alt_data_end+0xfffdb9bc>
   42e58:	90ffff17 	ldw	r3,-4(r18)
   42e5c:	00bfff04 	movi	r2,-4
   42e60:	a825883a 	mov	r18,r21
   42e64:	1884703a 	and	r2,r3,r2
   42e68:	80a1883a 	add	r16,r16,r2
   42e6c:	003f2406 	br	42b00 <__alt_data_end+0xfffdba00>
   42e70:	a8800217 	ldw	r2,8(r21)
   42e74:	b0800415 	stw	r2,16(r22)
   42e78:	a8800317 	ldw	r2,12(r21)
   42e7c:	b0800515 	stw	r2,20(r22)
   42e80:	31000a26 	beq	r6,r4,42eac <_realloc_r+0x4e4>
   42e84:	b0800604 	addi	r2,r22,24
   42e88:	ad400404 	addi	r21,r21,16
   42e8c:	003fa906 	br	42d34 <__alt_data_end+0xfffdbc34>
   42e90:	a9000417 	ldw	r4,16(r21)
   42e94:	90800604 	addi	r2,r18,24
   42e98:	a8c00604 	addi	r3,r21,24
   42e9c:	91000415 	stw	r4,16(r18)
   42ea0:	a9000517 	ldw	r4,20(r21)
   42ea4:	91000515 	stw	r4,20(r18)
   42ea8:	003f0406 	br	42abc <__alt_data_end+0xfffdb9bc>
   42eac:	a8c00417 	ldw	r3,16(r21)
   42eb0:	ad400604 	addi	r21,r21,24
   42eb4:	b0800804 	addi	r2,r22,32
   42eb8:	b0c00615 	stw	r3,24(r22)
   42ebc:	a8ffff17 	ldw	r3,-4(r21)
   42ec0:	b0c00715 	stw	r3,28(r22)
   42ec4:	003f9b06 	br	42d34 <__alt_data_end+0xfffdbc34>
   42ec8:	9005883a 	mov	r2,r18
   42ecc:	003fc706 	br	42dec <__alt_data_end+0xfffdbcec>
   42ed0:	a80b883a 	mov	r5,r21
   42ed4:	9009883a 	mov	r4,r18
   42ed8:	00427440 	call	42744 <memmove>
   42edc:	003fc906 	br	42e04 <__alt_data_end+0xfffdbd04>
   42ee0:	a8800217 	ldw	r2,8(r21)
   42ee4:	b0800415 	stw	r2,16(r22)
   42ee8:	a8800317 	ldw	r2,12(r21)
   42eec:	b0800515 	stw	r2,20(r22)
   42ef0:	31000726 	beq	r6,r4,42f10 <_realloc_r+0x548>
   42ef4:	b0800604 	addi	r2,r22,24
   42ef8:	ad400404 	addi	r21,r21,16
   42efc:	003fbb06 	br	42dec <__alt_data_end+0xfffdbcec>
   42f00:	a009883a 	mov	r4,r20
   42f04:	00443700 	call	44370 <__malloc_unlock>
   42f08:	0005883a 	mov	r2,zero
   42f0c:	003f0a06 	br	42b38 <__alt_data_end+0xfffdba38>
   42f10:	a8c00417 	ldw	r3,16(r21)
   42f14:	ad400604 	addi	r21,r21,24
   42f18:	b0800804 	addi	r2,r22,32
   42f1c:	b0c00615 	stw	r3,24(r22)
   42f20:	a8ffff17 	ldw	r3,-4(r21)
   42f24:	b0c00715 	stw	r3,28(r22)
   42f28:	003fb006 	br	42dec <__alt_data_end+0xfffdbcec>

00042f2c <_sbrk_r>:
   42f2c:	defffd04 	addi	sp,sp,-12
   42f30:	dc000015 	stw	r16,0(sp)
   42f34:	04000174 	movhi	r16,5
   42f38:	dc400115 	stw	r17,4(sp)
   42f3c:	8426cf04 	addi	r16,r16,-25796
   42f40:	2023883a 	mov	r17,r4
   42f44:	2809883a 	mov	r4,r5
   42f48:	dfc00215 	stw	ra,8(sp)
   42f4c:	80000015 	stw	zero,0(r16)
   42f50:	00445300 	call	44530 <sbrk>
   42f54:	00ffffc4 	movi	r3,-1
   42f58:	10c00526 	beq	r2,r3,42f70 <_sbrk_r+0x44>
   42f5c:	dfc00217 	ldw	ra,8(sp)
   42f60:	dc400117 	ldw	r17,4(sp)
   42f64:	dc000017 	ldw	r16,0(sp)
   42f68:	dec00304 	addi	sp,sp,12
   42f6c:	f800283a 	ret
   42f70:	80c00017 	ldw	r3,0(r16)
   42f74:	183ff926 	beq	r3,zero,42f5c <__alt_data_end+0xfffdbe5c>
   42f78:	88c00015 	stw	r3,0(r17)
   42f7c:	003ff706 	br	42f5c <__alt_data_end+0xfffdbe5c>

00042f80 <__sread>:
   42f80:	defffe04 	addi	sp,sp,-8
   42f84:	dc000015 	stw	r16,0(sp)
   42f88:	2821883a 	mov	r16,r5
   42f8c:	2940038f 	ldh	r5,14(r5)
   42f90:	dfc00115 	stw	ra,4(sp)
   42f94:	0043cc00 	call	43cc0 <_read_r>
   42f98:	10000716 	blt	r2,zero,42fb8 <__sread+0x38>
   42f9c:	80c01417 	ldw	r3,80(r16)
   42fa0:	1887883a 	add	r3,r3,r2
   42fa4:	80c01415 	stw	r3,80(r16)
   42fa8:	dfc00117 	ldw	ra,4(sp)
   42fac:	dc000017 	ldw	r16,0(sp)
   42fb0:	dec00204 	addi	sp,sp,8
   42fb4:	f800283a 	ret
   42fb8:	80c0030b 	ldhu	r3,12(r16)
   42fbc:	18fbffcc 	andi	r3,r3,61439
   42fc0:	80c0030d 	sth	r3,12(r16)
   42fc4:	dfc00117 	ldw	ra,4(sp)
   42fc8:	dc000017 	ldw	r16,0(sp)
   42fcc:	dec00204 	addi	sp,sp,8
   42fd0:	f800283a 	ret

00042fd4 <__seofread>:
   42fd4:	0005883a 	mov	r2,zero
   42fd8:	f800283a 	ret

00042fdc <__swrite>:
   42fdc:	2880030b 	ldhu	r2,12(r5)
   42fe0:	defffb04 	addi	sp,sp,-20
   42fe4:	dcc00315 	stw	r19,12(sp)
   42fe8:	dc800215 	stw	r18,8(sp)
   42fec:	dc400115 	stw	r17,4(sp)
   42ff0:	dc000015 	stw	r16,0(sp)
   42ff4:	dfc00415 	stw	ra,16(sp)
   42ff8:	10c0400c 	andi	r3,r2,256
   42ffc:	2821883a 	mov	r16,r5
   43000:	2023883a 	mov	r17,r4
   43004:	3025883a 	mov	r18,r6
   43008:	3827883a 	mov	r19,r7
   4300c:	18000526 	beq	r3,zero,43024 <__swrite+0x48>
   43010:	2940038f 	ldh	r5,14(r5)
   43014:	01c00084 	movi	r7,2
   43018:	000d883a 	mov	r6,zero
   4301c:	0043aa40 	call	43aa4 <_lseek_r>
   43020:	8080030b 	ldhu	r2,12(r16)
   43024:	8140038f 	ldh	r5,14(r16)
   43028:	10bbffcc 	andi	r2,r2,61439
   4302c:	980f883a 	mov	r7,r19
   43030:	900d883a 	mov	r6,r18
   43034:	8809883a 	mov	r4,r17
   43038:	8080030d 	sth	r2,12(r16)
   4303c:	dfc00417 	ldw	ra,16(sp)
   43040:	dcc00317 	ldw	r19,12(sp)
   43044:	dc800217 	ldw	r18,8(sp)
   43048:	dc400117 	ldw	r17,4(sp)
   4304c:	dc000017 	ldw	r16,0(sp)
   43050:	dec00504 	addi	sp,sp,20
   43054:	00430bc1 	jmpi	430bc <_write_r>

00043058 <__sseek>:
   43058:	defffe04 	addi	sp,sp,-8
   4305c:	dc000015 	stw	r16,0(sp)
   43060:	2821883a 	mov	r16,r5
   43064:	2940038f 	ldh	r5,14(r5)
   43068:	dfc00115 	stw	ra,4(sp)
   4306c:	0043aa40 	call	43aa4 <_lseek_r>
   43070:	00ffffc4 	movi	r3,-1
   43074:	10c00826 	beq	r2,r3,43098 <__sseek+0x40>
   43078:	80c0030b 	ldhu	r3,12(r16)
   4307c:	80801415 	stw	r2,80(r16)
   43080:	18c40014 	ori	r3,r3,4096
   43084:	80c0030d 	sth	r3,12(r16)
   43088:	dfc00117 	ldw	ra,4(sp)
   4308c:	dc000017 	ldw	r16,0(sp)
   43090:	dec00204 	addi	sp,sp,8
   43094:	f800283a 	ret
   43098:	80c0030b 	ldhu	r3,12(r16)
   4309c:	18fbffcc 	andi	r3,r3,61439
   430a0:	80c0030d 	sth	r3,12(r16)
   430a4:	dfc00117 	ldw	ra,4(sp)
   430a8:	dc000017 	ldw	r16,0(sp)
   430ac:	dec00204 	addi	sp,sp,8
   430b0:	f800283a 	ret

000430b4 <__sclose>:
   430b4:	2940038f 	ldh	r5,14(r5)
   430b8:	00432701 	jmpi	43270 <_close_r>

000430bc <_write_r>:
   430bc:	defffd04 	addi	sp,sp,-12
   430c0:	2805883a 	mov	r2,r5
   430c4:	dc000015 	stw	r16,0(sp)
   430c8:	04000174 	movhi	r16,5
   430cc:	dc400115 	stw	r17,4(sp)
   430d0:	300b883a 	mov	r5,r6
   430d4:	8426cf04 	addi	r16,r16,-25796
   430d8:	2023883a 	mov	r17,r4
   430dc:	380d883a 	mov	r6,r7
   430e0:	1009883a 	mov	r4,r2
   430e4:	dfc00215 	stw	ra,8(sp)
   430e8:	80000015 	stw	zero,0(r16)
   430ec:	004461c0 	call	4461c <write>
   430f0:	00ffffc4 	movi	r3,-1
   430f4:	10c00526 	beq	r2,r3,4310c <_write_r+0x50>
   430f8:	dfc00217 	ldw	ra,8(sp)
   430fc:	dc400117 	ldw	r17,4(sp)
   43100:	dc000017 	ldw	r16,0(sp)
   43104:	dec00304 	addi	sp,sp,12
   43108:	f800283a 	ret
   4310c:	80c00017 	ldw	r3,0(r16)
   43110:	183ff926 	beq	r3,zero,430f8 <__alt_data_end+0xfffdbff8>
   43114:	88c00015 	stw	r3,0(r17)
   43118:	003ff706 	br	430f8 <__alt_data_end+0xfffdbff8>

0004311c <__swsetup_r>:
   4311c:	00800174 	movhi	r2,5
   43120:	defffd04 	addi	sp,sp,-12
   43124:	10a01704 	addi	r2,r2,-32676
   43128:	dc400115 	stw	r17,4(sp)
   4312c:	2023883a 	mov	r17,r4
   43130:	11000017 	ldw	r4,0(r2)
   43134:	dc000015 	stw	r16,0(sp)
   43138:	dfc00215 	stw	ra,8(sp)
   4313c:	2821883a 	mov	r16,r5
   43140:	20000226 	beq	r4,zero,4314c <__swsetup_r+0x30>
   43144:	20800e17 	ldw	r2,56(r4)
   43148:	10003126 	beq	r2,zero,43210 <__swsetup_r+0xf4>
   4314c:	8080030b 	ldhu	r2,12(r16)
   43150:	10c0020c 	andi	r3,r2,8
   43154:	1009883a 	mov	r4,r2
   43158:	18000f26 	beq	r3,zero,43198 <__swsetup_r+0x7c>
   4315c:	80c00417 	ldw	r3,16(r16)
   43160:	18001526 	beq	r3,zero,431b8 <__swsetup_r+0x9c>
   43164:	1100004c 	andi	r4,r2,1
   43168:	20001c1e 	bne	r4,zero,431dc <__swsetup_r+0xc0>
   4316c:	1080008c 	andi	r2,r2,2
   43170:	1000291e 	bne	r2,zero,43218 <__swsetup_r+0xfc>
   43174:	80800517 	ldw	r2,20(r16)
   43178:	80800215 	stw	r2,8(r16)
   4317c:	18001c26 	beq	r3,zero,431f0 <__swsetup_r+0xd4>
   43180:	0005883a 	mov	r2,zero
   43184:	dfc00217 	ldw	ra,8(sp)
   43188:	dc400117 	ldw	r17,4(sp)
   4318c:	dc000017 	ldw	r16,0(sp)
   43190:	dec00304 	addi	sp,sp,12
   43194:	f800283a 	ret
   43198:	2080040c 	andi	r2,r4,16
   4319c:	10002e26 	beq	r2,zero,43258 <__swsetup_r+0x13c>
   431a0:	2080010c 	andi	r2,r4,4
   431a4:	10001e1e 	bne	r2,zero,43220 <__swsetup_r+0x104>
   431a8:	80c00417 	ldw	r3,16(r16)
   431ac:	20800214 	ori	r2,r4,8
   431b0:	8080030d 	sth	r2,12(r16)
   431b4:	183feb1e 	bne	r3,zero,43164 <__alt_data_end+0xfffdc064>
   431b8:	1100a00c 	andi	r4,r2,640
   431bc:	01408004 	movi	r5,512
   431c0:	217fe826 	beq	r4,r5,43164 <__alt_data_end+0xfffdc064>
   431c4:	800b883a 	mov	r5,r16
   431c8:	8809883a 	mov	r4,r17
   431cc:	0043b040 	call	43b04 <__smakebuf_r>
   431d0:	8080030b 	ldhu	r2,12(r16)
   431d4:	80c00417 	ldw	r3,16(r16)
   431d8:	003fe206 	br	43164 <__alt_data_end+0xfffdc064>
   431dc:	80800517 	ldw	r2,20(r16)
   431e0:	80000215 	stw	zero,8(r16)
   431e4:	0085c83a 	sub	r2,zero,r2
   431e8:	80800615 	stw	r2,24(r16)
   431ec:	183fe41e 	bne	r3,zero,43180 <__alt_data_end+0xfffdc080>
   431f0:	80c0030b 	ldhu	r3,12(r16)
   431f4:	0005883a 	mov	r2,zero
   431f8:	1900200c 	andi	r4,r3,128
   431fc:	203fe126 	beq	r4,zero,43184 <__alt_data_end+0xfffdc084>
   43200:	18c01014 	ori	r3,r3,64
   43204:	80c0030d 	sth	r3,12(r16)
   43208:	00bfffc4 	movi	r2,-1
   4320c:	003fdd06 	br	43184 <__alt_data_end+0xfffdc084>
   43210:	00416780 	call	41678 <__sinit>
   43214:	003fcd06 	br	4314c <__alt_data_end+0xfffdc04c>
   43218:	0005883a 	mov	r2,zero
   4321c:	003fd606 	br	43178 <__alt_data_end+0xfffdc078>
   43220:	81400c17 	ldw	r5,48(r16)
   43224:	28000626 	beq	r5,zero,43240 <__swsetup_r+0x124>
   43228:	80801004 	addi	r2,r16,64
   4322c:	28800326 	beq	r5,r2,4323c <__swsetup_r+0x120>
   43230:	8809883a 	mov	r4,r17
   43234:	00437940 	call	43794 <_free_r>
   43238:	8100030b 	ldhu	r4,12(r16)
   4323c:	80000c15 	stw	zero,48(r16)
   43240:	80c00417 	ldw	r3,16(r16)
   43244:	00bff6c4 	movi	r2,-37
   43248:	1108703a 	and	r4,r2,r4
   4324c:	80000115 	stw	zero,4(r16)
   43250:	80c00015 	stw	r3,0(r16)
   43254:	003fd506 	br	431ac <__alt_data_end+0xfffdc0ac>
   43258:	00800244 	movi	r2,9
   4325c:	88800015 	stw	r2,0(r17)
   43260:	20801014 	ori	r2,r4,64
   43264:	8080030d 	sth	r2,12(r16)
   43268:	00bfffc4 	movi	r2,-1
   4326c:	003fc506 	br	43184 <__alt_data_end+0xfffdc084>

00043270 <_close_r>:
   43270:	defffd04 	addi	sp,sp,-12
   43274:	dc000015 	stw	r16,0(sp)
   43278:	04000174 	movhi	r16,5
   4327c:	dc400115 	stw	r17,4(sp)
   43280:	8426cf04 	addi	r16,r16,-25796
   43284:	2023883a 	mov	r17,r4
   43288:	2809883a 	mov	r4,r5
   4328c:	dfc00215 	stw	ra,8(sp)
   43290:	80000015 	stw	zero,0(r16)
   43294:	0043e0c0 	call	43e0c <close>
   43298:	00ffffc4 	movi	r3,-1
   4329c:	10c00526 	beq	r2,r3,432b4 <_close_r+0x44>
   432a0:	dfc00217 	ldw	ra,8(sp)
   432a4:	dc400117 	ldw	r17,4(sp)
   432a8:	dc000017 	ldw	r16,0(sp)
   432ac:	dec00304 	addi	sp,sp,12
   432b0:	f800283a 	ret
   432b4:	80c00017 	ldw	r3,0(r16)
   432b8:	183ff926 	beq	r3,zero,432a0 <__alt_data_end+0xfffdc1a0>
   432bc:	88c00015 	stw	r3,0(r17)
   432c0:	003ff706 	br	432a0 <__alt_data_end+0xfffdc1a0>

000432c4 <_fclose_r>:
   432c4:	28003926 	beq	r5,zero,433ac <_fclose_r+0xe8>
   432c8:	defffc04 	addi	sp,sp,-16
   432cc:	dc400115 	stw	r17,4(sp)
   432d0:	dc000015 	stw	r16,0(sp)
   432d4:	dfc00315 	stw	ra,12(sp)
   432d8:	dc800215 	stw	r18,8(sp)
   432dc:	2023883a 	mov	r17,r4
   432e0:	2821883a 	mov	r16,r5
   432e4:	20000226 	beq	r4,zero,432f0 <_fclose_r+0x2c>
   432e8:	20800e17 	ldw	r2,56(r4)
   432ec:	10002726 	beq	r2,zero,4338c <_fclose_r+0xc8>
   432f0:	8080030f 	ldh	r2,12(r16)
   432f4:	1000071e 	bne	r2,zero,43314 <_fclose_r+0x50>
   432f8:	0005883a 	mov	r2,zero
   432fc:	dfc00317 	ldw	ra,12(sp)
   43300:	dc800217 	ldw	r18,8(sp)
   43304:	dc400117 	ldw	r17,4(sp)
   43308:	dc000017 	ldw	r16,0(sp)
   4330c:	dec00404 	addi	sp,sp,16
   43310:	f800283a 	ret
   43314:	800b883a 	mov	r5,r16
   43318:	8809883a 	mov	r4,r17
   4331c:	00433c80 	call	433c8 <__sflush_r>
   43320:	1025883a 	mov	r18,r2
   43324:	80800b17 	ldw	r2,44(r16)
   43328:	10000426 	beq	r2,zero,4333c <_fclose_r+0x78>
   4332c:	81400717 	ldw	r5,28(r16)
   43330:	8809883a 	mov	r4,r17
   43334:	103ee83a 	callr	r2
   43338:	10001616 	blt	r2,zero,43394 <_fclose_r+0xd0>
   4333c:	8080030b 	ldhu	r2,12(r16)
   43340:	1080200c 	andi	r2,r2,128
   43344:	1000151e 	bne	r2,zero,4339c <_fclose_r+0xd8>
   43348:	81400c17 	ldw	r5,48(r16)
   4334c:	28000526 	beq	r5,zero,43364 <_fclose_r+0xa0>
   43350:	80801004 	addi	r2,r16,64
   43354:	28800226 	beq	r5,r2,43360 <_fclose_r+0x9c>
   43358:	8809883a 	mov	r4,r17
   4335c:	00437940 	call	43794 <_free_r>
   43360:	80000c15 	stw	zero,48(r16)
   43364:	81401117 	ldw	r5,68(r16)
   43368:	28000326 	beq	r5,zero,43378 <_fclose_r+0xb4>
   4336c:	8809883a 	mov	r4,r17
   43370:	00437940 	call	43794 <_free_r>
   43374:	80001115 	stw	zero,68(r16)
   43378:	00416880 	call	41688 <__sfp_lock_acquire>
   4337c:	8000030d 	sth	zero,12(r16)
   43380:	004168c0 	call	4168c <__sfp_lock_release>
   43384:	9005883a 	mov	r2,r18
   43388:	003fdc06 	br	432fc <__alt_data_end+0xfffdc1fc>
   4338c:	00416780 	call	41678 <__sinit>
   43390:	003fd706 	br	432f0 <__alt_data_end+0xfffdc1f0>
   43394:	04bfffc4 	movi	r18,-1
   43398:	003fe806 	br	4333c <__alt_data_end+0xfffdc23c>
   4339c:	81400417 	ldw	r5,16(r16)
   433a0:	8809883a 	mov	r4,r17
   433a4:	00437940 	call	43794 <_free_r>
   433a8:	003fe706 	br	43348 <__alt_data_end+0xfffdc248>
   433ac:	0005883a 	mov	r2,zero
   433b0:	f800283a 	ret

000433b4 <fclose>:
   433b4:	00800174 	movhi	r2,5
   433b8:	10a01704 	addi	r2,r2,-32676
   433bc:	200b883a 	mov	r5,r4
   433c0:	11000017 	ldw	r4,0(r2)
   433c4:	00432c41 	jmpi	432c4 <_fclose_r>

000433c8 <__sflush_r>:
   433c8:	2880030b 	ldhu	r2,12(r5)
   433cc:	defffb04 	addi	sp,sp,-20
   433d0:	dcc00315 	stw	r19,12(sp)
   433d4:	dc400115 	stw	r17,4(sp)
   433d8:	dfc00415 	stw	ra,16(sp)
   433dc:	dc800215 	stw	r18,8(sp)
   433e0:	dc000015 	stw	r16,0(sp)
   433e4:	10c0020c 	andi	r3,r2,8
   433e8:	2823883a 	mov	r17,r5
   433ec:	2027883a 	mov	r19,r4
   433f0:	1800311e 	bne	r3,zero,434b8 <__sflush_r+0xf0>
   433f4:	28c00117 	ldw	r3,4(r5)
   433f8:	10820014 	ori	r2,r2,2048
   433fc:	2880030d 	sth	r2,12(r5)
   43400:	00c04b0e 	bge	zero,r3,43530 <__sflush_r+0x168>
   43404:	8a000a17 	ldw	r8,40(r17)
   43408:	40002326 	beq	r8,zero,43498 <__sflush_r+0xd0>
   4340c:	9c000017 	ldw	r16,0(r19)
   43410:	10c4000c 	andi	r3,r2,4096
   43414:	98000015 	stw	zero,0(r19)
   43418:	18004826 	beq	r3,zero,4353c <__sflush_r+0x174>
   4341c:	89801417 	ldw	r6,80(r17)
   43420:	10c0010c 	andi	r3,r2,4
   43424:	18000626 	beq	r3,zero,43440 <__sflush_r+0x78>
   43428:	88c00117 	ldw	r3,4(r17)
   4342c:	88800c17 	ldw	r2,48(r17)
   43430:	30cdc83a 	sub	r6,r6,r3
   43434:	10000226 	beq	r2,zero,43440 <__sflush_r+0x78>
   43438:	88800f17 	ldw	r2,60(r17)
   4343c:	308dc83a 	sub	r6,r6,r2
   43440:	89400717 	ldw	r5,28(r17)
   43444:	000f883a 	mov	r7,zero
   43448:	9809883a 	mov	r4,r19
   4344c:	403ee83a 	callr	r8
   43450:	00ffffc4 	movi	r3,-1
   43454:	10c04426 	beq	r2,r3,43568 <__sflush_r+0x1a0>
   43458:	88c0030b 	ldhu	r3,12(r17)
   4345c:	89000417 	ldw	r4,16(r17)
   43460:	88000115 	stw	zero,4(r17)
   43464:	197dffcc 	andi	r5,r3,63487
   43468:	8940030d 	sth	r5,12(r17)
   4346c:	89000015 	stw	r4,0(r17)
   43470:	18c4000c 	andi	r3,r3,4096
   43474:	18002c1e 	bne	r3,zero,43528 <__sflush_r+0x160>
   43478:	89400c17 	ldw	r5,48(r17)
   4347c:	9c000015 	stw	r16,0(r19)
   43480:	28000526 	beq	r5,zero,43498 <__sflush_r+0xd0>
   43484:	88801004 	addi	r2,r17,64
   43488:	28800226 	beq	r5,r2,43494 <__sflush_r+0xcc>
   4348c:	9809883a 	mov	r4,r19
   43490:	00437940 	call	43794 <_free_r>
   43494:	88000c15 	stw	zero,48(r17)
   43498:	0005883a 	mov	r2,zero
   4349c:	dfc00417 	ldw	ra,16(sp)
   434a0:	dcc00317 	ldw	r19,12(sp)
   434a4:	dc800217 	ldw	r18,8(sp)
   434a8:	dc400117 	ldw	r17,4(sp)
   434ac:	dc000017 	ldw	r16,0(sp)
   434b0:	dec00504 	addi	sp,sp,20
   434b4:	f800283a 	ret
   434b8:	2c800417 	ldw	r18,16(r5)
   434bc:	903ff626 	beq	r18,zero,43498 <__alt_data_end+0xfffdc398>
   434c0:	2c000017 	ldw	r16,0(r5)
   434c4:	108000cc 	andi	r2,r2,3
   434c8:	2c800015 	stw	r18,0(r5)
   434cc:	84a1c83a 	sub	r16,r16,r18
   434d0:	1000131e 	bne	r2,zero,43520 <__sflush_r+0x158>
   434d4:	28800517 	ldw	r2,20(r5)
   434d8:	88800215 	stw	r2,8(r17)
   434dc:	04000316 	blt	zero,r16,434ec <__sflush_r+0x124>
   434e0:	003fed06 	br	43498 <__alt_data_end+0xfffdc398>
   434e4:	90a5883a 	add	r18,r18,r2
   434e8:	043feb0e 	bge	zero,r16,43498 <__alt_data_end+0xfffdc398>
   434ec:	88800917 	ldw	r2,36(r17)
   434f0:	89400717 	ldw	r5,28(r17)
   434f4:	800f883a 	mov	r7,r16
   434f8:	900d883a 	mov	r6,r18
   434fc:	9809883a 	mov	r4,r19
   43500:	103ee83a 	callr	r2
   43504:	80a1c83a 	sub	r16,r16,r2
   43508:	00bff616 	blt	zero,r2,434e4 <__alt_data_end+0xfffdc3e4>
   4350c:	88c0030b 	ldhu	r3,12(r17)
   43510:	00bfffc4 	movi	r2,-1
   43514:	18c01014 	ori	r3,r3,64
   43518:	88c0030d 	sth	r3,12(r17)
   4351c:	003fdf06 	br	4349c <__alt_data_end+0xfffdc39c>
   43520:	0005883a 	mov	r2,zero
   43524:	003fec06 	br	434d8 <__alt_data_end+0xfffdc3d8>
   43528:	88801415 	stw	r2,80(r17)
   4352c:	003fd206 	br	43478 <__alt_data_end+0xfffdc378>
   43530:	28c00f17 	ldw	r3,60(r5)
   43534:	00ffb316 	blt	zero,r3,43404 <__alt_data_end+0xfffdc304>
   43538:	003fd706 	br	43498 <__alt_data_end+0xfffdc398>
   4353c:	89400717 	ldw	r5,28(r17)
   43540:	000d883a 	mov	r6,zero
   43544:	01c00044 	movi	r7,1
   43548:	9809883a 	mov	r4,r19
   4354c:	403ee83a 	callr	r8
   43550:	100d883a 	mov	r6,r2
   43554:	00bfffc4 	movi	r2,-1
   43558:	30801426 	beq	r6,r2,435ac <__sflush_r+0x1e4>
   4355c:	8880030b 	ldhu	r2,12(r17)
   43560:	8a000a17 	ldw	r8,40(r17)
   43564:	003fae06 	br	43420 <__alt_data_end+0xfffdc320>
   43568:	98c00017 	ldw	r3,0(r19)
   4356c:	183fba26 	beq	r3,zero,43458 <__alt_data_end+0xfffdc358>
   43570:	01000744 	movi	r4,29
   43574:	19000626 	beq	r3,r4,43590 <__sflush_r+0x1c8>
   43578:	01000584 	movi	r4,22
   4357c:	19000426 	beq	r3,r4,43590 <__sflush_r+0x1c8>
   43580:	88c0030b 	ldhu	r3,12(r17)
   43584:	18c01014 	ori	r3,r3,64
   43588:	88c0030d 	sth	r3,12(r17)
   4358c:	003fc306 	br	4349c <__alt_data_end+0xfffdc39c>
   43590:	8880030b 	ldhu	r2,12(r17)
   43594:	88c00417 	ldw	r3,16(r17)
   43598:	88000115 	stw	zero,4(r17)
   4359c:	10bdffcc 	andi	r2,r2,63487
   435a0:	8880030d 	sth	r2,12(r17)
   435a4:	88c00015 	stw	r3,0(r17)
   435a8:	003fb306 	br	43478 <__alt_data_end+0xfffdc378>
   435ac:	98800017 	ldw	r2,0(r19)
   435b0:	103fea26 	beq	r2,zero,4355c <__alt_data_end+0xfffdc45c>
   435b4:	00c00744 	movi	r3,29
   435b8:	10c00226 	beq	r2,r3,435c4 <__sflush_r+0x1fc>
   435bc:	00c00584 	movi	r3,22
   435c0:	10c0031e 	bne	r2,r3,435d0 <__sflush_r+0x208>
   435c4:	9c000015 	stw	r16,0(r19)
   435c8:	0005883a 	mov	r2,zero
   435cc:	003fb306 	br	4349c <__alt_data_end+0xfffdc39c>
   435d0:	88c0030b 	ldhu	r3,12(r17)
   435d4:	3005883a 	mov	r2,r6
   435d8:	18c01014 	ori	r3,r3,64
   435dc:	88c0030d 	sth	r3,12(r17)
   435e0:	003fae06 	br	4349c <__alt_data_end+0xfffdc39c>

000435e4 <_fflush_r>:
   435e4:	defffd04 	addi	sp,sp,-12
   435e8:	dc000115 	stw	r16,4(sp)
   435ec:	dfc00215 	stw	ra,8(sp)
   435f0:	2021883a 	mov	r16,r4
   435f4:	20000226 	beq	r4,zero,43600 <_fflush_r+0x1c>
   435f8:	20800e17 	ldw	r2,56(r4)
   435fc:	10000c26 	beq	r2,zero,43630 <_fflush_r+0x4c>
   43600:	2880030f 	ldh	r2,12(r5)
   43604:	1000051e 	bne	r2,zero,4361c <_fflush_r+0x38>
   43608:	0005883a 	mov	r2,zero
   4360c:	dfc00217 	ldw	ra,8(sp)
   43610:	dc000117 	ldw	r16,4(sp)
   43614:	dec00304 	addi	sp,sp,12
   43618:	f800283a 	ret
   4361c:	8009883a 	mov	r4,r16
   43620:	dfc00217 	ldw	ra,8(sp)
   43624:	dc000117 	ldw	r16,4(sp)
   43628:	dec00304 	addi	sp,sp,12
   4362c:	00433c81 	jmpi	433c8 <__sflush_r>
   43630:	d9400015 	stw	r5,0(sp)
   43634:	00416780 	call	41678 <__sinit>
   43638:	d9400017 	ldw	r5,0(sp)
   4363c:	003ff006 	br	43600 <__alt_data_end+0xfffdc500>

00043640 <fflush>:
   43640:	20000526 	beq	r4,zero,43658 <fflush+0x18>
   43644:	00800174 	movhi	r2,5
   43648:	10a01704 	addi	r2,r2,-32676
   4364c:	200b883a 	mov	r5,r4
   43650:	11000017 	ldw	r4,0(r2)
   43654:	00435e41 	jmpi	435e4 <_fflush_r>
   43658:	00800174 	movhi	r2,5
   4365c:	10a01604 	addi	r2,r2,-32680
   43660:	11000017 	ldw	r4,0(r2)
   43664:	01400134 	movhi	r5,4
   43668:	294d7904 	addi	r5,r5,13796
   4366c:	0041c481 	jmpi	41c48 <_fwalk_reent>

00043670 <_malloc_trim_r>:
   43670:	defffb04 	addi	sp,sp,-20
   43674:	dcc00315 	stw	r19,12(sp)
   43678:	04c00134 	movhi	r19,4
   4367c:	dc800215 	stw	r18,8(sp)
   43680:	dc400115 	stw	r17,4(sp)
   43684:	dc000015 	stw	r16,0(sp)
   43688:	dfc00415 	stw	ra,16(sp)
   4368c:	2821883a 	mov	r16,r5
   43690:	9cda8f04 	addi	r19,r19,27196
   43694:	2025883a 	mov	r18,r4
   43698:	004434c0 	call	4434c <__malloc_lock>
   4369c:	98800217 	ldw	r2,8(r19)
   436a0:	14400117 	ldw	r17,4(r2)
   436a4:	00bfff04 	movi	r2,-4
   436a8:	88a2703a 	and	r17,r17,r2
   436ac:	8c21c83a 	sub	r16,r17,r16
   436b0:	8403fbc4 	addi	r16,r16,4079
   436b4:	8020d33a 	srli	r16,r16,12
   436b8:	0083ffc4 	movi	r2,4095
   436bc:	843fffc4 	addi	r16,r16,-1
   436c0:	8020933a 	slli	r16,r16,12
   436c4:	1400060e 	bge	r2,r16,436e0 <_malloc_trim_r+0x70>
   436c8:	000b883a 	mov	r5,zero
   436cc:	9009883a 	mov	r4,r18
   436d0:	0042f2c0 	call	42f2c <_sbrk_r>
   436d4:	98c00217 	ldw	r3,8(r19)
   436d8:	1c47883a 	add	r3,r3,r17
   436dc:	10c00a26 	beq	r2,r3,43708 <_malloc_trim_r+0x98>
   436e0:	9009883a 	mov	r4,r18
   436e4:	00443700 	call	44370 <__malloc_unlock>
   436e8:	0005883a 	mov	r2,zero
   436ec:	dfc00417 	ldw	ra,16(sp)
   436f0:	dcc00317 	ldw	r19,12(sp)
   436f4:	dc800217 	ldw	r18,8(sp)
   436f8:	dc400117 	ldw	r17,4(sp)
   436fc:	dc000017 	ldw	r16,0(sp)
   43700:	dec00504 	addi	sp,sp,20
   43704:	f800283a 	ret
   43708:	040bc83a 	sub	r5,zero,r16
   4370c:	9009883a 	mov	r4,r18
   43710:	0042f2c0 	call	42f2c <_sbrk_r>
   43714:	00ffffc4 	movi	r3,-1
   43718:	10c00d26 	beq	r2,r3,43750 <_malloc_trim_r+0xe0>
   4371c:	00c00174 	movhi	r3,5
   43720:	18e6d704 	addi	r3,r3,-25764
   43724:	18800017 	ldw	r2,0(r3)
   43728:	99000217 	ldw	r4,8(r19)
   4372c:	8c23c83a 	sub	r17,r17,r16
   43730:	8c400054 	ori	r17,r17,1
   43734:	1421c83a 	sub	r16,r2,r16
   43738:	24400115 	stw	r17,4(r4)
   4373c:	9009883a 	mov	r4,r18
   43740:	1c000015 	stw	r16,0(r3)
   43744:	00443700 	call	44370 <__malloc_unlock>
   43748:	00800044 	movi	r2,1
   4374c:	003fe706 	br	436ec <__alt_data_end+0xfffdc5ec>
   43750:	000b883a 	mov	r5,zero
   43754:	9009883a 	mov	r4,r18
   43758:	0042f2c0 	call	42f2c <_sbrk_r>
   4375c:	99000217 	ldw	r4,8(r19)
   43760:	014003c4 	movi	r5,15
   43764:	1107c83a 	sub	r3,r2,r4
   43768:	28ffdd0e 	bge	r5,r3,436e0 <__alt_data_end+0xfffdc5e0>
   4376c:	01400174 	movhi	r5,5
   43770:	29601804 	addi	r5,r5,-32672
   43774:	29400017 	ldw	r5,0(r5)
   43778:	18c00054 	ori	r3,r3,1
   4377c:	20c00115 	stw	r3,4(r4)
   43780:	00c00174 	movhi	r3,5
   43784:	1145c83a 	sub	r2,r2,r5
   43788:	18e6d704 	addi	r3,r3,-25764
   4378c:	18800015 	stw	r2,0(r3)
   43790:	003fd306 	br	436e0 <__alt_data_end+0xfffdc5e0>

00043794 <_free_r>:
   43794:	28004126 	beq	r5,zero,4389c <_free_r+0x108>
   43798:	defffd04 	addi	sp,sp,-12
   4379c:	dc400115 	stw	r17,4(sp)
   437a0:	dc000015 	stw	r16,0(sp)
   437a4:	2023883a 	mov	r17,r4
   437a8:	2821883a 	mov	r16,r5
   437ac:	dfc00215 	stw	ra,8(sp)
   437b0:	004434c0 	call	4434c <__malloc_lock>
   437b4:	81ffff17 	ldw	r7,-4(r16)
   437b8:	00bfff84 	movi	r2,-2
   437bc:	01000134 	movhi	r4,4
   437c0:	81bffe04 	addi	r6,r16,-8
   437c4:	3884703a 	and	r2,r7,r2
   437c8:	211a8f04 	addi	r4,r4,27196
   437cc:	308b883a 	add	r5,r6,r2
   437d0:	2a400117 	ldw	r9,4(r5)
   437d4:	22000217 	ldw	r8,8(r4)
   437d8:	00ffff04 	movi	r3,-4
   437dc:	48c6703a 	and	r3,r9,r3
   437e0:	2a005726 	beq	r5,r8,43940 <_free_r+0x1ac>
   437e4:	28c00115 	stw	r3,4(r5)
   437e8:	39c0004c 	andi	r7,r7,1
   437ec:	3800091e 	bne	r7,zero,43814 <_free_r+0x80>
   437f0:	823ffe17 	ldw	r8,-8(r16)
   437f4:	22400204 	addi	r9,r4,8
   437f8:	320dc83a 	sub	r6,r6,r8
   437fc:	31c00217 	ldw	r7,8(r6)
   43800:	1205883a 	add	r2,r2,r8
   43804:	3a406526 	beq	r7,r9,4399c <_free_r+0x208>
   43808:	32000317 	ldw	r8,12(r6)
   4380c:	3a000315 	stw	r8,12(r7)
   43810:	41c00215 	stw	r7,8(r8)
   43814:	28cf883a 	add	r7,r5,r3
   43818:	39c00117 	ldw	r7,4(r7)
   4381c:	39c0004c 	andi	r7,r7,1
   43820:	38003a26 	beq	r7,zero,4390c <_free_r+0x178>
   43824:	10c00054 	ori	r3,r2,1
   43828:	30c00115 	stw	r3,4(r6)
   4382c:	3087883a 	add	r3,r6,r2
   43830:	18800015 	stw	r2,0(r3)
   43834:	00c07fc4 	movi	r3,511
   43838:	18801936 	bltu	r3,r2,438a0 <_free_r+0x10c>
   4383c:	1004d0fa 	srli	r2,r2,3
   43840:	01c00044 	movi	r7,1
   43844:	21400117 	ldw	r5,4(r4)
   43848:	10c00044 	addi	r3,r2,1
   4384c:	18c7883a 	add	r3,r3,r3
   43850:	1005d0ba 	srai	r2,r2,2
   43854:	18c7883a 	add	r3,r3,r3
   43858:	18c7883a 	add	r3,r3,r3
   4385c:	1907883a 	add	r3,r3,r4
   43860:	3884983a 	sll	r2,r7,r2
   43864:	19c00017 	ldw	r7,0(r3)
   43868:	1a3ffe04 	addi	r8,r3,-8
   4386c:	1144b03a 	or	r2,r2,r5
   43870:	32000315 	stw	r8,12(r6)
   43874:	31c00215 	stw	r7,8(r6)
   43878:	20800115 	stw	r2,4(r4)
   4387c:	19800015 	stw	r6,0(r3)
   43880:	39800315 	stw	r6,12(r7)
   43884:	8809883a 	mov	r4,r17
   43888:	dfc00217 	ldw	ra,8(sp)
   4388c:	dc400117 	ldw	r17,4(sp)
   43890:	dc000017 	ldw	r16,0(sp)
   43894:	dec00304 	addi	sp,sp,12
   43898:	00443701 	jmpi	44370 <__malloc_unlock>
   4389c:	f800283a 	ret
   438a0:	100ad27a 	srli	r5,r2,9
   438a4:	00c00104 	movi	r3,4
   438a8:	19404a36 	bltu	r3,r5,439d4 <_free_r+0x240>
   438ac:	100ad1ba 	srli	r5,r2,6
   438b0:	28c00e44 	addi	r3,r5,57
   438b4:	18c7883a 	add	r3,r3,r3
   438b8:	29400e04 	addi	r5,r5,56
   438bc:	18c7883a 	add	r3,r3,r3
   438c0:	18c7883a 	add	r3,r3,r3
   438c4:	1909883a 	add	r4,r3,r4
   438c8:	20c00017 	ldw	r3,0(r4)
   438cc:	01c00134 	movhi	r7,4
   438d0:	213ffe04 	addi	r4,r4,-8
   438d4:	39da8f04 	addi	r7,r7,27196
   438d8:	20c04426 	beq	r4,r3,439ec <_free_r+0x258>
   438dc:	01ffff04 	movi	r7,-4
   438e0:	19400117 	ldw	r5,4(r3)
   438e4:	29ca703a 	and	r5,r5,r7
   438e8:	1140022e 	bgeu	r2,r5,438f4 <_free_r+0x160>
   438ec:	18c00217 	ldw	r3,8(r3)
   438f0:	20fffb1e 	bne	r4,r3,438e0 <__alt_data_end+0xfffdc7e0>
   438f4:	19000317 	ldw	r4,12(r3)
   438f8:	31000315 	stw	r4,12(r6)
   438fc:	30c00215 	stw	r3,8(r6)
   43900:	21800215 	stw	r6,8(r4)
   43904:	19800315 	stw	r6,12(r3)
   43908:	003fde06 	br	43884 <__alt_data_end+0xfffdc784>
   4390c:	29c00217 	ldw	r7,8(r5)
   43910:	10c5883a 	add	r2,r2,r3
   43914:	00c00134 	movhi	r3,4
   43918:	18da9104 	addi	r3,r3,27204
   4391c:	38c03b26 	beq	r7,r3,43a0c <_free_r+0x278>
   43920:	2a000317 	ldw	r8,12(r5)
   43924:	11400054 	ori	r5,r2,1
   43928:	3087883a 	add	r3,r6,r2
   4392c:	3a000315 	stw	r8,12(r7)
   43930:	41c00215 	stw	r7,8(r8)
   43934:	31400115 	stw	r5,4(r6)
   43938:	18800015 	stw	r2,0(r3)
   4393c:	003fbd06 	br	43834 <__alt_data_end+0xfffdc734>
   43940:	39c0004c 	andi	r7,r7,1
   43944:	10c5883a 	add	r2,r2,r3
   43948:	3800071e 	bne	r7,zero,43968 <_free_r+0x1d4>
   4394c:	81fffe17 	ldw	r7,-8(r16)
   43950:	31cdc83a 	sub	r6,r6,r7
   43954:	30c00317 	ldw	r3,12(r6)
   43958:	31400217 	ldw	r5,8(r6)
   4395c:	11c5883a 	add	r2,r2,r7
   43960:	28c00315 	stw	r3,12(r5)
   43964:	19400215 	stw	r5,8(r3)
   43968:	10c00054 	ori	r3,r2,1
   4396c:	30c00115 	stw	r3,4(r6)
   43970:	00c00174 	movhi	r3,5
   43974:	18e01904 	addi	r3,r3,-32668
   43978:	18c00017 	ldw	r3,0(r3)
   4397c:	21800215 	stw	r6,8(r4)
   43980:	10ffc036 	bltu	r2,r3,43884 <__alt_data_end+0xfffdc784>
   43984:	00800174 	movhi	r2,5
   43988:	10a6ce04 	addi	r2,r2,-25800
   4398c:	11400017 	ldw	r5,0(r2)
   43990:	8809883a 	mov	r4,r17
   43994:	00436700 	call	43670 <_malloc_trim_r>
   43998:	003fba06 	br	43884 <__alt_data_end+0xfffdc784>
   4399c:	28c9883a 	add	r4,r5,r3
   439a0:	21000117 	ldw	r4,4(r4)
   439a4:	2100004c 	andi	r4,r4,1
   439a8:	2000391e 	bne	r4,zero,43a90 <_free_r+0x2fc>
   439ac:	29c00217 	ldw	r7,8(r5)
   439b0:	29000317 	ldw	r4,12(r5)
   439b4:	1885883a 	add	r2,r3,r2
   439b8:	10c00054 	ori	r3,r2,1
   439bc:	39000315 	stw	r4,12(r7)
   439c0:	21c00215 	stw	r7,8(r4)
   439c4:	30c00115 	stw	r3,4(r6)
   439c8:	308d883a 	add	r6,r6,r2
   439cc:	30800015 	stw	r2,0(r6)
   439d0:	003fac06 	br	43884 <__alt_data_end+0xfffdc784>
   439d4:	00c00504 	movi	r3,20
   439d8:	19401536 	bltu	r3,r5,43a30 <_free_r+0x29c>
   439dc:	28c01704 	addi	r3,r5,92
   439e0:	18c7883a 	add	r3,r3,r3
   439e4:	294016c4 	addi	r5,r5,91
   439e8:	003fb406 	br	438bc <__alt_data_end+0xfffdc7bc>
   439ec:	280bd0ba 	srai	r5,r5,2
   439f0:	00c00044 	movi	r3,1
   439f4:	38800117 	ldw	r2,4(r7)
   439f8:	194a983a 	sll	r5,r3,r5
   439fc:	2007883a 	mov	r3,r4
   43a00:	2884b03a 	or	r2,r5,r2
   43a04:	38800115 	stw	r2,4(r7)
   43a08:	003fbb06 	br	438f8 <__alt_data_end+0xfffdc7f8>
   43a0c:	21800515 	stw	r6,20(r4)
   43a10:	21800415 	stw	r6,16(r4)
   43a14:	10c00054 	ori	r3,r2,1
   43a18:	31c00315 	stw	r7,12(r6)
   43a1c:	31c00215 	stw	r7,8(r6)
   43a20:	30c00115 	stw	r3,4(r6)
   43a24:	308d883a 	add	r6,r6,r2
   43a28:	30800015 	stw	r2,0(r6)
   43a2c:	003f9506 	br	43884 <__alt_data_end+0xfffdc784>
   43a30:	00c01504 	movi	r3,84
   43a34:	19400536 	bltu	r3,r5,43a4c <_free_r+0x2b8>
   43a38:	100ad33a 	srli	r5,r2,12
   43a3c:	28c01bc4 	addi	r3,r5,111
   43a40:	18c7883a 	add	r3,r3,r3
   43a44:	29401b84 	addi	r5,r5,110
   43a48:	003f9c06 	br	438bc <__alt_data_end+0xfffdc7bc>
   43a4c:	00c05504 	movi	r3,340
   43a50:	19400536 	bltu	r3,r5,43a68 <_free_r+0x2d4>
   43a54:	100ad3fa 	srli	r5,r2,15
   43a58:	28c01e04 	addi	r3,r5,120
   43a5c:	18c7883a 	add	r3,r3,r3
   43a60:	29401dc4 	addi	r5,r5,119
   43a64:	003f9506 	br	438bc <__alt_data_end+0xfffdc7bc>
   43a68:	00c15504 	movi	r3,1364
   43a6c:	19400536 	bltu	r3,r5,43a84 <_free_r+0x2f0>
   43a70:	100ad4ba 	srli	r5,r2,18
   43a74:	28c01f44 	addi	r3,r5,125
   43a78:	18c7883a 	add	r3,r3,r3
   43a7c:	29401f04 	addi	r5,r5,124
   43a80:	003f8e06 	br	438bc <__alt_data_end+0xfffdc7bc>
   43a84:	00c03f84 	movi	r3,254
   43a88:	01401f84 	movi	r5,126
   43a8c:	003f8b06 	br	438bc <__alt_data_end+0xfffdc7bc>
   43a90:	10c00054 	ori	r3,r2,1
   43a94:	30c00115 	stw	r3,4(r6)
   43a98:	308d883a 	add	r6,r6,r2
   43a9c:	30800015 	stw	r2,0(r6)
   43aa0:	003f7806 	br	43884 <__alt_data_end+0xfffdc784>

00043aa4 <_lseek_r>:
   43aa4:	defffd04 	addi	sp,sp,-12
   43aa8:	2805883a 	mov	r2,r5
   43aac:	dc000015 	stw	r16,0(sp)
   43ab0:	04000174 	movhi	r16,5
   43ab4:	dc400115 	stw	r17,4(sp)
   43ab8:	300b883a 	mov	r5,r6
   43abc:	8426cf04 	addi	r16,r16,-25796
   43ac0:	2023883a 	mov	r17,r4
   43ac4:	380d883a 	mov	r6,r7
   43ac8:	1009883a 	mov	r4,r2
   43acc:	dfc00215 	stw	ra,8(sp)
   43ad0:	80000015 	stw	zero,0(r16)
   43ad4:	00441fc0 	call	441fc <lseek>
   43ad8:	00ffffc4 	movi	r3,-1
   43adc:	10c00526 	beq	r2,r3,43af4 <_lseek_r+0x50>
   43ae0:	dfc00217 	ldw	ra,8(sp)
   43ae4:	dc400117 	ldw	r17,4(sp)
   43ae8:	dc000017 	ldw	r16,0(sp)
   43aec:	dec00304 	addi	sp,sp,12
   43af0:	f800283a 	ret
   43af4:	80c00017 	ldw	r3,0(r16)
   43af8:	183ff926 	beq	r3,zero,43ae0 <__alt_data_end+0xfffdc9e0>
   43afc:	88c00015 	stw	r3,0(r17)
   43b00:	003ff706 	br	43ae0 <__alt_data_end+0xfffdc9e0>

00043b04 <__smakebuf_r>:
   43b04:	2880030b 	ldhu	r2,12(r5)
   43b08:	10c0008c 	andi	r3,r2,2
   43b0c:	1800411e 	bne	r3,zero,43c14 <__smakebuf_r+0x110>
   43b10:	deffec04 	addi	sp,sp,-80
   43b14:	dc000f15 	stw	r16,60(sp)
   43b18:	2821883a 	mov	r16,r5
   43b1c:	2940038f 	ldh	r5,14(r5)
   43b20:	dc401015 	stw	r17,64(sp)
   43b24:	dfc01315 	stw	ra,76(sp)
   43b28:	dcc01215 	stw	r19,72(sp)
   43b2c:	dc801115 	stw	r18,68(sp)
   43b30:	2023883a 	mov	r17,r4
   43b34:	28001c16 	blt	r5,zero,43ba8 <__smakebuf_r+0xa4>
   43b38:	d80d883a 	mov	r6,sp
   43b3c:	0043d200 	call	43d20 <_fstat_r>
   43b40:	10001816 	blt	r2,zero,43ba4 <__smakebuf_r+0xa0>
   43b44:	d8800117 	ldw	r2,4(sp)
   43b48:	00e00014 	movui	r3,32768
   43b4c:	10bc000c 	andi	r2,r2,61440
   43b50:	14c80020 	cmpeqi	r19,r2,8192
   43b54:	10c03726 	beq	r2,r3,43c34 <__smakebuf_r+0x130>
   43b58:	80c0030b 	ldhu	r3,12(r16)
   43b5c:	18c20014 	ori	r3,r3,2048
   43b60:	80c0030d 	sth	r3,12(r16)
   43b64:	00c80004 	movi	r3,8192
   43b68:	10c0521e 	bne	r2,r3,43cb4 <__smakebuf_r+0x1b0>
   43b6c:	8140038f 	ldh	r5,14(r16)
   43b70:	8809883a 	mov	r4,r17
   43b74:	0043d7c0 	call	43d7c <_isatty_r>
   43b78:	10004c26 	beq	r2,zero,43cac <__smakebuf_r+0x1a8>
   43b7c:	8080030b 	ldhu	r2,12(r16)
   43b80:	80c010c4 	addi	r3,r16,67
   43b84:	80c00015 	stw	r3,0(r16)
   43b88:	10800054 	ori	r2,r2,1
   43b8c:	8080030d 	sth	r2,12(r16)
   43b90:	00800044 	movi	r2,1
   43b94:	80c00415 	stw	r3,16(r16)
   43b98:	80800515 	stw	r2,20(r16)
   43b9c:	04810004 	movi	r18,1024
   43ba0:	00000706 	br	43bc0 <__smakebuf_r+0xbc>
   43ba4:	8080030b 	ldhu	r2,12(r16)
   43ba8:	10c0200c 	andi	r3,r2,128
   43bac:	18001f1e 	bne	r3,zero,43c2c <__smakebuf_r+0x128>
   43bb0:	04810004 	movi	r18,1024
   43bb4:	10820014 	ori	r2,r2,2048
   43bb8:	8080030d 	sth	r2,12(r16)
   43bbc:	0027883a 	mov	r19,zero
   43bc0:	900b883a 	mov	r5,r18
   43bc4:	8809883a 	mov	r4,r17
   43bc8:	0041d0c0 	call	41d0c <_malloc_r>
   43bcc:	10002c26 	beq	r2,zero,43c80 <__smakebuf_r+0x17c>
   43bd0:	80c0030b 	ldhu	r3,12(r16)
   43bd4:	01000134 	movhi	r4,4
   43bd8:	2104cc04 	addi	r4,r4,4912
   43bdc:	89000f15 	stw	r4,60(r17)
   43be0:	18c02014 	ori	r3,r3,128
   43be4:	80c0030d 	sth	r3,12(r16)
   43be8:	80800015 	stw	r2,0(r16)
   43bec:	80800415 	stw	r2,16(r16)
   43bf0:	84800515 	stw	r18,20(r16)
   43bf4:	98001a1e 	bne	r19,zero,43c60 <__smakebuf_r+0x15c>
   43bf8:	dfc01317 	ldw	ra,76(sp)
   43bfc:	dcc01217 	ldw	r19,72(sp)
   43c00:	dc801117 	ldw	r18,68(sp)
   43c04:	dc401017 	ldw	r17,64(sp)
   43c08:	dc000f17 	ldw	r16,60(sp)
   43c0c:	dec01404 	addi	sp,sp,80
   43c10:	f800283a 	ret
   43c14:	288010c4 	addi	r2,r5,67
   43c18:	28800015 	stw	r2,0(r5)
   43c1c:	28800415 	stw	r2,16(r5)
   43c20:	00800044 	movi	r2,1
   43c24:	28800515 	stw	r2,20(r5)
   43c28:	f800283a 	ret
   43c2c:	04801004 	movi	r18,64
   43c30:	003fe006 	br	43bb4 <__alt_data_end+0xfffdcab4>
   43c34:	81000a17 	ldw	r4,40(r16)
   43c38:	00c00134 	movhi	r3,4
   43c3c:	18cc1604 	addi	r3,r3,12376
   43c40:	20ffc51e 	bne	r4,r3,43b58 <__alt_data_end+0xfffdca58>
   43c44:	8080030b 	ldhu	r2,12(r16)
   43c48:	04810004 	movi	r18,1024
   43c4c:	84801315 	stw	r18,76(r16)
   43c50:	1484b03a 	or	r2,r2,r18
   43c54:	8080030d 	sth	r2,12(r16)
   43c58:	0027883a 	mov	r19,zero
   43c5c:	003fd806 	br	43bc0 <__alt_data_end+0xfffdcac0>
   43c60:	8140038f 	ldh	r5,14(r16)
   43c64:	8809883a 	mov	r4,r17
   43c68:	0043d7c0 	call	43d7c <_isatty_r>
   43c6c:	103fe226 	beq	r2,zero,43bf8 <__alt_data_end+0xfffdcaf8>
   43c70:	8080030b 	ldhu	r2,12(r16)
   43c74:	10800054 	ori	r2,r2,1
   43c78:	8080030d 	sth	r2,12(r16)
   43c7c:	003fde06 	br	43bf8 <__alt_data_end+0xfffdcaf8>
   43c80:	8080030b 	ldhu	r2,12(r16)
   43c84:	10c0800c 	andi	r3,r2,512
   43c88:	183fdb1e 	bne	r3,zero,43bf8 <__alt_data_end+0xfffdcaf8>
   43c8c:	10800094 	ori	r2,r2,2
   43c90:	80c010c4 	addi	r3,r16,67
   43c94:	8080030d 	sth	r2,12(r16)
   43c98:	00800044 	movi	r2,1
   43c9c:	80c00015 	stw	r3,0(r16)
   43ca0:	80c00415 	stw	r3,16(r16)
   43ca4:	80800515 	stw	r2,20(r16)
   43ca8:	003fd306 	br	43bf8 <__alt_data_end+0xfffdcaf8>
   43cac:	04810004 	movi	r18,1024
   43cb0:	003fc306 	br	43bc0 <__alt_data_end+0xfffdcac0>
   43cb4:	0027883a 	mov	r19,zero
   43cb8:	04810004 	movi	r18,1024
   43cbc:	003fc006 	br	43bc0 <__alt_data_end+0xfffdcac0>

00043cc0 <_read_r>:
   43cc0:	defffd04 	addi	sp,sp,-12
   43cc4:	2805883a 	mov	r2,r5
   43cc8:	dc000015 	stw	r16,0(sp)
   43ccc:	04000174 	movhi	r16,5
   43cd0:	dc400115 	stw	r17,4(sp)
   43cd4:	300b883a 	mov	r5,r6
   43cd8:	8426cf04 	addi	r16,r16,-25796
   43cdc:	2023883a 	mov	r17,r4
   43ce0:	380d883a 	mov	r6,r7
   43ce4:	1009883a 	mov	r4,r2
   43ce8:	dfc00215 	stw	ra,8(sp)
   43cec:	80000015 	stw	zero,0(r16)
   43cf0:	00443d00 	call	443d0 <read>
   43cf4:	00ffffc4 	movi	r3,-1
   43cf8:	10c00526 	beq	r2,r3,43d10 <_read_r+0x50>
   43cfc:	dfc00217 	ldw	ra,8(sp)
   43d00:	dc400117 	ldw	r17,4(sp)
   43d04:	dc000017 	ldw	r16,0(sp)
   43d08:	dec00304 	addi	sp,sp,12
   43d0c:	f800283a 	ret
   43d10:	80c00017 	ldw	r3,0(r16)
   43d14:	183ff926 	beq	r3,zero,43cfc <__alt_data_end+0xfffdcbfc>
   43d18:	88c00015 	stw	r3,0(r17)
   43d1c:	003ff706 	br	43cfc <__alt_data_end+0xfffdcbfc>

00043d20 <_fstat_r>:
   43d20:	defffd04 	addi	sp,sp,-12
   43d24:	2805883a 	mov	r2,r5
   43d28:	dc000015 	stw	r16,0(sp)
   43d2c:	04000174 	movhi	r16,5
   43d30:	dc400115 	stw	r17,4(sp)
   43d34:	8426cf04 	addi	r16,r16,-25796
   43d38:	2023883a 	mov	r17,r4
   43d3c:	300b883a 	mov	r5,r6
   43d40:	1009883a 	mov	r4,r2
   43d44:	dfc00215 	stw	ra,8(sp)
   43d48:	80000015 	stw	zero,0(r16)
   43d4c:	0043f440 	call	43f44 <fstat>
   43d50:	00ffffc4 	movi	r3,-1
   43d54:	10c00526 	beq	r2,r3,43d6c <_fstat_r+0x4c>
   43d58:	dfc00217 	ldw	ra,8(sp)
   43d5c:	dc400117 	ldw	r17,4(sp)
   43d60:	dc000017 	ldw	r16,0(sp)
   43d64:	dec00304 	addi	sp,sp,12
   43d68:	f800283a 	ret
   43d6c:	80c00017 	ldw	r3,0(r16)
   43d70:	183ff926 	beq	r3,zero,43d58 <__alt_data_end+0xfffdcc58>
   43d74:	88c00015 	stw	r3,0(r17)
   43d78:	003ff706 	br	43d58 <__alt_data_end+0xfffdcc58>

00043d7c <_isatty_r>:
   43d7c:	defffd04 	addi	sp,sp,-12
   43d80:	dc000015 	stw	r16,0(sp)
   43d84:	04000174 	movhi	r16,5
   43d88:	dc400115 	stw	r17,4(sp)
   43d8c:	8426cf04 	addi	r16,r16,-25796
   43d90:	2023883a 	mov	r17,r4
   43d94:	2809883a 	mov	r4,r5
   43d98:	dfc00215 	stw	ra,8(sp)
   43d9c:	80000015 	stw	zero,0(r16)
   43da0:	00440300 	call	44030 <isatty>
   43da4:	00ffffc4 	movi	r3,-1
   43da8:	10c00526 	beq	r2,r3,43dc0 <_isatty_r+0x44>
   43dac:	dfc00217 	ldw	ra,8(sp)
   43db0:	dc400117 	ldw	r17,4(sp)
   43db4:	dc000017 	ldw	r16,0(sp)
   43db8:	dec00304 	addi	sp,sp,12
   43dbc:	f800283a 	ret
   43dc0:	80c00017 	ldw	r3,0(r16)
   43dc4:	183ff926 	beq	r3,zero,43dac <__alt_data_end+0xfffdccac>
   43dc8:	88c00015 	stw	r3,0(r17)
   43dcc:	003ff706 	br	43dac <__alt_data_end+0xfffdccac>

00043dd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43dd0:	defffe04 	addi	sp,sp,-8
   43dd4:	dfc00115 	stw	ra,4(sp)
   43dd8:	df000015 	stw	fp,0(sp)
   43ddc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43de0:	d0a00c17 	ldw	r2,-32720(gp)
   43de4:	10000326 	beq	r2,zero,43df4 <alt_get_errno+0x24>
   43de8:	d0a00c17 	ldw	r2,-32720(gp)
   43dec:	103ee83a 	callr	r2
   43df0:	00000106 	br	43df8 <alt_get_errno+0x28>
   43df4:	d0a6bc04 	addi	r2,gp,-25872
}
   43df8:	e037883a 	mov	sp,fp
   43dfc:	dfc00117 	ldw	ra,4(sp)
   43e00:	df000017 	ldw	fp,0(sp)
   43e04:	dec00204 	addi	sp,sp,8
   43e08:	f800283a 	ret

00043e0c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   43e0c:	defffb04 	addi	sp,sp,-20
   43e10:	dfc00415 	stw	ra,16(sp)
   43e14:	df000315 	stw	fp,12(sp)
   43e18:	df000304 	addi	fp,sp,12
   43e1c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   43e20:	e0bfff17 	ldw	r2,-4(fp)
   43e24:	10000616 	blt	r2,zero,43e40 <close+0x34>
   43e28:	e0bfff17 	ldw	r2,-4(fp)
   43e2c:	10c00324 	muli	r3,r2,12
   43e30:	00800134 	movhi	r2,4
   43e34:	109b9b04 	addi	r2,r2,28268
   43e38:	1885883a 	add	r2,r3,r2
   43e3c:	00000106 	br	43e44 <close+0x38>
   43e40:	0005883a 	mov	r2,zero
   43e44:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   43e48:	e0bffd17 	ldw	r2,-12(fp)
   43e4c:	10001926 	beq	r2,zero,43eb4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   43e50:	e0bffd17 	ldw	r2,-12(fp)
   43e54:	10800017 	ldw	r2,0(r2)
   43e58:	10800417 	ldw	r2,16(r2)
   43e5c:	10000626 	beq	r2,zero,43e78 <close+0x6c>
   43e60:	e0bffd17 	ldw	r2,-12(fp)
   43e64:	10800017 	ldw	r2,0(r2)
   43e68:	10800417 	ldw	r2,16(r2)
   43e6c:	e13ffd17 	ldw	r4,-12(fp)
   43e70:	103ee83a 	callr	r2
   43e74:	00000106 	br	43e7c <close+0x70>
   43e78:	0005883a 	mov	r2,zero
   43e7c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43e80:	e13fff17 	ldw	r4,-4(fp)
   43e84:	00444cc0 	call	444cc <alt_release_fd>
    if (rval < 0)
   43e88:	e0bffe17 	ldw	r2,-8(fp)
   43e8c:	1000070e 	bge	r2,zero,43eac <close+0xa0>
    {
      ALT_ERRNO = -rval;
   43e90:	0043dd00 	call	43dd0 <alt_get_errno>
   43e94:	1007883a 	mov	r3,r2
   43e98:	e0bffe17 	ldw	r2,-8(fp)
   43e9c:	0085c83a 	sub	r2,zero,r2
   43ea0:	18800015 	stw	r2,0(r3)
      return -1;
   43ea4:	00bfffc4 	movi	r2,-1
   43ea8:	00000706 	br	43ec8 <close+0xbc>
    }
    return 0;
   43eac:	0005883a 	mov	r2,zero
   43eb0:	00000506 	br	43ec8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43eb4:	0043dd00 	call	43dd0 <alt_get_errno>
   43eb8:	1007883a 	mov	r3,r2
   43ebc:	00801444 	movi	r2,81
   43ec0:	18800015 	stw	r2,0(r3)
    return -1;
   43ec4:	00bfffc4 	movi	r2,-1
  }
}
   43ec8:	e037883a 	mov	sp,fp
   43ecc:	dfc00117 	ldw	ra,4(sp)
   43ed0:	df000017 	ldw	fp,0(sp)
   43ed4:	dec00204 	addi	sp,sp,8
   43ed8:	f800283a 	ret

00043edc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43edc:	defffc04 	addi	sp,sp,-16
   43ee0:	df000315 	stw	fp,12(sp)
   43ee4:	df000304 	addi	fp,sp,12
   43ee8:	e13ffd15 	stw	r4,-12(fp)
   43eec:	e17ffe15 	stw	r5,-8(fp)
   43ef0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   43ef4:	e0bfff17 	ldw	r2,-4(fp)
}
   43ef8:	e037883a 	mov	sp,fp
   43efc:	df000017 	ldw	fp,0(sp)
   43f00:	dec00104 	addi	sp,sp,4
   43f04:	f800283a 	ret

00043f08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43f08:	defffe04 	addi	sp,sp,-8
   43f0c:	dfc00115 	stw	ra,4(sp)
   43f10:	df000015 	stw	fp,0(sp)
   43f14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43f18:	d0a00c17 	ldw	r2,-32720(gp)
   43f1c:	10000326 	beq	r2,zero,43f2c <alt_get_errno+0x24>
   43f20:	d0a00c17 	ldw	r2,-32720(gp)
   43f24:	103ee83a 	callr	r2
   43f28:	00000106 	br	43f30 <alt_get_errno+0x28>
   43f2c:	d0a6bc04 	addi	r2,gp,-25872
}
   43f30:	e037883a 	mov	sp,fp
   43f34:	dfc00117 	ldw	ra,4(sp)
   43f38:	df000017 	ldw	fp,0(sp)
   43f3c:	dec00204 	addi	sp,sp,8
   43f40:	f800283a 	ret

00043f44 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   43f44:	defffb04 	addi	sp,sp,-20
   43f48:	dfc00415 	stw	ra,16(sp)
   43f4c:	df000315 	stw	fp,12(sp)
   43f50:	df000304 	addi	fp,sp,12
   43f54:	e13ffe15 	stw	r4,-8(fp)
   43f58:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43f5c:	e0bffe17 	ldw	r2,-8(fp)
   43f60:	10000616 	blt	r2,zero,43f7c <fstat+0x38>
   43f64:	e0bffe17 	ldw	r2,-8(fp)
   43f68:	10c00324 	muli	r3,r2,12
   43f6c:	00800134 	movhi	r2,4
   43f70:	109b9b04 	addi	r2,r2,28268
   43f74:	1885883a 	add	r2,r3,r2
   43f78:	00000106 	br	43f80 <fstat+0x3c>
   43f7c:	0005883a 	mov	r2,zero
   43f80:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   43f84:	e0bffd17 	ldw	r2,-12(fp)
   43f88:	10001026 	beq	r2,zero,43fcc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   43f8c:	e0bffd17 	ldw	r2,-12(fp)
   43f90:	10800017 	ldw	r2,0(r2)
   43f94:	10800817 	ldw	r2,32(r2)
   43f98:	10000726 	beq	r2,zero,43fb8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   43f9c:	e0bffd17 	ldw	r2,-12(fp)
   43fa0:	10800017 	ldw	r2,0(r2)
   43fa4:	10800817 	ldw	r2,32(r2)
   43fa8:	e17fff17 	ldw	r5,-4(fp)
   43fac:	e13ffd17 	ldw	r4,-12(fp)
   43fb0:	103ee83a 	callr	r2
   43fb4:	00000a06 	br	43fe0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43fb8:	e0bfff17 	ldw	r2,-4(fp)
   43fbc:	00c80004 	movi	r3,8192
   43fc0:	10c00115 	stw	r3,4(r2)
      return 0;
   43fc4:	0005883a 	mov	r2,zero
   43fc8:	00000506 	br	43fe0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43fcc:	0043f080 	call	43f08 <alt_get_errno>
   43fd0:	1007883a 	mov	r3,r2
   43fd4:	00801444 	movi	r2,81
   43fd8:	18800015 	stw	r2,0(r3)
    return -1;
   43fdc:	00bfffc4 	movi	r2,-1
  }
}
   43fe0:	e037883a 	mov	sp,fp
   43fe4:	dfc00117 	ldw	ra,4(sp)
   43fe8:	df000017 	ldw	fp,0(sp)
   43fec:	dec00204 	addi	sp,sp,8
   43ff0:	f800283a 	ret

00043ff4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43ff4:	defffe04 	addi	sp,sp,-8
   43ff8:	dfc00115 	stw	ra,4(sp)
   43ffc:	df000015 	stw	fp,0(sp)
   44000:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44004:	d0a00c17 	ldw	r2,-32720(gp)
   44008:	10000326 	beq	r2,zero,44018 <alt_get_errno+0x24>
   4400c:	d0a00c17 	ldw	r2,-32720(gp)
   44010:	103ee83a 	callr	r2
   44014:	00000106 	br	4401c <alt_get_errno+0x28>
   44018:	d0a6bc04 	addi	r2,gp,-25872
}
   4401c:	e037883a 	mov	sp,fp
   44020:	dfc00117 	ldw	ra,4(sp)
   44024:	df000017 	ldw	fp,0(sp)
   44028:	dec00204 	addi	sp,sp,8
   4402c:	f800283a 	ret

00044030 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   44030:	deffed04 	addi	sp,sp,-76
   44034:	dfc01215 	stw	ra,72(sp)
   44038:	df001115 	stw	fp,68(sp)
   4403c:	df001104 	addi	fp,sp,68
   44040:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   44044:	e0bfff17 	ldw	r2,-4(fp)
   44048:	10000616 	blt	r2,zero,44064 <isatty+0x34>
   4404c:	e0bfff17 	ldw	r2,-4(fp)
   44050:	10c00324 	muli	r3,r2,12
   44054:	00800134 	movhi	r2,4
   44058:	109b9b04 	addi	r2,r2,28268
   4405c:	1885883a 	add	r2,r3,r2
   44060:	00000106 	br	44068 <isatty+0x38>
   44064:	0005883a 	mov	r2,zero
   44068:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4406c:	e0bfef17 	ldw	r2,-68(fp)
   44070:	10000e26 	beq	r2,zero,440ac <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   44074:	e0bfef17 	ldw	r2,-68(fp)
   44078:	10800017 	ldw	r2,0(r2)
   4407c:	10800817 	ldw	r2,32(r2)
   44080:	1000021e 	bne	r2,zero,4408c <isatty+0x5c>
    {
      return 1;
   44084:	00800044 	movi	r2,1
   44088:	00000d06 	br	440c0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4408c:	e0bff004 	addi	r2,fp,-64
   44090:	100b883a 	mov	r5,r2
   44094:	e13fff17 	ldw	r4,-4(fp)
   44098:	0043f440 	call	43f44 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4409c:	e0bff117 	ldw	r2,-60(fp)
   440a0:	10880020 	cmpeqi	r2,r2,8192
   440a4:	10803fcc 	andi	r2,r2,255
   440a8:	00000506 	br	440c0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   440ac:	0043ff40 	call	43ff4 <alt_get_errno>
   440b0:	1007883a 	mov	r3,r2
   440b4:	00801444 	movi	r2,81
   440b8:	18800015 	stw	r2,0(r3)
    return 0;
   440bc:	0005883a 	mov	r2,zero
  }
}
   440c0:	e037883a 	mov	sp,fp
   440c4:	dfc00117 	ldw	ra,4(sp)
   440c8:	df000017 	ldw	fp,0(sp)
   440cc:	dec00204 	addi	sp,sp,8
   440d0:	f800283a 	ret

000440d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   440d4:	defffc04 	addi	sp,sp,-16
   440d8:	df000315 	stw	fp,12(sp)
   440dc:	df000304 	addi	fp,sp,12
   440e0:	e13ffd15 	stw	r4,-12(fp)
   440e4:	e17ffe15 	stw	r5,-8(fp)
   440e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   440ec:	e0fffe17 	ldw	r3,-8(fp)
   440f0:	e0bffd17 	ldw	r2,-12(fp)
   440f4:	18800c26 	beq	r3,r2,44128 <alt_load_section+0x54>
  {
    while( to != end )
   440f8:	00000806 	br	4411c <alt_load_section+0x48>
    {
      *to++ = *from++;
   440fc:	e0bffe17 	ldw	r2,-8(fp)
   44100:	10c00104 	addi	r3,r2,4
   44104:	e0fffe15 	stw	r3,-8(fp)
   44108:	e0fffd17 	ldw	r3,-12(fp)
   4410c:	19000104 	addi	r4,r3,4
   44110:	e13ffd15 	stw	r4,-12(fp)
   44114:	18c00017 	ldw	r3,0(r3)
   44118:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4411c:	e0fffe17 	ldw	r3,-8(fp)
   44120:	e0bfff17 	ldw	r2,-4(fp)
   44124:	18bff51e 	bne	r3,r2,440fc <__alt_data_end+0xfffdcffc>
    {
      *to++ = *from++;
    }
  }
}
   44128:	0001883a 	nop
   4412c:	e037883a 	mov	sp,fp
   44130:	df000017 	ldw	fp,0(sp)
   44134:	dec00104 	addi	sp,sp,4
   44138:	f800283a 	ret

0004413c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4413c:	defffe04 	addi	sp,sp,-8
   44140:	dfc00115 	stw	ra,4(sp)
   44144:	df000015 	stw	fp,0(sp)
   44148:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4414c:	01800174 	movhi	r6,5
   44150:	31a02404 	addi	r6,r6,-32624
   44154:	01400134 	movhi	r5,4
   44158:	29597c04 	addi	r5,r5,26096
   4415c:	01000174 	movhi	r4,5
   44160:	21202404 	addi	r4,r4,-32624
   44164:	00440d40 	call	440d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   44168:	01800134 	movhi	r6,4
   4416c:	31809104 	addi	r6,r6,580
   44170:	01400134 	movhi	r5,4
   44174:	29400804 	addi	r5,r5,32
   44178:	01000134 	movhi	r4,4
   4417c:	21000804 	addi	r4,r4,32
   44180:	00440d40 	call	440d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   44184:	01800134 	movhi	r6,4
   44188:	31997c04 	addi	r6,r6,26096
   4418c:	01400134 	movhi	r5,4
   44190:	29591c04 	addi	r5,r5,25712
   44194:	01000134 	movhi	r4,4
   44198:	21191c04 	addi	r4,r4,25712
   4419c:	00440d40 	call	440d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   441a0:	004535c0 	call	4535c <alt_dcache_flush_all>
  alt_icache_flush_all();
   441a4:	00455440 	call	45544 <alt_icache_flush_all>
}
   441a8:	0001883a 	nop
   441ac:	e037883a 	mov	sp,fp
   441b0:	dfc00117 	ldw	ra,4(sp)
   441b4:	df000017 	ldw	fp,0(sp)
   441b8:	dec00204 	addi	sp,sp,8
   441bc:	f800283a 	ret

000441c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   441c0:	defffe04 	addi	sp,sp,-8
   441c4:	dfc00115 	stw	ra,4(sp)
   441c8:	df000015 	stw	fp,0(sp)
   441cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   441d0:	d0a00c17 	ldw	r2,-32720(gp)
   441d4:	10000326 	beq	r2,zero,441e4 <alt_get_errno+0x24>
   441d8:	d0a00c17 	ldw	r2,-32720(gp)
   441dc:	103ee83a 	callr	r2
   441e0:	00000106 	br	441e8 <alt_get_errno+0x28>
   441e4:	d0a6bc04 	addi	r2,gp,-25872
}
   441e8:	e037883a 	mov	sp,fp
   441ec:	dfc00117 	ldw	ra,4(sp)
   441f0:	df000017 	ldw	fp,0(sp)
   441f4:	dec00204 	addi	sp,sp,8
   441f8:	f800283a 	ret

000441fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   441fc:	defff904 	addi	sp,sp,-28
   44200:	dfc00615 	stw	ra,24(sp)
   44204:	df000515 	stw	fp,20(sp)
   44208:	df000504 	addi	fp,sp,20
   4420c:	e13ffd15 	stw	r4,-12(fp)
   44210:	e17ffe15 	stw	r5,-8(fp)
   44214:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   44218:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4421c:	e0bffd17 	ldw	r2,-12(fp)
   44220:	10000616 	blt	r2,zero,4423c <lseek+0x40>
   44224:	e0bffd17 	ldw	r2,-12(fp)
   44228:	10c00324 	muli	r3,r2,12
   4422c:	00800134 	movhi	r2,4
   44230:	109b9b04 	addi	r2,r2,28268
   44234:	1885883a 	add	r2,r3,r2
   44238:	00000106 	br	44240 <lseek+0x44>
   4423c:	0005883a 	mov	r2,zero
   44240:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   44244:	e0bffc17 	ldw	r2,-16(fp)
   44248:	10001026 	beq	r2,zero,4428c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4424c:	e0bffc17 	ldw	r2,-16(fp)
   44250:	10800017 	ldw	r2,0(r2)
   44254:	10800717 	ldw	r2,28(r2)
   44258:	10000926 	beq	r2,zero,44280 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4425c:	e0bffc17 	ldw	r2,-16(fp)
   44260:	10800017 	ldw	r2,0(r2)
   44264:	10800717 	ldw	r2,28(r2)
   44268:	e1bfff17 	ldw	r6,-4(fp)
   4426c:	e17ffe17 	ldw	r5,-8(fp)
   44270:	e13ffc17 	ldw	r4,-16(fp)
   44274:	103ee83a 	callr	r2
   44278:	e0bffb15 	stw	r2,-20(fp)
   4427c:	00000506 	br	44294 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   44280:	00bfde84 	movi	r2,-134
   44284:	e0bffb15 	stw	r2,-20(fp)
   44288:	00000206 	br	44294 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   4428c:	00bfebc4 	movi	r2,-81
   44290:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   44294:	e0bffb17 	ldw	r2,-20(fp)
   44298:	1000070e 	bge	r2,zero,442b8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4429c:	00441c00 	call	441c0 <alt_get_errno>
   442a0:	1007883a 	mov	r3,r2
   442a4:	e0bffb17 	ldw	r2,-20(fp)
   442a8:	0085c83a 	sub	r2,zero,r2
   442ac:	18800015 	stw	r2,0(r3)
    rc = -1;
   442b0:	00bfffc4 	movi	r2,-1
   442b4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   442b8:	e0bffb17 	ldw	r2,-20(fp)
}
   442bc:	e037883a 	mov	sp,fp
   442c0:	dfc00117 	ldw	ra,4(sp)
   442c4:	df000017 	ldw	fp,0(sp)
   442c8:	dec00204 	addi	sp,sp,8
   442cc:	f800283a 	ret

000442d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   442d0:	defffd04 	addi	sp,sp,-12
   442d4:	dfc00215 	stw	ra,8(sp)
   442d8:	df000115 	stw	fp,4(sp)
   442dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   442e0:	0009883a 	mov	r4,zero
   442e4:	00447480 	call	44748 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   442e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   442ec:	00447800 	call	44780 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   442f0:	01800134 	movhi	r6,4
   442f4:	31997404 	addi	r6,r6,26064
   442f8:	01400134 	movhi	r5,4
   442fc:	29597404 	addi	r5,r5,26064
   44300:	01000134 	movhi	r4,4
   44304:	21197404 	addi	r4,r4,26064
   44308:	00458dc0 	call	458dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4430c:	00454840 	call	45484 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   44310:	01000134 	movhi	r4,4
   44314:	21153904 	addi	r4,r4,21732
   44318:	00460dc0 	call	460dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4431c:	d0a6bd17 	ldw	r2,-25868(gp)
   44320:	d0e6be17 	ldw	r3,-25864(gp)
   44324:	d126bf17 	ldw	r4,-25860(gp)
   44328:	200d883a 	mov	r6,r4
   4432c:	180b883a 	mov	r5,r3
   44330:	1009883a 	mov	r4,r2
   44334:	00402900 	call	40290 <main>
   44338:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4433c:	01000044 	movi	r4,1
   44340:	0043e0c0 	call	43e0c <close>
  exit (result);
   44344:	e13fff17 	ldw	r4,-4(fp)
   44348:	00460f00 	call	460f0 <exit>

0004434c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4434c:	defffe04 	addi	sp,sp,-8
   44350:	df000115 	stw	fp,4(sp)
   44354:	df000104 	addi	fp,sp,4
   44358:	e13fff15 	stw	r4,-4(fp)
}
   4435c:	0001883a 	nop
   44360:	e037883a 	mov	sp,fp
   44364:	df000017 	ldw	fp,0(sp)
   44368:	dec00104 	addi	sp,sp,4
   4436c:	f800283a 	ret

00044370 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   44370:	defffe04 	addi	sp,sp,-8
   44374:	df000115 	stw	fp,4(sp)
   44378:	df000104 	addi	fp,sp,4
   4437c:	e13fff15 	stw	r4,-4(fp)
}
   44380:	0001883a 	nop
   44384:	e037883a 	mov	sp,fp
   44388:	df000017 	ldw	fp,0(sp)
   4438c:	dec00104 	addi	sp,sp,4
   44390:	f800283a 	ret

00044394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44394:	defffe04 	addi	sp,sp,-8
   44398:	dfc00115 	stw	ra,4(sp)
   4439c:	df000015 	stw	fp,0(sp)
   443a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   443a4:	d0a00c17 	ldw	r2,-32720(gp)
   443a8:	10000326 	beq	r2,zero,443b8 <alt_get_errno+0x24>
   443ac:	d0a00c17 	ldw	r2,-32720(gp)
   443b0:	103ee83a 	callr	r2
   443b4:	00000106 	br	443bc <alt_get_errno+0x28>
   443b8:	d0a6bc04 	addi	r2,gp,-25872
}
   443bc:	e037883a 	mov	sp,fp
   443c0:	dfc00117 	ldw	ra,4(sp)
   443c4:	df000017 	ldw	fp,0(sp)
   443c8:	dec00204 	addi	sp,sp,8
   443cc:	f800283a 	ret

000443d0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   443d0:	defff904 	addi	sp,sp,-28
   443d4:	dfc00615 	stw	ra,24(sp)
   443d8:	df000515 	stw	fp,20(sp)
   443dc:	df000504 	addi	fp,sp,20
   443e0:	e13ffd15 	stw	r4,-12(fp)
   443e4:	e17ffe15 	stw	r5,-8(fp)
   443e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   443ec:	e0bffd17 	ldw	r2,-12(fp)
   443f0:	10000616 	blt	r2,zero,4440c <read+0x3c>
   443f4:	e0bffd17 	ldw	r2,-12(fp)
   443f8:	10c00324 	muli	r3,r2,12
   443fc:	00800134 	movhi	r2,4
   44400:	109b9b04 	addi	r2,r2,28268
   44404:	1885883a 	add	r2,r3,r2
   44408:	00000106 	br	44410 <read+0x40>
   4440c:	0005883a 	mov	r2,zero
   44410:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   44414:	e0bffb17 	ldw	r2,-20(fp)
   44418:	10002226 	beq	r2,zero,444a4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4441c:	e0bffb17 	ldw	r2,-20(fp)
   44420:	10800217 	ldw	r2,8(r2)
   44424:	108000cc 	andi	r2,r2,3
   44428:	10800060 	cmpeqi	r2,r2,1
   4442c:	1000181e 	bne	r2,zero,44490 <read+0xc0>
        (fd->dev->read))
   44430:	e0bffb17 	ldw	r2,-20(fp)
   44434:	10800017 	ldw	r2,0(r2)
   44438:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4443c:	10001426 	beq	r2,zero,44490 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   44440:	e0bffb17 	ldw	r2,-20(fp)
   44444:	10800017 	ldw	r2,0(r2)
   44448:	10800517 	ldw	r2,20(r2)
   4444c:	e0ffff17 	ldw	r3,-4(fp)
   44450:	180d883a 	mov	r6,r3
   44454:	e17ffe17 	ldw	r5,-8(fp)
   44458:	e13ffb17 	ldw	r4,-20(fp)
   4445c:	103ee83a 	callr	r2
   44460:	e0bffc15 	stw	r2,-16(fp)
   44464:	e0bffc17 	ldw	r2,-16(fp)
   44468:	1000070e 	bge	r2,zero,44488 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4446c:	00443940 	call	44394 <alt_get_errno>
   44470:	1007883a 	mov	r3,r2
   44474:	e0bffc17 	ldw	r2,-16(fp)
   44478:	0085c83a 	sub	r2,zero,r2
   4447c:	18800015 	stw	r2,0(r3)
          return -1;
   44480:	00bfffc4 	movi	r2,-1
   44484:	00000c06 	br	444b8 <read+0xe8>
        }
        return rval;
   44488:	e0bffc17 	ldw	r2,-16(fp)
   4448c:	00000a06 	br	444b8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   44490:	00443940 	call	44394 <alt_get_errno>
   44494:	1007883a 	mov	r3,r2
   44498:	00800344 	movi	r2,13
   4449c:	18800015 	stw	r2,0(r3)
   444a0:	00000406 	br	444b4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   444a4:	00443940 	call	44394 <alt_get_errno>
   444a8:	1007883a 	mov	r3,r2
   444ac:	00801444 	movi	r2,81
   444b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   444b4:	00bfffc4 	movi	r2,-1
}
   444b8:	e037883a 	mov	sp,fp
   444bc:	dfc00117 	ldw	ra,4(sp)
   444c0:	df000017 	ldw	fp,0(sp)
   444c4:	dec00204 	addi	sp,sp,8
   444c8:	f800283a 	ret

000444cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   444cc:	defffe04 	addi	sp,sp,-8
   444d0:	df000115 	stw	fp,4(sp)
   444d4:	df000104 	addi	fp,sp,4
   444d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   444dc:	e0bfff17 	ldw	r2,-4(fp)
   444e0:	108000d0 	cmplti	r2,r2,3
   444e4:	10000d1e 	bne	r2,zero,4451c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   444e8:	00800134 	movhi	r2,4
   444ec:	109b9b04 	addi	r2,r2,28268
   444f0:	e0ffff17 	ldw	r3,-4(fp)
   444f4:	18c00324 	muli	r3,r3,12
   444f8:	10c5883a 	add	r2,r2,r3
   444fc:	10800204 	addi	r2,r2,8
   44500:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   44504:	00800134 	movhi	r2,4
   44508:	109b9b04 	addi	r2,r2,28268
   4450c:	e0ffff17 	ldw	r3,-4(fp)
   44510:	18c00324 	muli	r3,r3,12
   44514:	10c5883a 	add	r2,r2,r3
   44518:	10000015 	stw	zero,0(r2)
  }
}
   4451c:	0001883a 	nop
   44520:	e037883a 	mov	sp,fp
   44524:	df000017 	ldw	fp,0(sp)
   44528:	dec00104 	addi	sp,sp,4
   4452c:	f800283a 	ret

00044530 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   44530:	defff904 	addi	sp,sp,-28
   44534:	df000615 	stw	fp,24(sp)
   44538:	df000604 	addi	fp,sp,24
   4453c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44540:	0005303a 	rdctl	r2,status
   44544:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44548:	e0fffe17 	ldw	r3,-8(fp)
   4454c:	00bfff84 	movi	r2,-2
   44550:	1884703a 	and	r2,r3,r2
   44554:	1001703a 	wrctl	status,r2
  
  return context;
   44558:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4455c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   44560:	d0a00d17 	ldw	r2,-32716(gp)
   44564:	10c000c4 	addi	r3,r2,3
   44568:	00bfff04 	movi	r2,-4
   4456c:	1884703a 	and	r2,r3,r2
   44570:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   44574:	d0e00d17 	ldw	r3,-32716(gp)
   44578:	e0bfff17 	ldw	r2,-4(fp)
   4457c:	1887883a 	add	r3,r3,r2
   44580:	008001b4 	movhi	r2,6
   44584:	109c4004 	addi	r2,r2,28928
   44588:	10c0062e 	bgeu	r2,r3,445a4 <sbrk+0x74>
   4458c:	e0bffb17 	ldw	r2,-20(fp)
   44590:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44594:	e0bffa17 	ldw	r2,-24(fp)
   44598:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4459c:	00bfffc4 	movi	r2,-1
   445a0:	00000b06 	br	445d0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   445a4:	d0a00d17 	ldw	r2,-32716(gp)
   445a8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   445ac:	d0e00d17 	ldw	r3,-32716(gp)
   445b0:	e0bfff17 	ldw	r2,-4(fp)
   445b4:	1885883a 	add	r2,r3,r2
   445b8:	d0a00d15 	stw	r2,-32716(gp)
   445bc:	e0bffb17 	ldw	r2,-20(fp)
   445c0:	e0bffc15 	stw	r2,-16(fp)
   445c4:	e0bffc17 	ldw	r2,-16(fp)
   445c8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   445cc:	e0bffd17 	ldw	r2,-12(fp)
} 
   445d0:	e037883a 	mov	sp,fp
   445d4:	df000017 	ldw	fp,0(sp)
   445d8:	dec00104 	addi	sp,sp,4
   445dc:	f800283a 	ret

000445e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   445e0:	defffe04 	addi	sp,sp,-8
   445e4:	dfc00115 	stw	ra,4(sp)
   445e8:	df000015 	stw	fp,0(sp)
   445ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   445f0:	d0a00c17 	ldw	r2,-32720(gp)
   445f4:	10000326 	beq	r2,zero,44604 <alt_get_errno+0x24>
   445f8:	d0a00c17 	ldw	r2,-32720(gp)
   445fc:	103ee83a 	callr	r2
   44600:	00000106 	br	44608 <alt_get_errno+0x28>
   44604:	d0a6bc04 	addi	r2,gp,-25872
}
   44608:	e037883a 	mov	sp,fp
   4460c:	dfc00117 	ldw	ra,4(sp)
   44610:	df000017 	ldw	fp,0(sp)
   44614:	dec00204 	addi	sp,sp,8
   44618:	f800283a 	ret

0004461c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4461c:	defff904 	addi	sp,sp,-28
   44620:	dfc00615 	stw	ra,24(sp)
   44624:	df000515 	stw	fp,20(sp)
   44628:	df000504 	addi	fp,sp,20
   4462c:	e13ffd15 	stw	r4,-12(fp)
   44630:	e17ffe15 	stw	r5,-8(fp)
   44634:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   44638:	e0bffd17 	ldw	r2,-12(fp)
   4463c:	10000616 	blt	r2,zero,44658 <write+0x3c>
   44640:	e0bffd17 	ldw	r2,-12(fp)
   44644:	10c00324 	muli	r3,r2,12
   44648:	00800134 	movhi	r2,4
   4464c:	109b9b04 	addi	r2,r2,28268
   44650:	1885883a 	add	r2,r3,r2
   44654:	00000106 	br	4465c <write+0x40>
   44658:	0005883a 	mov	r2,zero
   4465c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   44660:	e0bffb17 	ldw	r2,-20(fp)
   44664:	10002126 	beq	r2,zero,446ec <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   44668:	e0bffb17 	ldw	r2,-20(fp)
   4466c:	10800217 	ldw	r2,8(r2)
   44670:	108000cc 	andi	r2,r2,3
   44674:	10001826 	beq	r2,zero,446d8 <write+0xbc>
   44678:	e0bffb17 	ldw	r2,-20(fp)
   4467c:	10800017 	ldw	r2,0(r2)
   44680:	10800617 	ldw	r2,24(r2)
   44684:	10001426 	beq	r2,zero,446d8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   44688:	e0bffb17 	ldw	r2,-20(fp)
   4468c:	10800017 	ldw	r2,0(r2)
   44690:	10800617 	ldw	r2,24(r2)
   44694:	e0ffff17 	ldw	r3,-4(fp)
   44698:	180d883a 	mov	r6,r3
   4469c:	e17ffe17 	ldw	r5,-8(fp)
   446a0:	e13ffb17 	ldw	r4,-20(fp)
   446a4:	103ee83a 	callr	r2
   446a8:	e0bffc15 	stw	r2,-16(fp)
   446ac:	e0bffc17 	ldw	r2,-16(fp)
   446b0:	1000070e 	bge	r2,zero,446d0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   446b4:	00445e00 	call	445e0 <alt_get_errno>
   446b8:	1007883a 	mov	r3,r2
   446bc:	e0bffc17 	ldw	r2,-16(fp)
   446c0:	0085c83a 	sub	r2,zero,r2
   446c4:	18800015 	stw	r2,0(r3)
        return -1;
   446c8:	00bfffc4 	movi	r2,-1
   446cc:	00000c06 	br	44700 <write+0xe4>
      }
      return rval;
   446d0:	e0bffc17 	ldw	r2,-16(fp)
   446d4:	00000a06 	br	44700 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   446d8:	00445e00 	call	445e0 <alt_get_errno>
   446dc:	1007883a 	mov	r3,r2
   446e0:	00800344 	movi	r2,13
   446e4:	18800015 	stw	r2,0(r3)
   446e8:	00000406 	br	446fc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   446ec:	00445e00 	call	445e0 <alt_get_errno>
   446f0:	1007883a 	mov	r3,r2
   446f4:	00801444 	movi	r2,81
   446f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   446fc:	00bfffc4 	movi	r2,-1
}
   44700:	e037883a 	mov	sp,fp
   44704:	dfc00117 	ldw	ra,4(sp)
   44708:	df000017 	ldw	fp,0(sp)
   4470c:	dec00204 	addi	sp,sp,8
   44710:	f800283a 	ret

00044714 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   44714:	defffd04 	addi	sp,sp,-12
   44718:	dfc00215 	stw	ra,8(sp)
   4471c:	df000115 	stw	fp,4(sp)
   44720:	df000104 	addi	fp,sp,4
   44724:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   44728:	d1600904 	addi	r5,gp,-32732
   4472c:	e13fff17 	ldw	r4,-4(fp)
   44730:	00453e00 	call	453e0 <alt_dev_llist_insert>
}
   44734:	e037883a 	mov	sp,fp
   44738:	dfc00117 	ldw	ra,4(sp)
   4473c:	df000017 	ldw	fp,0(sp)
   44740:	dec00204 	addi	sp,sp,8
   44744:	f800283a 	ret

00044748 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   44748:	defffd04 	addi	sp,sp,-12
   4474c:	dfc00215 	stw	ra,8(sp)
   44750:	df000115 	stw	fp,4(sp)
   44754:	df000104 	addi	fp,sp,4
   44758:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   4475c:	0045d500 	call	45d50 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   44760:	00800044 	movi	r2,1
   44764:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   44768:	0001883a 	nop
   4476c:	e037883a 	mov	sp,fp
   44770:	dfc00117 	ldw	ra,4(sp)
   44774:	df000017 	ldw	fp,0(sp)
   44778:	dec00204 	addi	sp,sp,8
   4477c:	f800283a 	ret

00044780 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   44780:	defffe04 	addi	sp,sp,-8
   44784:	dfc00115 	stw	ra,4(sp)
   44788:	df000015 	stw	fp,0(sp)
   4478c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   44790:	01800044 	movi	r6,1
   44794:	000b883a 	mov	r5,zero
   44798:	01000134 	movhi	r4,4
   4479c:	211c0504 	addi	r4,r4,28692
   447a0:	004492c0 	call	4492c <altera_avalon_jtag_uart_init>
   447a4:	01000134 	movhi	r4,4
   447a8:	211bfb04 	addi	r4,r4,28652
   447ac:	00447140 	call	44714 <alt_dev_reg>
}
   447b0:	0001883a 	nop
   447b4:	e037883a 	mov	sp,fp
   447b8:	dfc00117 	ldw	ra,4(sp)
   447bc:	df000017 	ldw	fp,0(sp)
   447c0:	dec00204 	addi	sp,sp,8
   447c4:	f800283a 	ret

000447c8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   447c8:	defffa04 	addi	sp,sp,-24
   447cc:	dfc00515 	stw	ra,20(sp)
   447d0:	df000415 	stw	fp,16(sp)
   447d4:	df000404 	addi	fp,sp,16
   447d8:	e13ffd15 	stw	r4,-12(fp)
   447dc:	e17ffe15 	stw	r5,-8(fp)
   447e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   447e4:	e0bffd17 	ldw	r2,-12(fp)
   447e8:	10800017 	ldw	r2,0(r2)
   447ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   447f0:	e0bffc17 	ldw	r2,-16(fp)
   447f4:	10c00a04 	addi	r3,r2,40
   447f8:	e0bffd17 	ldw	r2,-12(fp)
   447fc:	10800217 	ldw	r2,8(r2)
   44800:	100f883a 	mov	r7,r2
   44804:	e1bfff17 	ldw	r6,-4(fp)
   44808:	e17ffe17 	ldw	r5,-8(fp)
   4480c:	1809883a 	mov	r4,r3
   44810:	0044df00 	call	44df0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   44814:	e037883a 	mov	sp,fp
   44818:	dfc00117 	ldw	ra,4(sp)
   4481c:	df000017 	ldw	fp,0(sp)
   44820:	dec00204 	addi	sp,sp,8
   44824:	f800283a 	ret

00044828 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   44828:	defffa04 	addi	sp,sp,-24
   4482c:	dfc00515 	stw	ra,20(sp)
   44830:	df000415 	stw	fp,16(sp)
   44834:	df000404 	addi	fp,sp,16
   44838:	e13ffd15 	stw	r4,-12(fp)
   4483c:	e17ffe15 	stw	r5,-8(fp)
   44840:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44844:	e0bffd17 	ldw	r2,-12(fp)
   44848:	10800017 	ldw	r2,0(r2)
   4484c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   44850:	e0bffc17 	ldw	r2,-16(fp)
   44854:	10c00a04 	addi	r3,r2,40
   44858:	e0bffd17 	ldw	r2,-12(fp)
   4485c:	10800217 	ldw	r2,8(r2)
   44860:	100f883a 	mov	r7,r2
   44864:	e1bfff17 	ldw	r6,-4(fp)
   44868:	e17ffe17 	ldw	r5,-8(fp)
   4486c:	1809883a 	mov	r4,r3
   44870:	004500c0 	call	4500c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   44874:	e037883a 	mov	sp,fp
   44878:	dfc00117 	ldw	ra,4(sp)
   4487c:	df000017 	ldw	fp,0(sp)
   44880:	dec00204 	addi	sp,sp,8
   44884:	f800283a 	ret

00044888 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   44888:	defffc04 	addi	sp,sp,-16
   4488c:	dfc00315 	stw	ra,12(sp)
   44890:	df000215 	stw	fp,8(sp)
   44894:	df000204 	addi	fp,sp,8
   44898:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4489c:	e0bfff17 	ldw	r2,-4(fp)
   448a0:	10800017 	ldw	r2,0(r2)
   448a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   448a8:	e0bffe17 	ldw	r2,-8(fp)
   448ac:	10c00a04 	addi	r3,r2,40
   448b0:	e0bfff17 	ldw	r2,-4(fp)
   448b4:	10800217 	ldw	r2,8(r2)
   448b8:	100b883a 	mov	r5,r2
   448bc:	1809883a 	mov	r4,r3
   448c0:	0044c980 	call	44c98 <altera_avalon_jtag_uart_close>
}
   448c4:	e037883a 	mov	sp,fp
   448c8:	dfc00117 	ldw	ra,4(sp)
   448cc:	df000017 	ldw	fp,0(sp)
   448d0:	dec00204 	addi	sp,sp,8
   448d4:	f800283a 	ret

000448d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   448d8:	defffa04 	addi	sp,sp,-24
   448dc:	dfc00515 	stw	ra,20(sp)
   448e0:	df000415 	stw	fp,16(sp)
   448e4:	df000404 	addi	fp,sp,16
   448e8:	e13ffd15 	stw	r4,-12(fp)
   448ec:	e17ffe15 	stw	r5,-8(fp)
   448f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   448f4:	e0bffd17 	ldw	r2,-12(fp)
   448f8:	10800017 	ldw	r2,0(r2)
   448fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   44900:	e0bffc17 	ldw	r2,-16(fp)
   44904:	10800a04 	addi	r2,r2,40
   44908:	e1bfff17 	ldw	r6,-4(fp)
   4490c:	e17ffe17 	ldw	r5,-8(fp)
   44910:	1009883a 	mov	r4,r2
   44914:	0044d000 	call	44d00 <altera_avalon_jtag_uart_ioctl>
}
   44918:	e037883a 	mov	sp,fp
   4491c:	dfc00117 	ldw	ra,4(sp)
   44920:	df000017 	ldw	fp,0(sp)
   44924:	dec00204 	addi	sp,sp,8
   44928:	f800283a 	ret

0004492c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4492c:	defffa04 	addi	sp,sp,-24
   44930:	dfc00515 	stw	ra,20(sp)
   44934:	df000415 	stw	fp,16(sp)
   44938:	df000404 	addi	fp,sp,16
   4493c:	e13ffd15 	stw	r4,-12(fp)
   44940:	e17ffe15 	stw	r5,-8(fp)
   44944:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44948:	e0bffd17 	ldw	r2,-12(fp)
   4494c:	00c00044 	movi	r3,1
   44950:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   44954:	e0bffd17 	ldw	r2,-12(fp)
   44958:	10800017 	ldw	r2,0(r2)
   4495c:	10800104 	addi	r2,r2,4
   44960:	1007883a 	mov	r3,r2
   44964:	e0bffd17 	ldw	r2,-12(fp)
   44968:	10800817 	ldw	r2,32(r2)
   4496c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   44970:	e0bffe17 	ldw	r2,-8(fp)
   44974:	e0ffff17 	ldw	r3,-4(fp)
   44978:	d8000015 	stw	zero,0(sp)
   4497c:	e1fffd17 	ldw	r7,-12(fp)
   44980:	01800134 	movhi	r6,4
   44984:	31927b04 	addi	r6,r6,18924
   44988:	180b883a 	mov	r5,r3
   4498c:	1009883a 	mov	r4,r2
   44990:	00455780 	call	45578 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   44994:	e0bffd17 	ldw	r2,-12(fp)
   44998:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4499c:	e0bffd17 	ldw	r2,-12(fp)
   449a0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   449a4:	d0e6c117 	ldw	r3,-25852(gp)
   449a8:	e1fffd17 	ldw	r7,-12(fp)
   449ac:	01800134 	movhi	r6,4
   449b0:	3192fe04 	addi	r6,r6,19448
   449b4:	180b883a 	mov	r5,r3
   449b8:	1009883a 	mov	r4,r2
   449bc:	00452300 	call	45230 <alt_alarm_start>
   449c0:	1000040e 	bge	r2,zero,449d4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   449c4:	e0fffd17 	ldw	r3,-12(fp)
   449c8:	00a00034 	movhi	r2,32768
   449cc:	10bfffc4 	addi	r2,r2,-1
   449d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   449d4:	0001883a 	nop
   449d8:	e037883a 	mov	sp,fp
   449dc:	dfc00117 	ldw	ra,4(sp)
   449e0:	df000017 	ldw	fp,0(sp)
   449e4:	dec00204 	addi	sp,sp,8
   449e8:	f800283a 	ret

000449ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   449ec:	defff804 	addi	sp,sp,-32
   449f0:	df000715 	stw	fp,28(sp)
   449f4:	df000704 	addi	fp,sp,28
   449f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   449fc:	e0bfff17 	ldw	r2,-4(fp)
   44a00:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   44a04:	e0bffb17 	ldw	r2,-20(fp)
   44a08:	10800017 	ldw	r2,0(r2)
   44a0c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44a10:	e0bffc17 	ldw	r2,-16(fp)
   44a14:	10800104 	addi	r2,r2,4
   44a18:	10800037 	ldwio	r2,0(r2)
   44a1c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   44a20:	e0bffd17 	ldw	r2,-12(fp)
   44a24:	1080c00c 	andi	r2,r2,768
   44a28:	10006d26 	beq	r2,zero,44be0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   44a2c:	e0bffd17 	ldw	r2,-12(fp)
   44a30:	1080400c 	andi	r2,r2,256
   44a34:	10003526 	beq	r2,zero,44b0c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   44a38:	00800074 	movhi	r2,1
   44a3c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44a40:	e0bffb17 	ldw	r2,-20(fp)
   44a44:	10800a17 	ldw	r2,40(r2)
   44a48:	10800044 	addi	r2,r2,1
   44a4c:	1081ffcc 	andi	r2,r2,2047
   44a50:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   44a54:	e0bffb17 	ldw	r2,-20(fp)
   44a58:	10c00b17 	ldw	r3,44(r2)
   44a5c:	e0bffe17 	ldw	r2,-8(fp)
   44a60:	18801526 	beq	r3,r2,44ab8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   44a64:	e0bffc17 	ldw	r2,-16(fp)
   44a68:	10800037 	ldwio	r2,0(r2)
   44a6c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   44a70:	e0bff917 	ldw	r2,-28(fp)
   44a74:	10a0000c 	andi	r2,r2,32768
   44a78:	10001126 	beq	r2,zero,44ac0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   44a7c:	e0bffb17 	ldw	r2,-20(fp)
   44a80:	10800a17 	ldw	r2,40(r2)
   44a84:	e0fff917 	ldw	r3,-28(fp)
   44a88:	1809883a 	mov	r4,r3
   44a8c:	e0fffb17 	ldw	r3,-20(fp)
   44a90:	1885883a 	add	r2,r3,r2
   44a94:	10800e04 	addi	r2,r2,56
   44a98:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44a9c:	e0bffb17 	ldw	r2,-20(fp)
   44aa0:	10800a17 	ldw	r2,40(r2)
   44aa4:	10800044 	addi	r2,r2,1
   44aa8:	10c1ffcc 	andi	r3,r2,2047
   44aac:	e0bffb17 	ldw	r2,-20(fp)
   44ab0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   44ab4:	003fe206 	br	44a40 <__alt_data_end+0xfffdd940>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   44ab8:	0001883a 	nop
   44abc:	00000106 	br	44ac4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   44ac0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   44ac4:	e0bff917 	ldw	r2,-28(fp)
   44ac8:	10bfffec 	andhi	r2,r2,65535
   44acc:	10000f26 	beq	r2,zero,44b0c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44ad0:	e0bffb17 	ldw	r2,-20(fp)
   44ad4:	10c00817 	ldw	r3,32(r2)
   44ad8:	00bfff84 	movi	r2,-2
   44adc:	1886703a 	and	r3,r3,r2
   44ae0:	e0bffb17 	ldw	r2,-20(fp)
   44ae4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   44ae8:	e0bffc17 	ldw	r2,-16(fp)
   44aec:	10800104 	addi	r2,r2,4
   44af0:	1007883a 	mov	r3,r2
   44af4:	e0bffb17 	ldw	r2,-20(fp)
   44af8:	10800817 	ldw	r2,32(r2)
   44afc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44b00:	e0bffc17 	ldw	r2,-16(fp)
   44b04:	10800104 	addi	r2,r2,4
   44b08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   44b0c:	e0bffd17 	ldw	r2,-12(fp)
   44b10:	1080800c 	andi	r2,r2,512
   44b14:	103fbe26 	beq	r2,zero,44a10 <__alt_data_end+0xfffdd910>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   44b18:	e0bffd17 	ldw	r2,-12(fp)
   44b1c:	1004d43a 	srli	r2,r2,16
   44b20:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   44b24:	00001406 	br	44b78 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   44b28:	e0bffc17 	ldw	r2,-16(fp)
   44b2c:	e0fffb17 	ldw	r3,-20(fp)
   44b30:	18c00d17 	ldw	r3,52(r3)
   44b34:	e13ffb17 	ldw	r4,-20(fp)
   44b38:	20c7883a 	add	r3,r4,r3
   44b3c:	18c20e04 	addi	r3,r3,2104
   44b40:	18c00003 	ldbu	r3,0(r3)
   44b44:	18c03fcc 	andi	r3,r3,255
   44b48:	18c0201c 	xori	r3,r3,128
   44b4c:	18ffe004 	addi	r3,r3,-128
   44b50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44b54:	e0bffb17 	ldw	r2,-20(fp)
   44b58:	10800d17 	ldw	r2,52(r2)
   44b5c:	10800044 	addi	r2,r2,1
   44b60:	10c1ffcc 	andi	r3,r2,2047
   44b64:	e0bffb17 	ldw	r2,-20(fp)
   44b68:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   44b6c:	e0bffa17 	ldw	r2,-24(fp)
   44b70:	10bfffc4 	addi	r2,r2,-1
   44b74:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   44b78:	e0bffa17 	ldw	r2,-24(fp)
   44b7c:	10000526 	beq	r2,zero,44b94 <altera_avalon_jtag_uart_irq+0x1a8>
   44b80:	e0bffb17 	ldw	r2,-20(fp)
   44b84:	10c00d17 	ldw	r3,52(r2)
   44b88:	e0bffb17 	ldw	r2,-20(fp)
   44b8c:	10800c17 	ldw	r2,48(r2)
   44b90:	18bfe51e 	bne	r3,r2,44b28 <__alt_data_end+0xfffdda28>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   44b94:	e0bffa17 	ldw	r2,-24(fp)
   44b98:	103f9d26 	beq	r2,zero,44a10 <__alt_data_end+0xfffdd910>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44b9c:	e0bffb17 	ldw	r2,-20(fp)
   44ba0:	10c00817 	ldw	r3,32(r2)
   44ba4:	00bfff44 	movi	r2,-3
   44ba8:	1886703a 	and	r3,r3,r2
   44bac:	e0bffb17 	ldw	r2,-20(fp)
   44bb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44bb4:	e0bffb17 	ldw	r2,-20(fp)
   44bb8:	10800017 	ldw	r2,0(r2)
   44bbc:	10800104 	addi	r2,r2,4
   44bc0:	1007883a 	mov	r3,r2
   44bc4:	e0bffb17 	ldw	r2,-20(fp)
   44bc8:	10800817 	ldw	r2,32(r2)
   44bcc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44bd0:	e0bffc17 	ldw	r2,-16(fp)
   44bd4:	10800104 	addi	r2,r2,4
   44bd8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   44bdc:	003f8c06 	br	44a10 <__alt_data_end+0xfffdd910>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   44be0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   44be4:	0001883a 	nop
   44be8:	e037883a 	mov	sp,fp
   44bec:	df000017 	ldw	fp,0(sp)
   44bf0:	dec00104 	addi	sp,sp,4
   44bf4:	f800283a 	ret

00044bf8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   44bf8:	defff804 	addi	sp,sp,-32
   44bfc:	df000715 	stw	fp,28(sp)
   44c00:	df000704 	addi	fp,sp,28
   44c04:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   44c08:	e0bffb17 	ldw	r2,-20(fp)
   44c0c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   44c10:	e0bff917 	ldw	r2,-28(fp)
   44c14:	10800017 	ldw	r2,0(r2)
   44c18:	10800104 	addi	r2,r2,4
   44c1c:	10800037 	ldwio	r2,0(r2)
   44c20:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   44c24:	e0bffa17 	ldw	r2,-24(fp)
   44c28:	1081000c 	andi	r2,r2,1024
   44c2c:	10000b26 	beq	r2,zero,44c5c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   44c30:	e0bff917 	ldw	r2,-28(fp)
   44c34:	10800017 	ldw	r2,0(r2)
   44c38:	10800104 	addi	r2,r2,4
   44c3c:	1007883a 	mov	r3,r2
   44c40:	e0bff917 	ldw	r2,-28(fp)
   44c44:	10800817 	ldw	r2,32(r2)
   44c48:	10810014 	ori	r2,r2,1024
   44c4c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   44c50:	e0bff917 	ldw	r2,-28(fp)
   44c54:	10000915 	stw	zero,36(r2)
   44c58:	00000a06 	br	44c84 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   44c5c:	e0bff917 	ldw	r2,-28(fp)
   44c60:	10c00917 	ldw	r3,36(r2)
   44c64:	00a00034 	movhi	r2,32768
   44c68:	10bfff04 	addi	r2,r2,-4
   44c6c:	10c00536 	bltu	r2,r3,44c84 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   44c70:	e0bff917 	ldw	r2,-28(fp)
   44c74:	10800917 	ldw	r2,36(r2)
   44c78:	10c00044 	addi	r3,r2,1
   44c7c:	e0bff917 	ldw	r2,-28(fp)
   44c80:	10c00915 	stw	r3,36(r2)
   44c84:	d0a6c117 	ldw	r2,-25852(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   44c88:	e037883a 	mov	sp,fp
   44c8c:	df000017 	ldw	fp,0(sp)
   44c90:	dec00104 	addi	sp,sp,4
   44c94:	f800283a 	ret

00044c98 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   44c98:	defffd04 	addi	sp,sp,-12
   44c9c:	df000215 	stw	fp,8(sp)
   44ca0:	df000204 	addi	fp,sp,8
   44ca4:	e13ffe15 	stw	r4,-8(fp)
   44ca8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44cac:	00000506 	br	44cc4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   44cb0:	e0bfff17 	ldw	r2,-4(fp)
   44cb4:	1090000c 	andi	r2,r2,16384
   44cb8:	10000226 	beq	r2,zero,44cc4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   44cbc:	00bffd44 	movi	r2,-11
   44cc0:	00000b06 	br	44cf0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44cc4:	e0bffe17 	ldw	r2,-8(fp)
   44cc8:	10c00d17 	ldw	r3,52(r2)
   44ccc:	e0bffe17 	ldw	r2,-8(fp)
   44cd0:	10800c17 	ldw	r2,48(r2)
   44cd4:	18800526 	beq	r3,r2,44cec <altera_avalon_jtag_uart_close+0x54>
   44cd8:	e0bffe17 	ldw	r2,-8(fp)
   44cdc:	10c00917 	ldw	r3,36(r2)
   44ce0:	e0bffe17 	ldw	r2,-8(fp)
   44ce4:	10800117 	ldw	r2,4(r2)
   44ce8:	18bff136 	bltu	r3,r2,44cb0 <__alt_data_end+0xfffddbb0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44cec:	0005883a 	mov	r2,zero
}
   44cf0:	e037883a 	mov	sp,fp
   44cf4:	df000017 	ldw	fp,0(sp)
   44cf8:	dec00104 	addi	sp,sp,4
   44cfc:	f800283a 	ret

00044d00 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   44d00:	defffa04 	addi	sp,sp,-24
   44d04:	df000515 	stw	fp,20(sp)
   44d08:	df000504 	addi	fp,sp,20
   44d0c:	e13ffd15 	stw	r4,-12(fp)
   44d10:	e17ffe15 	stw	r5,-8(fp)
   44d14:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   44d18:	00bff9c4 	movi	r2,-25
   44d1c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   44d20:	e0bffe17 	ldw	r2,-8(fp)
   44d24:	10da8060 	cmpeqi	r3,r2,27137
   44d28:	1800031e 	bne	r3,zero,44d38 <altera_avalon_jtag_uart_ioctl+0x38>
   44d2c:	109a80a0 	cmpeqi	r2,r2,27138
   44d30:	1000181e 	bne	r2,zero,44d94 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   44d34:	00002906 	br	44ddc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   44d38:	e0bffd17 	ldw	r2,-12(fp)
   44d3c:	10c00117 	ldw	r3,4(r2)
   44d40:	00a00034 	movhi	r2,32768
   44d44:	10bfffc4 	addi	r2,r2,-1
   44d48:	18802126 	beq	r3,r2,44dd0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   44d4c:	e0bfff17 	ldw	r2,-4(fp)
   44d50:	10800017 	ldw	r2,0(r2)
   44d54:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   44d58:	e0bffc17 	ldw	r2,-16(fp)
   44d5c:	10800090 	cmplti	r2,r2,2
   44d60:	1000061e 	bne	r2,zero,44d7c <altera_avalon_jtag_uart_ioctl+0x7c>
   44d64:	e0fffc17 	ldw	r3,-16(fp)
   44d68:	00a00034 	movhi	r2,32768
   44d6c:	10bfffc4 	addi	r2,r2,-1
   44d70:	18800226 	beq	r3,r2,44d7c <altera_avalon_jtag_uart_ioctl+0x7c>
   44d74:	e0bffc17 	ldw	r2,-16(fp)
   44d78:	00000206 	br	44d84 <altera_avalon_jtag_uart_ioctl+0x84>
   44d7c:	00a00034 	movhi	r2,32768
   44d80:	10bfff84 	addi	r2,r2,-2
   44d84:	e0fffd17 	ldw	r3,-12(fp)
   44d88:	18800115 	stw	r2,4(r3)
      rc = 0;
   44d8c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   44d90:	00000f06 	br	44dd0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   44d94:	e0bffd17 	ldw	r2,-12(fp)
   44d98:	10c00117 	ldw	r3,4(r2)
   44d9c:	00a00034 	movhi	r2,32768
   44da0:	10bfffc4 	addi	r2,r2,-1
   44da4:	18800c26 	beq	r3,r2,44dd8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   44da8:	e0bffd17 	ldw	r2,-12(fp)
   44dac:	10c00917 	ldw	r3,36(r2)
   44db0:	e0bffd17 	ldw	r2,-12(fp)
   44db4:	10800117 	ldw	r2,4(r2)
   44db8:	1885803a 	cmpltu	r2,r3,r2
   44dbc:	10c03fcc 	andi	r3,r2,255
   44dc0:	e0bfff17 	ldw	r2,-4(fp)
   44dc4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   44dc8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   44dcc:	00000206 	br	44dd8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   44dd0:	0001883a 	nop
   44dd4:	00000106 	br	44ddc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   44dd8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   44ddc:	e0bffb17 	ldw	r2,-20(fp)
}
   44de0:	e037883a 	mov	sp,fp
   44de4:	df000017 	ldw	fp,0(sp)
   44de8:	dec00104 	addi	sp,sp,4
   44dec:	f800283a 	ret

00044df0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44df0:	defff304 	addi	sp,sp,-52
   44df4:	dfc00c15 	stw	ra,48(sp)
   44df8:	df000b15 	stw	fp,44(sp)
   44dfc:	df000b04 	addi	fp,sp,44
   44e00:	e13ffc15 	stw	r4,-16(fp)
   44e04:	e17ffd15 	stw	r5,-12(fp)
   44e08:	e1bffe15 	stw	r6,-8(fp)
   44e0c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   44e10:	e0bffd17 	ldw	r2,-12(fp)
   44e14:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44e18:	00004706 	br	44f38 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   44e1c:	e0bffc17 	ldw	r2,-16(fp)
   44e20:	10800a17 	ldw	r2,40(r2)
   44e24:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   44e28:	e0bffc17 	ldw	r2,-16(fp)
   44e2c:	10800b17 	ldw	r2,44(r2)
   44e30:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   44e34:	e0fff717 	ldw	r3,-36(fp)
   44e38:	e0bff817 	ldw	r2,-32(fp)
   44e3c:	18800536 	bltu	r3,r2,44e54 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   44e40:	e0fff717 	ldw	r3,-36(fp)
   44e44:	e0bff817 	ldw	r2,-32(fp)
   44e48:	1885c83a 	sub	r2,r3,r2
   44e4c:	e0bff615 	stw	r2,-40(fp)
   44e50:	00000406 	br	44e64 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   44e54:	00c20004 	movi	r3,2048
   44e58:	e0bff817 	ldw	r2,-32(fp)
   44e5c:	1885c83a 	sub	r2,r3,r2
   44e60:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   44e64:	e0bff617 	ldw	r2,-40(fp)
   44e68:	10001e26 	beq	r2,zero,44ee4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   44e6c:	e0fffe17 	ldw	r3,-8(fp)
   44e70:	e0bff617 	ldw	r2,-40(fp)
   44e74:	1880022e 	bgeu	r3,r2,44e80 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   44e78:	e0bffe17 	ldw	r2,-8(fp)
   44e7c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   44e80:	e0bffc17 	ldw	r2,-16(fp)
   44e84:	10c00e04 	addi	r3,r2,56
   44e88:	e0bff817 	ldw	r2,-32(fp)
   44e8c:	1885883a 	add	r2,r3,r2
   44e90:	e1bff617 	ldw	r6,-40(fp)
   44e94:	100b883a 	mov	r5,r2
   44e98:	e13ff517 	ldw	r4,-44(fp)
   44e9c:	00425fc0 	call	425fc <memcpy>
      ptr   += n;
   44ea0:	e0fff517 	ldw	r3,-44(fp)
   44ea4:	e0bff617 	ldw	r2,-40(fp)
   44ea8:	1885883a 	add	r2,r3,r2
   44eac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   44eb0:	e0fffe17 	ldw	r3,-8(fp)
   44eb4:	e0bff617 	ldw	r2,-40(fp)
   44eb8:	1885c83a 	sub	r2,r3,r2
   44ebc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44ec0:	e0fff817 	ldw	r3,-32(fp)
   44ec4:	e0bff617 	ldw	r2,-40(fp)
   44ec8:	1885883a 	add	r2,r3,r2
   44ecc:	10c1ffcc 	andi	r3,r2,2047
   44ed0:	e0bffc17 	ldw	r2,-16(fp)
   44ed4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   44ed8:	e0bffe17 	ldw	r2,-8(fp)
   44edc:	00bfcf16 	blt	zero,r2,44e1c <__alt_data_end+0xfffddd1c>
   44ee0:	00000106 	br	44ee8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   44ee4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   44ee8:	e0fff517 	ldw	r3,-44(fp)
   44eec:	e0bffd17 	ldw	r2,-12(fp)
   44ef0:	1880141e 	bne	r3,r2,44f44 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   44ef4:	e0bfff17 	ldw	r2,-4(fp)
   44ef8:	1090000c 	andi	r2,r2,16384
   44efc:	1000131e 	bne	r2,zero,44f4c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   44f00:	0001883a 	nop
   44f04:	e0bffc17 	ldw	r2,-16(fp)
   44f08:	10c00a17 	ldw	r3,40(r2)
   44f0c:	e0bff717 	ldw	r2,-36(fp)
   44f10:	1880051e 	bne	r3,r2,44f28 <altera_avalon_jtag_uart_read+0x138>
   44f14:	e0bffc17 	ldw	r2,-16(fp)
   44f18:	10c00917 	ldw	r3,36(r2)
   44f1c:	e0bffc17 	ldw	r2,-16(fp)
   44f20:	10800117 	ldw	r2,4(r2)
   44f24:	18bff736 	bltu	r3,r2,44f04 <__alt_data_end+0xfffdde04>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   44f28:	e0bffc17 	ldw	r2,-16(fp)
   44f2c:	10c00a17 	ldw	r3,40(r2)
   44f30:	e0bff717 	ldw	r2,-36(fp)
   44f34:	18800726 	beq	r3,r2,44f54 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44f38:	e0bffe17 	ldw	r2,-8(fp)
   44f3c:	00bfb716 	blt	zero,r2,44e1c <__alt_data_end+0xfffddd1c>
   44f40:	00000506 	br	44f58 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   44f44:	0001883a 	nop
   44f48:	00000306 	br	44f58 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   44f4c:	0001883a 	nop
   44f50:	00000106 	br	44f58 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   44f54:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   44f58:	e0fff517 	ldw	r3,-44(fp)
   44f5c:	e0bffd17 	ldw	r2,-12(fp)
   44f60:	18801826 	beq	r3,r2,44fc4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44f64:	0005303a 	rdctl	r2,status
   44f68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44f6c:	e0fffb17 	ldw	r3,-20(fp)
   44f70:	00bfff84 	movi	r2,-2
   44f74:	1884703a 	and	r2,r3,r2
   44f78:	1001703a 	wrctl	status,r2
  
  return context;
   44f7c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   44f80:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44f84:	e0bffc17 	ldw	r2,-16(fp)
   44f88:	10800817 	ldw	r2,32(r2)
   44f8c:	10c00054 	ori	r3,r2,1
   44f90:	e0bffc17 	ldw	r2,-16(fp)
   44f94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44f98:	e0bffc17 	ldw	r2,-16(fp)
   44f9c:	10800017 	ldw	r2,0(r2)
   44fa0:	10800104 	addi	r2,r2,4
   44fa4:	1007883a 	mov	r3,r2
   44fa8:	e0bffc17 	ldw	r2,-16(fp)
   44fac:	10800817 	ldw	r2,32(r2)
   44fb0:	18800035 	stwio	r2,0(r3)
   44fb4:	e0bffa17 	ldw	r2,-24(fp)
   44fb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44fbc:	e0bff917 	ldw	r2,-28(fp)
   44fc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   44fc4:	e0fff517 	ldw	r3,-44(fp)
   44fc8:	e0bffd17 	ldw	r2,-12(fp)
   44fcc:	18800426 	beq	r3,r2,44fe0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   44fd0:	e0fff517 	ldw	r3,-44(fp)
   44fd4:	e0bffd17 	ldw	r2,-12(fp)
   44fd8:	1885c83a 	sub	r2,r3,r2
   44fdc:	00000606 	br	44ff8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   44fe0:	e0bfff17 	ldw	r2,-4(fp)
   44fe4:	1090000c 	andi	r2,r2,16384
   44fe8:	10000226 	beq	r2,zero,44ff4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   44fec:	00bffd44 	movi	r2,-11
   44ff0:	00000106 	br	44ff8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   44ff4:	00bffec4 	movi	r2,-5
}
   44ff8:	e037883a 	mov	sp,fp
   44ffc:	dfc00117 	ldw	ra,4(sp)
   45000:	df000017 	ldw	fp,0(sp)
   45004:	dec00204 	addi	sp,sp,8
   45008:	f800283a 	ret

0004500c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4500c:	defff304 	addi	sp,sp,-52
   45010:	dfc00c15 	stw	ra,48(sp)
   45014:	df000b15 	stw	fp,44(sp)
   45018:	df000b04 	addi	fp,sp,44
   4501c:	e13ffc15 	stw	r4,-16(fp)
   45020:	e17ffd15 	stw	r5,-12(fp)
   45024:	e1bffe15 	stw	r6,-8(fp)
   45028:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4502c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   45030:	e0bffd17 	ldw	r2,-12(fp)
   45034:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   45038:	00003706 	br	45118 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4503c:	e0bffc17 	ldw	r2,-16(fp)
   45040:	10800c17 	ldw	r2,48(r2)
   45044:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   45048:	e0bffc17 	ldw	r2,-16(fp)
   4504c:	10800d17 	ldw	r2,52(r2)
   45050:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   45054:	e0fff917 	ldw	r3,-28(fp)
   45058:	e0bff517 	ldw	r2,-44(fp)
   4505c:	1880062e 	bgeu	r3,r2,45078 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   45060:	e0fff517 	ldw	r3,-44(fp)
   45064:	e0bff917 	ldw	r2,-28(fp)
   45068:	1885c83a 	sub	r2,r3,r2
   4506c:	10bfffc4 	addi	r2,r2,-1
   45070:	e0bff615 	stw	r2,-40(fp)
   45074:	00000b06 	br	450a4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   45078:	e0bff517 	ldw	r2,-44(fp)
   4507c:	10000526 	beq	r2,zero,45094 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   45080:	00c20004 	movi	r3,2048
   45084:	e0bff917 	ldw	r2,-28(fp)
   45088:	1885c83a 	sub	r2,r3,r2
   4508c:	e0bff615 	stw	r2,-40(fp)
   45090:	00000406 	br	450a4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   45094:	00c1ffc4 	movi	r3,2047
   45098:	e0bff917 	ldw	r2,-28(fp)
   4509c:	1885c83a 	sub	r2,r3,r2
   450a0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   450a4:	e0bff617 	ldw	r2,-40(fp)
   450a8:	10001e26 	beq	r2,zero,45124 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   450ac:	e0fffe17 	ldw	r3,-8(fp)
   450b0:	e0bff617 	ldw	r2,-40(fp)
   450b4:	1880022e 	bgeu	r3,r2,450c0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   450b8:	e0bffe17 	ldw	r2,-8(fp)
   450bc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   450c0:	e0bffc17 	ldw	r2,-16(fp)
   450c4:	10c20e04 	addi	r3,r2,2104
   450c8:	e0bff917 	ldw	r2,-28(fp)
   450cc:	1885883a 	add	r2,r3,r2
   450d0:	e1bff617 	ldw	r6,-40(fp)
   450d4:	e17ffd17 	ldw	r5,-12(fp)
   450d8:	1009883a 	mov	r4,r2
   450dc:	00425fc0 	call	425fc <memcpy>
      ptr   += n;
   450e0:	e0fffd17 	ldw	r3,-12(fp)
   450e4:	e0bff617 	ldw	r2,-40(fp)
   450e8:	1885883a 	add	r2,r3,r2
   450ec:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   450f0:	e0fffe17 	ldw	r3,-8(fp)
   450f4:	e0bff617 	ldw	r2,-40(fp)
   450f8:	1885c83a 	sub	r2,r3,r2
   450fc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   45100:	e0fff917 	ldw	r3,-28(fp)
   45104:	e0bff617 	ldw	r2,-40(fp)
   45108:	1885883a 	add	r2,r3,r2
   4510c:	10c1ffcc 	andi	r3,r2,2047
   45110:	e0bffc17 	ldw	r2,-16(fp)
   45114:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   45118:	e0bffe17 	ldw	r2,-8(fp)
   4511c:	00bfc716 	blt	zero,r2,4503c <__alt_data_end+0xfffddf3c>
   45120:	00000106 	br	45128 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   45124:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45128:	0005303a 	rdctl	r2,status
   4512c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45130:	e0fffb17 	ldw	r3,-20(fp)
   45134:	00bfff84 	movi	r2,-2
   45138:	1884703a 	and	r2,r3,r2
   4513c:	1001703a 	wrctl	status,r2
  
  return context;
   45140:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   45144:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   45148:	e0bffc17 	ldw	r2,-16(fp)
   4514c:	10800817 	ldw	r2,32(r2)
   45150:	10c00094 	ori	r3,r2,2
   45154:	e0bffc17 	ldw	r2,-16(fp)
   45158:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4515c:	e0bffc17 	ldw	r2,-16(fp)
   45160:	10800017 	ldw	r2,0(r2)
   45164:	10800104 	addi	r2,r2,4
   45168:	1007883a 	mov	r3,r2
   4516c:	e0bffc17 	ldw	r2,-16(fp)
   45170:	10800817 	ldw	r2,32(r2)
   45174:	18800035 	stwio	r2,0(r3)
   45178:	e0bffa17 	ldw	r2,-24(fp)
   4517c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45180:	e0bff817 	ldw	r2,-32(fp)
   45184:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   45188:	e0bffe17 	ldw	r2,-8(fp)
   4518c:	0080100e 	bge	zero,r2,451d0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   45190:	e0bfff17 	ldw	r2,-4(fp)
   45194:	1090000c 	andi	r2,r2,16384
   45198:	1000101e 	bne	r2,zero,451dc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4519c:	0001883a 	nop
   451a0:	e0bffc17 	ldw	r2,-16(fp)
   451a4:	10c00d17 	ldw	r3,52(r2)
   451a8:	e0bff517 	ldw	r2,-44(fp)
   451ac:	1880051e 	bne	r3,r2,451c4 <altera_avalon_jtag_uart_write+0x1b8>
   451b0:	e0bffc17 	ldw	r2,-16(fp)
   451b4:	10c00917 	ldw	r3,36(r2)
   451b8:	e0bffc17 	ldw	r2,-16(fp)
   451bc:	10800117 	ldw	r2,4(r2)
   451c0:	18bff736 	bltu	r3,r2,451a0 <__alt_data_end+0xfffde0a0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   451c4:	e0bffc17 	ldw	r2,-16(fp)
   451c8:	10800917 	ldw	r2,36(r2)
   451cc:	1000051e 	bne	r2,zero,451e4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   451d0:	e0bffe17 	ldw	r2,-8(fp)
   451d4:	00bfd016 	blt	zero,r2,45118 <__alt_data_end+0xfffde018>
   451d8:	00000306 	br	451e8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   451dc:	0001883a 	nop
   451e0:	00000106 	br	451e8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   451e4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   451e8:	e0fffd17 	ldw	r3,-12(fp)
   451ec:	e0bff717 	ldw	r2,-36(fp)
   451f0:	18800426 	beq	r3,r2,45204 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   451f4:	e0fffd17 	ldw	r3,-12(fp)
   451f8:	e0bff717 	ldw	r2,-36(fp)
   451fc:	1885c83a 	sub	r2,r3,r2
   45200:	00000606 	br	4521c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   45204:	e0bfff17 	ldw	r2,-4(fp)
   45208:	1090000c 	andi	r2,r2,16384
   4520c:	10000226 	beq	r2,zero,45218 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   45210:	00bffd44 	movi	r2,-11
   45214:	00000106 	br	4521c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   45218:	00bffec4 	movi	r2,-5
}
   4521c:	e037883a 	mov	sp,fp
   45220:	dfc00117 	ldw	ra,4(sp)
   45224:	df000017 	ldw	fp,0(sp)
   45228:	dec00204 	addi	sp,sp,8
   4522c:	f800283a 	ret

00045230 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   45230:	defff504 	addi	sp,sp,-44
   45234:	df000a15 	stw	fp,40(sp)
   45238:	df000a04 	addi	fp,sp,40
   4523c:	e13ffc15 	stw	r4,-16(fp)
   45240:	e17ffd15 	stw	r5,-12(fp)
   45244:	e1bffe15 	stw	r6,-8(fp)
   45248:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4524c:	e03ff615 	stw	zero,-40(fp)
   45250:	d0a6c117 	ldw	r2,-25852(gp)
  
  if (alt_ticks_per_second ())
   45254:	10003c26 	beq	r2,zero,45348 <alt_alarm_start+0x118>
  {
    if (alarm)
   45258:	e0bffc17 	ldw	r2,-16(fp)
   4525c:	10003826 	beq	r2,zero,45340 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   45260:	e0bffc17 	ldw	r2,-16(fp)
   45264:	e0fffe17 	ldw	r3,-8(fp)
   45268:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4526c:	e0bffc17 	ldw	r2,-16(fp)
   45270:	e0ffff17 	ldw	r3,-4(fp)
   45274:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45278:	0005303a 	rdctl	r2,status
   4527c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45280:	e0fff917 	ldw	r3,-28(fp)
   45284:	00bfff84 	movi	r2,-2
   45288:	1884703a 	and	r2,r3,r2
   4528c:	1001703a 	wrctl	status,r2
  
  return context;
   45290:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   45294:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   45298:	d0a6c217 	ldw	r2,-25848(gp)
      
      current_nticks = alt_nticks();
   4529c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   452a0:	e0fffd17 	ldw	r3,-12(fp)
   452a4:	e0bff617 	ldw	r2,-40(fp)
   452a8:	1885883a 	add	r2,r3,r2
   452ac:	10c00044 	addi	r3,r2,1
   452b0:	e0bffc17 	ldw	r2,-16(fp)
   452b4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   452b8:	e0bffc17 	ldw	r2,-16(fp)
   452bc:	10c00217 	ldw	r3,8(r2)
   452c0:	e0bff617 	ldw	r2,-40(fp)
   452c4:	1880042e 	bgeu	r3,r2,452d8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   452c8:	e0bffc17 	ldw	r2,-16(fp)
   452cc:	00c00044 	movi	r3,1
   452d0:	10c00405 	stb	r3,16(r2)
   452d4:	00000206 	br	452e0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   452d8:	e0bffc17 	ldw	r2,-16(fp)
   452dc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   452e0:	e0bffc17 	ldw	r2,-16(fp)
   452e4:	d0e00f04 	addi	r3,gp,-32708
   452e8:	e0fffa15 	stw	r3,-24(fp)
   452ec:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   452f0:	e0bffb17 	ldw	r2,-20(fp)
   452f4:	e0fffa17 	ldw	r3,-24(fp)
   452f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   452fc:	e0bffa17 	ldw	r2,-24(fp)
   45300:	10c00017 	ldw	r3,0(r2)
   45304:	e0bffb17 	ldw	r2,-20(fp)
   45308:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4530c:	e0bffa17 	ldw	r2,-24(fp)
   45310:	10800017 	ldw	r2,0(r2)
   45314:	e0fffb17 	ldw	r3,-20(fp)
   45318:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4531c:	e0bffa17 	ldw	r2,-24(fp)
   45320:	e0fffb17 	ldw	r3,-20(fp)
   45324:	10c00015 	stw	r3,0(r2)
   45328:	e0bff817 	ldw	r2,-32(fp)
   4532c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45330:	e0bff717 	ldw	r2,-36(fp)
   45334:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   45338:	0005883a 	mov	r2,zero
   4533c:	00000306 	br	4534c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   45340:	00bffa84 	movi	r2,-22
   45344:	00000106 	br	4534c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   45348:	00bfde84 	movi	r2,-134
  }
}
   4534c:	e037883a 	mov	sp,fp
   45350:	df000017 	ldw	fp,0(sp)
   45354:	dec00104 	addi	sp,sp,4
   45358:	f800283a 	ret

0004535c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4535c:	defffe04 	addi	sp,sp,-8
   45360:	df000115 	stw	fp,4(sp)
   45364:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   45368:	e03fff15 	stw	zero,-4(fp)
   4536c:	00000506 	br	45384 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   45370:	e0bfff17 	ldw	r2,-4(fp)
   45374:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   45378:	e0bfff17 	ldw	r2,-4(fp)
   4537c:	10800804 	addi	r2,r2,32
   45380:	e0bfff15 	stw	r2,-4(fp)
   45384:	e0bfff17 	ldw	r2,-4(fp)
   45388:	10840030 	cmpltui	r2,r2,4096
   4538c:	103ff81e 	bne	r2,zero,45370 <__alt_data_end+0xfffde270>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   45390:	0001883a 	nop
   45394:	e037883a 	mov	sp,fp
   45398:	df000017 	ldw	fp,0(sp)
   4539c:	dec00104 	addi	sp,sp,4
   453a0:	f800283a 	ret

000453a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   453a4:	defffe04 	addi	sp,sp,-8
   453a8:	dfc00115 	stw	ra,4(sp)
   453ac:	df000015 	stw	fp,0(sp)
   453b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   453b4:	d0a00c17 	ldw	r2,-32720(gp)
   453b8:	10000326 	beq	r2,zero,453c8 <alt_get_errno+0x24>
   453bc:	d0a00c17 	ldw	r2,-32720(gp)
   453c0:	103ee83a 	callr	r2
   453c4:	00000106 	br	453cc <alt_get_errno+0x28>
   453c8:	d0a6bc04 	addi	r2,gp,-25872
}
   453cc:	e037883a 	mov	sp,fp
   453d0:	dfc00117 	ldw	ra,4(sp)
   453d4:	df000017 	ldw	fp,0(sp)
   453d8:	dec00204 	addi	sp,sp,8
   453dc:	f800283a 	ret

000453e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   453e0:	defffa04 	addi	sp,sp,-24
   453e4:	dfc00515 	stw	ra,20(sp)
   453e8:	df000415 	stw	fp,16(sp)
   453ec:	df000404 	addi	fp,sp,16
   453f0:	e13ffe15 	stw	r4,-8(fp)
   453f4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   453f8:	e0bffe17 	ldw	r2,-8(fp)
   453fc:	10000326 	beq	r2,zero,4540c <alt_dev_llist_insert+0x2c>
   45400:	e0bffe17 	ldw	r2,-8(fp)
   45404:	10800217 	ldw	r2,8(r2)
   45408:	1000061e 	bne	r2,zero,45424 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   4540c:	00453a40 	call	453a4 <alt_get_errno>
   45410:	1007883a 	mov	r3,r2
   45414:	00800584 	movi	r2,22
   45418:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4541c:	00bffa84 	movi	r2,-22
   45420:	00001306 	br	45470 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   45424:	e0bffe17 	ldw	r2,-8(fp)
   45428:	e0ffff17 	ldw	r3,-4(fp)
   4542c:	e0fffc15 	stw	r3,-16(fp)
   45430:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   45434:	e0bffd17 	ldw	r2,-12(fp)
   45438:	e0fffc17 	ldw	r3,-16(fp)
   4543c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45440:	e0bffc17 	ldw	r2,-16(fp)
   45444:	10c00017 	ldw	r3,0(r2)
   45448:	e0bffd17 	ldw	r2,-12(fp)
   4544c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45450:	e0bffc17 	ldw	r2,-16(fp)
   45454:	10800017 	ldw	r2,0(r2)
   45458:	e0fffd17 	ldw	r3,-12(fp)
   4545c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45460:	e0bffc17 	ldw	r2,-16(fp)
   45464:	e0fffd17 	ldw	r3,-12(fp)
   45468:	10c00015 	stw	r3,0(r2)

  return 0;  
   4546c:	0005883a 	mov	r2,zero
}
   45470:	e037883a 	mov	sp,fp
   45474:	dfc00117 	ldw	ra,4(sp)
   45478:	df000017 	ldw	fp,0(sp)
   4547c:	dec00204 	addi	sp,sp,8
   45480:	f800283a 	ret

00045484 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   45484:	defffd04 	addi	sp,sp,-12
   45488:	dfc00215 	stw	ra,8(sp)
   4548c:	df000115 	stw	fp,4(sp)
   45490:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   45494:	00800134 	movhi	r2,4
   45498:	10991b04 	addi	r2,r2,25708
   4549c:	e0bfff15 	stw	r2,-4(fp)
   454a0:	00000606 	br	454bc <_do_ctors+0x38>
        (*ctor) (); 
   454a4:	e0bfff17 	ldw	r2,-4(fp)
   454a8:	10800017 	ldw	r2,0(r2)
   454ac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   454b0:	e0bfff17 	ldw	r2,-4(fp)
   454b4:	10bfff04 	addi	r2,r2,-4
   454b8:	e0bfff15 	stw	r2,-4(fp)
   454bc:	e0ffff17 	ldw	r3,-4(fp)
   454c0:	00800134 	movhi	r2,4
   454c4:	10991c04 	addi	r2,r2,25712
   454c8:	18bff62e 	bgeu	r3,r2,454a4 <__alt_data_end+0xfffde3a4>
        (*ctor) (); 
}
   454cc:	0001883a 	nop
   454d0:	e037883a 	mov	sp,fp
   454d4:	dfc00117 	ldw	ra,4(sp)
   454d8:	df000017 	ldw	fp,0(sp)
   454dc:	dec00204 	addi	sp,sp,8
   454e0:	f800283a 	ret

000454e4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   454e4:	defffd04 	addi	sp,sp,-12
   454e8:	dfc00215 	stw	ra,8(sp)
   454ec:	df000115 	stw	fp,4(sp)
   454f0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   454f4:	00800134 	movhi	r2,4
   454f8:	10991b04 	addi	r2,r2,25708
   454fc:	e0bfff15 	stw	r2,-4(fp)
   45500:	00000606 	br	4551c <_do_dtors+0x38>
        (*dtor) (); 
   45504:	e0bfff17 	ldw	r2,-4(fp)
   45508:	10800017 	ldw	r2,0(r2)
   4550c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45510:	e0bfff17 	ldw	r2,-4(fp)
   45514:	10bfff04 	addi	r2,r2,-4
   45518:	e0bfff15 	stw	r2,-4(fp)
   4551c:	e0ffff17 	ldw	r3,-4(fp)
   45520:	00800134 	movhi	r2,4
   45524:	10991c04 	addi	r2,r2,25712
   45528:	18bff62e 	bgeu	r3,r2,45504 <__alt_data_end+0xfffde404>
        (*dtor) (); 
}
   4552c:	0001883a 	nop
   45530:	e037883a 	mov	sp,fp
   45534:	dfc00117 	ldw	ra,4(sp)
   45538:	df000017 	ldw	fp,0(sp)
   4553c:	dec00204 	addi	sp,sp,8
   45540:	f800283a 	ret

00045544 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   45544:	defffe04 	addi	sp,sp,-8
   45548:	dfc00115 	stw	ra,4(sp)
   4554c:	df000015 	stw	fp,0(sp)
   45550:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   45554:	01480004 	movi	r5,8192
   45558:	0009883a 	mov	r4,zero
   4555c:	0045fb00 	call	45fb0 <alt_icache_flush>
#endif
}
   45560:	0001883a 	nop
   45564:	e037883a 	mov	sp,fp
   45568:	dfc00117 	ldw	ra,4(sp)
   4556c:	df000017 	ldw	fp,0(sp)
   45570:	dec00204 	addi	sp,sp,8
   45574:	f800283a 	ret

00045578 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   45578:	defff904 	addi	sp,sp,-28
   4557c:	dfc00615 	stw	ra,24(sp)
   45580:	df000515 	stw	fp,20(sp)
   45584:	df000504 	addi	fp,sp,20
   45588:	e13ffc15 	stw	r4,-16(fp)
   4558c:	e17ffd15 	stw	r5,-12(fp)
   45590:	e1bffe15 	stw	r6,-8(fp)
   45594:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   45598:	e0800217 	ldw	r2,8(fp)
   4559c:	d8800015 	stw	r2,0(sp)
   455a0:	e1ffff17 	ldw	r7,-4(fp)
   455a4:	e1bffe17 	ldw	r6,-8(fp)
   455a8:	e17ffd17 	ldw	r5,-12(fp)
   455ac:	e13ffc17 	ldw	r4,-16(fp)
   455b0:	00457280 	call	45728 <alt_iic_isr_register>
}  
   455b4:	e037883a 	mov	sp,fp
   455b8:	dfc00117 	ldw	ra,4(sp)
   455bc:	df000017 	ldw	fp,0(sp)
   455c0:	dec00204 	addi	sp,sp,8
   455c4:	f800283a 	ret

000455c8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   455c8:	defff904 	addi	sp,sp,-28
   455cc:	df000615 	stw	fp,24(sp)
   455d0:	df000604 	addi	fp,sp,24
   455d4:	e13ffe15 	stw	r4,-8(fp)
   455d8:	e17fff15 	stw	r5,-4(fp)
   455dc:	e0bfff17 	ldw	r2,-4(fp)
   455e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   455e4:	0005303a 	rdctl	r2,status
   455e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   455ec:	e0fffb17 	ldw	r3,-20(fp)
   455f0:	00bfff84 	movi	r2,-2
   455f4:	1884703a 	and	r2,r3,r2
   455f8:	1001703a 	wrctl	status,r2
  
  return context;
   455fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45600:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   45604:	00c00044 	movi	r3,1
   45608:	e0bffa17 	ldw	r2,-24(fp)
   4560c:	1884983a 	sll	r2,r3,r2
   45610:	1007883a 	mov	r3,r2
   45614:	d0a6c017 	ldw	r2,-25856(gp)
   45618:	1884b03a 	or	r2,r3,r2
   4561c:	d0a6c015 	stw	r2,-25856(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45620:	d0a6c017 	ldw	r2,-25856(gp)
   45624:	100170fa 	wrctl	ienable,r2
   45628:	e0bffc17 	ldw	r2,-16(fp)
   4562c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45630:	e0bffd17 	ldw	r2,-12(fp)
   45634:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45638:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4563c:	0001883a 	nop
}
   45640:	e037883a 	mov	sp,fp
   45644:	df000017 	ldw	fp,0(sp)
   45648:	dec00104 	addi	sp,sp,4
   4564c:	f800283a 	ret

00045650 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   45650:	defff904 	addi	sp,sp,-28
   45654:	df000615 	stw	fp,24(sp)
   45658:	df000604 	addi	fp,sp,24
   4565c:	e13ffe15 	stw	r4,-8(fp)
   45660:	e17fff15 	stw	r5,-4(fp)
   45664:	e0bfff17 	ldw	r2,-4(fp)
   45668:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4566c:	0005303a 	rdctl	r2,status
   45670:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45674:	e0fffb17 	ldw	r3,-20(fp)
   45678:	00bfff84 	movi	r2,-2
   4567c:	1884703a 	and	r2,r3,r2
   45680:	1001703a 	wrctl	status,r2
  
  return context;
   45684:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45688:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4568c:	00c00044 	movi	r3,1
   45690:	e0bffa17 	ldw	r2,-24(fp)
   45694:	1884983a 	sll	r2,r3,r2
   45698:	0084303a 	nor	r2,zero,r2
   4569c:	1007883a 	mov	r3,r2
   456a0:	d0a6c017 	ldw	r2,-25856(gp)
   456a4:	1884703a 	and	r2,r3,r2
   456a8:	d0a6c015 	stw	r2,-25856(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   456ac:	d0a6c017 	ldw	r2,-25856(gp)
   456b0:	100170fa 	wrctl	ienable,r2
   456b4:	e0bffc17 	ldw	r2,-16(fp)
   456b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   456bc:	e0bffd17 	ldw	r2,-12(fp)
   456c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   456c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   456c8:	0001883a 	nop
}
   456cc:	e037883a 	mov	sp,fp
   456d0:	df000017 	ldw	fp,0(sp)
   456d4:	dec00104 	addi	sp,sp,4
   456d8:	f800283a 	ret

000456dc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   456dc:	defffc04 	addi	sp,sp,-16
   456e0:	df000315 	stw	fp,12(sp)
   456e4:	df000304 	addi	fp,sp,12
   456e8:	e13ffe15 	stw	r4,-8(fp)
   456ec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   456f0:	000530fa 	rdctl	r2,ienable
   456f4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   456f8:	00c00044 	movi	r3,1
   456fc:	e0bfff17 	ldw	r2,-4(fp)
   45700:	1884983a 	sll	r2,r3,r2
   45704:	1007883a 	mov	r3,r2
   45708:	e0bffd17 	ldw	r2,-12(fp)
   4570c:	1884703a 	and	r2,r3,r2
   45710:	1004c03a 	cmpne	r2,r2,zero
   45714:	10803fcc 	andi	r2,r2,255
}
   45718:	e037883a 	mov	sp,fp
   4571c:	df000017 	ldw	fp,0(sp)
   45720:	dec00104 	addi	sp,sp,4
   45724:	f800283a 	ret

00045728 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   45728:	defff504 	addi	sp,sp,-44
   4572c:	dfc00a15 	stw	ra,40(sp)
   45730:	df000915 	stw	fp,36(sp)
   45734:	df000904 	addi	fp,sp,36
   45738:	e13ffc15 	stw	r4,-16(fp)
   4573c:	e17ffd15 	stw	r5,-12(fp)
   45740:	e1bffe15 	stw	r6,-8(fp)
   45744:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   45748:	00bffa84 	movi	r2,-22
   4574c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   45750:	e0bffd17 	ldw	r2,-12(fp)
   45754:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   45758:	e0bff817 	ldw	r2,-32(fp)
   4575c:	10800808 	cmpgei	r2,r2,32
   45760:	1000271e 	bne	r2,zero,45800 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45764:	0005303a 	rdctl	r2,status
   45768:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4576c:	e0fffb17 	ldw	r3,-20(fp)
   45770:	00bfff84 	movi	r2,-2
   45774:	1884703a 	and	r2,r3,r2
   45778:	1001703a 	wrctl	status,r2
  
  return context;
   4577c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   45780:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   45784:	00800174 	movhi	r2,5
   45788:	10a6e104 	addi	r2,r2,-25724
   4578c:	e0fff817 	ldw	r3,-32(fp)
   45790:	180690fa 	slli	r3,r3,3
   45794:	10c5883a 	add	r2,r2,r3
   45798:	e0fffe17 	ldw	r3,-8(fp)
   4579c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   457a0:	00800174 	movhi	r2,5
   457a4:	10a6e104 	addi	r2,r2,-25724
   457a8:	e0fff817 	ldw	r3,-32(fp)
   457ac:	180690fa 	slli	r3,r3,3
   457b0:	10c5883a 	add	r2,r2,r3
   457b4:	10800104 	addi	r2,r2,4
   457b8:	e0ffff17 	ldw	r3,-4(fp)
   457bc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   457c0:	e0bffe17 	ldw	r2,-8(fp)
   457c4:	10000526 	beq	r2,zero,457dc <alt_iic_isr_register+0xb4>
   457c8:	e0bff817 	ldw	r2,-32(fp)
   457cc:	100b883a 	mov	r5,r2
   457d0:	e13ffc17 	ldw	r4,-16(fp)
   457d4:	00455c80 	call	455c8 <alt_ic_irq_enable>
   457d8:	00000406 	br	457ec <alt_iic_isr_register+0xc4>
   457dc:	e0bff817 	ldw	r2,-32(fp)
   457e0:	100b883a 	mov	r5,r2
   457e4:	e13ffc17 	ldw	r4,-16(fp)
   457e8:	00456500 	call	45650 <alt_ic_irq_disable>
   457ec:	e0bff715 	stw	r2,-36(fp)
   457f0:	e0bffa17 	ldw	r2,-24(fp)
   457f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   457f8:	e0bff917 	ldw	r2,-28(fp)
   457fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   45800:	e0bff717 	ldw	r2,-36(fp)
}
   45804:	e037883a 	mov	sp,fp
   45808:	dfc00117 	ldw	ra,4(sp)
   4580c:	df000017 	ldw	fp,0(sp)
   45810:	dec00204 	addi	sp,sp,8
   45814:	f800283a 	ret

00045818 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   45818:	defff904 	addi	sp,sp,-28
   4581c:	dfc00615 	stw	ra,24(sp)
   45820:	df000515 	stw	fp,20(sp)
   45824:	df000504 	addi	fp,sp,20
   45828:	e13ffc15 	stw	r4,-16(fp)
   4582c:	e17ffd15 	stw	r5,-12(fp)
   45830:	e1bffe15 	stw	r6,-8(fp)
   45834:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   45838:	e1bfff17 	ldw	r6,-4(fp)
   4583c:	e17ffe17 	ldw	r5,-8(fp)
   45840:	e13ffd17 	ldw	r4,-12(fp)
   45844:	0045a580 	call	45a58 <open>
   45848:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4584c:	e0bffb17 	ldw	r2,-20(fp)
   45850:	10001c16 	blt	r2,zero,458c4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   45854:	00800134 	movhi	r2,4
   45858:	109b9b04 	addi	r2,r2,28268
   4585c:	e0fffb17 	ldw	r3,-20(fp)
   45860:	18c00324 	muli	r3,r3,12
   45864:	10c5883a 	add	r2,r2,r3
   45868:	10c00017 	ldw	r3,0(r2)
   4586c:	e0bffc17 	ldw	r2,-16(fp)
   45870:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   45874:	00800134 	movhi	r2,4
   45878:	109b9b04 	addi	r2,r2,28268
   4587c:	e0fffb17 	ldw	r3,-20(fp)
   45880:	18c00324 	muli	r3,r3,12
   45884:	10c5883a 	add	r2,r2,r3
   45888:	10800104 	addi	r2,r2,4
   4588c:	10c00017 	ldw	r3,0(r2)
   45890:	e0bffc17 	ldw	r2,-16(fp)
   45894:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   45898:	00800134 	movhi	r2,4
   4589c:	109b9b04 	addi	r2,r2,28268
   458a0:	e0fffb17 	ldw	r3,-20(fp)
   458a4:	18c00324 	muli	r3,r3,12
   458a8:	10c5883a 	add	r2,r2,r3
   458ac:	10800204 	addi	r2,r2,8
   458b0:	10c00017 	ldw	r3,0(r2)
   458b4:	e0bffc17 	ldw	r2,-16(fp)
   458b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   458bc:	e13ffb17 	ldw	r4,-20(fp)
   458c0:	00444cc0 	call	444cc <alt_release_fd>
  }
} 
   458c4:	0001883a 	nop
   458c8:	e037883a 	mov	sp,fp
   458cc:	dfc00117 	ldw	ra,4(sp)
   458d0:	df000017 	ldw	fp,0(sp)
   458d4:	dec00204 	addi	sp,sp,8
   458d8:	f800283a 	ret

000458dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   458dc:	defffb04 	addi	sp,sp,-20
   458e0:	dfc00415 	stw	ra,16(sp)
   458e4:	df000315 	stw	fp,12(sp)
   458e8:	df000304 	addi	fp,sp,12
   458ec:	e13ffd15 	stw	r4,-12(fp)
   458f0:	e17ffe15 	stw	r5,-8(fp)
   458f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   458f8:	01c07fc4 	movi	r7,511
   458fc:	01800044 	movi	r6,1
   45900:	e17ffd17 	ldw	r5,-12(fp)
   45904:	01000134 	movhi	r4,4
   45908:	211b9e04 	addi	r4,r4,28280
   4590c:	00458180 	call	45818 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   45910:	01c07fc4 	movi	r7,511
   45914:	000d883a 	mov	r6,zero
   45918:	e17ffe17 	ldw	r5,-8(fp)
   4591c:	01000134 	movhi	r4,4
   45920:	211b9b04 	addi	r4,r4,28268
   45924:	00458180 	call	45818 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   45928:	01c07fc4 	movi	r7,511
   4592c:	01800044 	movi	r6,1
   45930:	e17fff17 	ldw	r5,-4(fp)
   45934:	01000134 	movhi	r4,4
   45938:	211ba104 	addi	r4,r4,28292
   4593c:	00458180 	call	45818 <alt_open_fd>
}  
   45940:	0001883a 	nop
   45944:	e037883a 	mov	sp,fp
   45948:	dfc00117 	ldw	ra,4(sp)
   4594c:	df000017 	ldw	fp,0(sp)
   45950:	dec00204 	addi	sp,sp,8
   45954:	f800283a 	ret

00045958 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45958:	defffe04 	addi	sp,sp,-8
   4595c:	dfc00115 	stw	ra,4(sp)
   45960:	df000015 	stw	fp,0(sp)
   45964:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45968:	d0a00c17 	ldw	r2,-32720(gp)
   4596c:	10000326 	beq	r2,zero,4597c <alt_get_errno+0x24>
   45970:	d0a00c17 	ldw	r2,-32720(gp)
   45974:	103ee83a 	callr	r2
   45978:	00000106 	br	45980 <alt_get_errno+0x28>
   4597c:	d0a6bc04 	addi	r2,gp,-25872
}
   45980:	e037883a 	mov	sp,fp
   45984:	dfc00117 	ldw	ra,4(sp)
   45988:	df000017 	ldw	fp,0(sp)
   4598c:	dec00204 	addi	sp,sp,8
   45990:	f800283a 	ret

00045994 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   45994:	defffd04 	addi	sp,sp,-12
   45998:	df000215 	stw	fp,8(sp)
   4599c:	df000204 	addi	fp,sp,8
   459a0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   459a4:	e0bfff17 	ldw	r2,-4(fp)
   459a8:	10800217 	ldw	r2,8(r2)
   459ac:	10d00034 	orhi	r3,r2,16384
   459b0:	e0bfff17 	ldw	r2,-4(fp)
   459b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   459b8:	e03ffe15 	stw	zero,-8(fp)
   459bc:	00001d06 	br	45a34 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   459c0:	00800134 	movhi	r2,4
   459c4:	109b9b04 	addi	r2,r2,28268
   459c8:	e0fffe17 	ldw	r3,-8(fp)
   459cc:	18c00324 	muli	r3,r3,12
   459d0:	10c5883a 	add	r2,r2,r3
   459d4:	10c00017 	ldw	r3,0(r2)
   459d8:	e0bfff17 	ldw	r2,-4(fp)
   459dc:	10800017 	ldw	r2,0(r2)
   459e0:	1880111e 	bne	r3,r2,45a28 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   459e4:	00800134 	movhi	r2,4
   459e8:	109b9b04 	addi	r2,r2,28268
   459ec:	e0fffe17 	ldw	r3,-8(fp)
   459f0:	18c00324 	muli	r3,r3,12
   459f4:	10c5883a 	add	r2,r2,r3
   459f8:	10800204 	addi	r2,r2,8
   459fc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45a00:	1000090e 	bge	r2,zero,45a28 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   45a04:	e0bffe17 	ldw	r2,-8(fp)
   45a08:	10c00324 	muli	r3,r2,12
   45a0c:	00800134 	movhi	r2,4
   45a10:	109b9b04 	addi	r2,r2,28268
   45a14:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45a18:	e0bfff17 	ldw	r2,-4(fp)
   45a1c:	18800226 	beq	r3,r2,45a28 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   45a20:	00bffcc4 	movi	r2,-13
   45a24:	00000806 	br	45a48 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45a28:	e0bffe17 	ldw	r2,-8(fp)
   45a2c:	10800044 	addi	r2,r2,1
   45a30:	e0bffe15 	stw	r2,-8(fp)
   45a34:	d0a00b17 	ldw	r2,-32724(gp)
   45a38:	1007883a 	mov	r3,r2
   45a3c:	e0bffe17 	ldw	r2,-8(fp)
   45a40:	18bfdf2e 	bgeu	r3,r2,459c0 <__alt_data_end+0xfffde8c0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   45a44:	0005883a 	mov	r2,zero
}
   45a48:	e037883a 	mov	sp,fp
   45a4c:	df000017 	ldw	fp,0(sp)
   45a50:	dec00104 	addi	sp,sp,4
   45a54:	f800283a 	ret

00045a58 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   45a58:	defff604 	addi	sp,sp,-40
   45a5c:	dfc00915 	stw	ra,36(sp)
   45a60:	df000815 	stw	fp,32(sp)
   45a64:	df000804 	addi	fp,sp,32
   45a68:	e13ffd15 	stw	r4,-12(fp)
   45a6c:	e17ffe15 	stw	r5,-8(fp)
   45a70:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   45a74:	00bfffc4 	movi	r2,-1
   45a78:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   45a7c:	00bffb44 	movi	r2,-19
   45a80:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   45a84:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   45a88:	d1600904 	addi	r5,gp,-32732
   45a8c:	e13ffd17 	ldw	r4,-12(fp)
   45a90:	0045d740 	call	45d74 <alt_find_dev>
   45a94:	e0bff815 	stw	r2,-32(fp)
   45a98:	e0bff817 	ldw	r2,-32(fp)
   45a9c:	1000051e 	bne	r2,zero,45ab4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   45aa0:	e13ffd17 	ldw	r4,-12(fp)
   45aa4:	0045e040 	call	45e04 <alt_find_file>
   45aa8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   45aac:	00800044 	movi	r2,1
   45ab0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   45ab4:	e0bff817 	ldw	r2,-32(fp)
   45ab8:	10002926 	beq	r2,zero,45b60 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   45abc:	e13ff817 	ldw	r4,-32(fp)
   45ac0:	0045f0c0 	call	45f0c <alt_get_fd>
   45ac4:	e0bff915 	stw	r2,-28(fp)
   45ac8:	e0bff917 	ldw	r2,-28(fp)
   45acc:	1000030e 	bge	r2,zero,45adc <open+0x84>
    {
      status = index;
   45ad0:	e0bff917 	ldw	r2,-28(fp)
   45ad4:	e0bffa15 	stw	r2,-24(fp)
   45ad8:	00002306 	br	45b68 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   45adc:	e0bff917 	ldw	r2,-28(fp)
   45ae0:	10c00324 	muli	r3,r2,12
   45ae4:	00800134 	movhi	r2,4
   45ae8:	109b9b04 	addi	r2,r2,28268
   45aec:	1885883a 	add	r2,r3,r2
   45af0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   45af4:	e0fffe17 	ldw	r3,-8(fp)
   45af8:	00900034 	movhi	r2,16384
   45afc:	10bfffc4 	addi	r2,r2,-1
   45b00:	1886703a 	and	r3,r3,r2
   45b04:	e0bffc17 	ldw	r2,-16(fp)
   45b08:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   45b0c:	e0bffb17 	ldw	r2,-20(fp)
   45b10:	1000051e 	bne	r2,zero,45b28 <open+0xd0>
   45b14:	e13ffc17 	ldw	r4,-16(fp)
   45b18:	00459940 	call	45994 <alt_file_locked>
   45b1c:	e0bffa15 	stw	r2,-24(fp)
   45b20:	e0bffa17 	ldw	r2,-24(fp)
   45b24:	10001016 	blt	r2,zero,45b68 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   45b28:	e0bff817 	ldw	r2,-32(fp)
   45b2c:	10800317 	ldw	r2,12(r2)
   45b30:	10000826 	beq	r2,zero,45b54 <open+0xfc>
   45b34:	e0bff817 	ldw	r2,-32(fp)
   45b38:	10800317 	ldw	r2,12(r2)
   45b3c:	e1ffff17 	ldw	r7,-4(fp)
   45b40:	e1bffe17 	ldw	r6,-8(fp)
   45b44:	e17ffd17 	ldw	r5,-12(fp)
   45b48:	e13ffc17 	ldw	r4,-16(fp)
   45b4c:	103ee83a 	callr	r2
   45b50:	00000106 	br	45b58 <open+0x100>
   45b54:	0005883a 	mov	r2,zero
   45b58:	e0bffa15 	stw	r2,-24(fp)
   45b5c:	00000206 	br	45b68 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   45b60:	00bffb44 	movi	r2,-19
   45b64:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   45b68:	e0bffa17 	ldw	r2,-24(fp)
   45b6c:	1000090e 	bge	r2,zero,45b94 <open+0x13c>
  {
    alt_release_fd (index);  
   45b70:	e13ff917 	ldw	r4,-28(fp)
   45b74:	00444cc0 	call	444cc <alt_release_fd>
    ALT_ERRNO = -status;
   45b78:	00459580 	call	45958 <alt_get_errno>
   45b7c:	1007883a 	mov	r3,r2
   45b80:	e0bffa17 	ldw	r2,-24(fp)
   45b84:	0085c83a 	sub	r2,zero,r2
   45b88:	18800015 	stw	r2,0(r3)
    return -1;
   45b8c:	00bfffc4 	movi	r2,-1
   45b90:	00000106 	br	45b98 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   45b94:	e0bff917 	ldw	r2,-28(fp)
}
   45b98:	e037883a 	mov	sp,fp
   45b9c:	dfc00117 	ldw	ra,4(sp)
   45ba0:	df000017 	ldw	fp,0(sp)
   45ba4:	dec00204 	addi	sp,sp,8
   45ba8:	f800283a 	ret

00045bac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   45bac:	defffa04 	addi	sp,sp,-24
   45bb0:	df000515 	stw	fp,20(sp)
   45bb4:	df000504 	addi	fp,sp,20
   45bb8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45bbc:	0005303a 	rdctl	r2,status
   45bc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45bc4:	e0fffc17 	ldw	r3,-16(fp)
   45bc8:	00bfff84 	movi	r2,-2
   45bcc:	1884703a 	and	r2,r3,r2
   45bd0:	1001703a 	wrctl	status,r2
  
  return context;
   45bd4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   45bd8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   45bdc:	e0bfff17 	ldw	r2,-4(fp)
   45be0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   45be4:	e0bffd17 	ldw	r2,-12(fp)
   45be8:	10800017 	ldw	r2,0(r2)
   45bec:	e0fffd17 	ldw	r3,-12(fp)
   45bf0:	18c00117 	ldw	r3,4(r3)
   45bf4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   45bf8:	e0bffd17 	ldw	r2,-12(fp)
   45bfc:	10800117 	ldw	r2,4(r2)
   45c00:	e0fffd17 	ldw	r3,-12(fp)
   45c04:	18c00017 	ldw	r3,0(r3)
   45c08:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   45c0c:	e0bffd17 	ldw	r2,-12(fp)
   45c10:	e0fffd17 	ldw	r3,-12(fp)
   45c14:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   45c18:	e0bffd17 	ldw	r2,-12(fp)
   45c1c:	e0fffd17 	ldw	r3,-12(fp)
   45c20:	10c00015 	stw	r3,0(r2)
   45c24:	e0bffb17 	ldw	r2,-20(fp)
   45c28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45c2c:	e0bffe17 	ldw	r2,-8(fp)
   45c30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   45c34:	0001883a 	nop
   45c38:	e037883a 	mov	sp,fp
   45c3c:	df000017 	ldw	fp,0(sp)
   45c40:	dec00104 	addi	sp,sp,4
   45c44:	f800283a 	ret

00045c48 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   45c48:	defffb04 	addi	sp,sp,-20
   45c4c:	dfc00415 	stw	ra,16(sp)
   45c50:	df000315 	stw	fp,12(sp)
   45c54:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   45c58:	d0a00f17 	ldw	r2,-32708(gp)
   45c5c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   45c60:	d0a6c217 	ldw	r2,-25848(gp)
   45c64:	10800044 	addi	r2,r2,1
   45c68:	d0a6c215 	stw	r2,-25848(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45c6c:	00002e06 	br	45d28 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   45c70:	e0bffd17 	ldw	r2,-12(fp)
   45c74:	10800017 	ldw	r2,0(r2)
   45c78:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   45c7c:	e0bffd17 	ldw	r2,-12(fp)
   45c80:	10800403 	ldbu	r2,16(r2)
   45c84:	10803fcc 	andi	r2,r2,255
   45c88:	10000426 	beq	r2,zero,45c9c <alt_tick+0x54>
   45c8c:	d0a6c217 	ldw	r2,-25848(gp)
   45c90:	1000021e 	bne	r2,zero,45c9c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   45c94:	e0bffd17 	ldw	r2,-12(fp)
   45c98:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   45c9c:	e0bffd17 	ldw	r2,-12(fp)
   45ca0:	10800217 	ldw	r2,8(r2)
   45ca4:	d0e6c217 	ldw	r3,-25848(gp)
   45ca8:	18801d36 	bltu	r3,r2,45d20 <alt_tick+0xd8>
   45cac:	e0bffd17 	ldw	r2,-12(fp)
   45cb0:	10800403 	ldbu	r2,16(r2)
   45cb4:	10803fcc 	andi	r2,r2,255
   45cb8:	1000191e 	bne	r2,zero,45d20 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   45cbc:	e0bffd17 	ldw	r2,-12(fp)
   45cc0:	10800317 	ldw	r2,12(r2)
   45cc4:	e0fffd17 	ldw	r3,-12(fp)
   45cc8:	18c00517 	ldw	r3,20(r3)
   45ccc:	1809883a 	mov	r4,r3
   45cd0:	103ee83a 	callr	r2
   45cd4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   45cd8:	e0bfff17 	ldw	r2,-4(fp)
   45cdc:	1000031e 	bne	r2,zero,45cec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   45ce0:	e13ffd17 	ldw	r4,-12(fp)
   45ce4:	0045bac0 	call	45bac <alt_alarm_stop>
   45ce8:	00000d06 	br	45d20 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   45cec:	e0bffd17 	ldw	r2,-12(fp)
   45cf0:	10c00217 	ldw	r3,8(r2)
   45cf4:	e0bfff17 	ldw	r2,-4(fp)
   45cf8:	1887883a 	add	r3,r3,r2
   45cfc:	e0bffd17 	ldw	r2,-12(fp)
   45d00:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   45d04:	e0bffd17 	ldw	r2,-12(fp)
   45d08:	10c00217 	ldw	r3,8(r2)
   45d0c:	d0a6c217 	ldw	r2,-25848(gp)
   45d10:	1880032e 	bgeu	r3,r2,45d20 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   45d14:	e0bffd17 	ldw	r2,-12(fp)
   45d18:	00c00044 	movi	r3,1
   45d1c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   45d20:	e0bffe17 	ldw	r2,-8(fp)
   45d24:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45d28:	e0fffd17 	ldw	r3,-12(fp)
   45d2c:	d0a00f04 	addi	r2,gp,-32708
   45d30:	18bfcf1e 	bne	r3,r2,45c70 <__alt_data_end+0xfffdeb70>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   45d34:	0001883a 	nop
}
   45d38:	0001883a 	nop
   45d3c:	e037883a 	mov	sp,fp
   45d40:	dfc00117 	ldw	ra,4(sp)
   45d44:	df000017 	ldw	fp,0(sp)
   45d48:	dec00204 	addi	sp,sp,8
   45d4c:	f800283a 	ret

00045d50 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   45d50:	deffff04 	addi	sp,sp,-4
   45d54:	df000015 	stw	fp,0(sp)
   45d58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   45d5c:	000170fa 	wrctl	ienable,zero
}
   45d60:	0001883a 	nop
   45d64:	e037883a 	mov	sp,fp
   45d68:	df000017 	ldw	fp,0(sp)
   45d6c:	dec00104 	addi	sp,sp,4
   45d70:	f800283a 	ret

00045d74 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   45d74:	defffa04 	addi	sp,sp,-24
   45d78:	dfc00515 	stw	ra,20(sp)
   45d7c:	df000415 	stw	fp,16(sp)
   45d80:	df000404 	addi	fp,sp,16
   45d84:	e13ffe15 	stw	r4,-8(fp)
   45d88:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   45d8c:	e0bfff17 	ldw	r2,-4(fp)
   45d90:	10800017 	ldw	r2,0(r2)
   45d94:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   45d98:	e13ffe17 	ldw	r4,-8(fp)
   45d9c:	00412900 	call	41290 <strlen>
   45da0:	10800044 	addi	r2,r2,1
   45da4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45da8:	00000d06 	br	45de0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   45dac:	e0bffc17 	ldw	r2,-16(fp)
   45db0:	10800217 	ldw	r2,8(r2)
   45db4:	e0fffd17 	ldw	r3,-12(fp)
   45db8:	180d883a 	mov	r6,r3
   45dbc:	e17ffe17 	ldw	r5,-8(fp)
   45dc0:	1009883a 	mov	r4,r2
   45dc4:	00461280 	call	46128 <memcmp>
   45dc8:	1000021e 	bne	r2,zero,45dd4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   45dcc:	e0bffc17 	ldw	r2,-16(fp)
   45dd0:	00000706 	br	45df0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   45dd4:	e0bffc17 	ldw	r2,-16(fp)
   45dd8:	10800017 	ldw	r2,0(r2)
   45ddc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45de0:	e0fffc17 	ldw	r3,-16(fp)
   45de4:	e0bfff17 	ldw	r2,-4(fp)
   45de8:	18bff01e 	bne	r3,r2,45dac <__alt_data_end+0xfffdecac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   45dec:	0005883a 	mov	r2,zero
}
   45df0:	e037883a 	mov	sp,fp
   45df4:	dfc00117 	ldw	ra,4(sp)
   45df8:	df000017 	ldw	fp,0(sp)
   45dfc:	dec00204 	addi	sp,sp,8
   45e00:	f800283a 	ret

00045e04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   45e04:	defffb04 	addi	sp,sp,-20
   45e08:	dfc00415 	stw	ra,16(sp)
   45e0c:	df000315 	stw	fp,12(sp)
   45e10:	df000304 	addi	fp,sp,12
   45e14:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   45e18:	d0a00717 	ldw	r2,-32740(gp)
   45e1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45e20:	00003106 	br	45ee8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   45e24:	e0bffd17 	ldw	r2,-12(fp)
   45e28:	10800217 	ldw	r2,8(r2)
   45e2c:	1009883a 	mov	r4,r2
   45e30:	00412900 	call	41290 <strlen>
   45e34:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   45e38:	e0bffd17 	ldw	r2,-12(fp)
   45e3c:	10c00217 	ldw	r3,8(r2)
   45e40:	e0bffe17 	ldw	r2,-8(fp)
   45e44:	10bfffc4 	addi	r2,r2,-1
   45e48:	1885883a 	add	r2,r3,r2
   45e4c:	10800003 	ldbu	r2,0(r2)
   45e50:	10803fcc 	andi	r2,r2,255
   45e54:	1080201c 	xori	r2,r2,128
   45e58:	10bfe004 	addi	r2,r2,-128
   45e5c:	10800bd8 	cmpnei	r2,r2,47
   45e60:	1000031e 	bne	r2,zero,45e70 <alt_find_file+0x6c>
    {
      len -= 1;
   45e64:	e0bffe17 	ldw	r2,-8(fp)
   45e68:	10bfffc4 	addi	r2,r2,-1
   45e6c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45e70:	e0bffe17 	ldw	r2,-8(fp)
   45e74:	e0ffff17 	ldw	r3,-4(fp)
   45e78:	1885883a 	add	r2,r3,r2
   45e7c:	10800003 	ldbu	r2,0(r2)
   45e80:	10803fcc 	andi	r2,r2,255
   45e84:	1080201c 	xori	r2,r2,128
   45e88:	10bfe004 	addi	r2,r2,-128
   45e8c:	10800be0 	cmpeqi	r2,r2,47
   45e90:	1000081e 	bne	r2,zero,45eb4 <alt_find_file+0xb0>
   45e94:	e0bffe17 	ldw	r2,-8(fp)
   45e98:	e0ffff17 	ldw	r3,-4(fp)
   45e9c:	1885883a 	add	r2,r3,r2
   45ea0:	10800003 	ldbu	r2,0(r2)
   45ea4:	10803fcc 	andi	r2,r2,255
   45ea8:	1080201c 	xori	r2,r2,128
   45eac:	10bfe004 	addi	r2,r2,-128
   45eb0:	10000a1e 	bne	r2,zero,45edc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   45eb4:	e0bffd17 	ldw	r2,-12(fp)
   45eb8:	10800217 	ldw	r2,8(r2)
   45ebc:	e0fffe17 	ldw	r3,-8(fp)
   45ec0:	180d883a 	mov	r6,r3
   45ec4:	e17fff17 	ldw	r5,-4(fp)
   45ec8:	1009883a 	mov	r4,r2
   45ecc:	00461280 	call	46128 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45ed0:	1000021e 	bne	r2,zero,45edc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   45ed4:	e0bffd17 	ldw	r2,-12(fp)
   45ed8:	00000706 	br	45ef8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   45edc:	e0bffd17 	ldw	r2,-12(fp)
   45ee0:	10800017 	ldw	r2,0(r2)
   45ee4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45ee8:	e0fffd17 	ldw	r3,-12(fp)
   45eec:	d0a00704 	addi	r2,gp,-32740
   45ef0:	18bfcc1e 	bne	r3,r2,45e24 <__alt_data_end+0xfffded24>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   45ef4:	0005883a 	mov	r2,zero
}
   45ef8:	e037883a 	mov	sp,fp
   45efc:	dfc00117 	ldw	ra,4(sp)
   45f00:	df000017 	ldw	fp,0(sp)
   45f04:	dec00204 	addi	sp,sp,8
   45f08:	f800283a 	ret

00045f0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   45f0c:	defffc04 	addi	sp,sp,-16
   45f10:	df000315 	stw	fp,12(sp)
   45f14:	df000304 	addi	fp,sp,12
   45f18:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   45f1c:	00bffa04 	movi	r2,-24
   45f20:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   45f24:	e03ffd15 	stw	zero,-12(fp)
   45f28:	00001906 	br	45f90 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   45f2c:	00800134 	movhi	r2,4
   45f30:	109b9b04 	addi	r2,r2,28268
   45f34:	e0fffd17 	ldw	r3,-12(fp)
   45f38:	18c00324 	muli	r3,r3,12
   45f3c:	10c5883a 	add	r2,r2,r3
   45f40:	10800017 	ldw	r2,0(r2)
   45f44:	10000f1e 	bne	r2,zero,45f84 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   45f48:	00800134 	movhi	r2,4
   45f4c:	109b9b04 	addi	r2,r2,28268
   45f50:	e0fffd17 	ldw	r3,-12(fp)
   45f54:	18c00324 	muli	r3,r3,12
   45f58:	10c5883a 	add	r2,r2,r3
   45f5c:	e0ffff17 	ldw	r3,-4(fp)
   45f60:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   45f64:	d0e00b17 	ldw	r3,-32724(gp)
   45f68:	e0bffd17 	ldw	r2,-12(fp)
   45f6c:	1880020e 	bge	r3,r2,45f78 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   45f70:	e0bffd17 	ldw	r2,-12(fp)
   45f74:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   45f78:	e0bffd17 	ldw	r2,-12(fp)
   45f7c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   45f80:	00000606 	br	45f9c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   45f84:	e0bffd17 	ldw	r2,-12(fp)
   45f88:	10800044 	addi	r2,r2,1
   45f8c:	e0bffd15 	stw	r2,-12(fp)
   45f90:	e0bffd17 	ldw	r2,-12(fp)
   45f94:	10800810 	cmplti	r2,r2,32
   45f98:	103fe41e 	bne	r2,zero,45f2c <__alt_data_end+0xfffdee2c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   45f9c:	e0bffe17 	ldw	r2,-8(fp)
}
   45fa0:	e037883a 	mov	sp,fp
   45fa4:	df000017 	ldw	fp,0(sp)
   45fa8:	dec00104 	addi	sp,sp,4
   45fac:	f800283a 	ret

00045fb0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   45fb0:	defffb04 	addi	sp,sp,-20
   45fb4:	df000415 	stw	fp,16(sp)
   45fb8:	df000404 	addi	fp,sp,16
   45fbc:	e13ffe15 	stw	r4,-8(fp)
   45fc0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   45fc4:	e0bfff17 	ldw	r2,-4(fp)
   45fc8:	10880070 	cmpltui	r2,r2,8193
   45fcc:	1000021e 	bne	r2,zero,45fd8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   45fd0:	00880004 	movi	r2,8192
   45fd4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   45fd8:	e0fffe17 	ldw	r3,-8(fp)
   45fdc:	e0bfff17 	ldw	r2,-4(fp)
   45fe0:	1885883a 	add	r2,r3,r2
   45fe4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   45fe8:	e0bffe17 	ldw	r2,-8(fp)
   45fec:	e0bffc15 	stw	r2,-16(fp)
   45ff0:	00000506 	br	46008 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   45ff4:	e0bffc17 	ldw	r2,-16(fp)
   45ff8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   45ffc:	e0bffc17 	ldw	r2,-16(fp)
   46000:	10800804 	addi	r2,r2,32
   46004:	e0bffc15 	stw	r2,-16(fp)
   46008:	e0fffc17 	ldw	r3,-16(fp)
   4600c:	e0bffd17 	ldw	r2,-12(fp)
   46010:	18bff836 	bltu	r3,r2,45ff4 <__alt_data_end+0xfffdeef4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   46014:	e0bffe17 	ldw	r2,-8(fp)
   46018:	108007cc 	andi	r2,r2,31
   4601c:	10000226 	beq	r2,zero,46028 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   46020:	e0bffc17 	ldw	r2,-16(fp)
   46024:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   46028:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4602c:	0001883a 	nop
   46030:	e037883a 	mov	sp,fp
   46034:	df000017 	ldw	fp,0(sp)
   46038:	dec00104 	addi	sp,sp,4
   4603c:	f800283a 	ret

00046040 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   46040:	defffe04 	addi	sp,sp,-8
   46044:	df000115 	stw	fp,4(sp)
   46048:	df000104 	addi	fp,sp,4
   4604c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   46050:	e0bfff17 	ldw	r2,-4(fp)
   46054:	10bffe84 	addi	r2,r2,-6
   46058:	10c00428 	cmpgeui	r3,r2,16
   4605c:	18001a1e 	bne	r3,zero,460c8 <alt_exception_cause_generated_bad_addr+0x88>
   46060:	100690ba 	slli	r3,r2,2
   46064:	00800134 	movhi	r2,4
   46068:	10981e04 	addi	r2,r2,24696
   4606c:	1885883a 	add	r2,r3,r2
   46070:	10800017 	ldw	r2,0(r2)
   46074:	1000683a 	jmp	r2
   46078:	000460b8 	rdprs	zero,zero,4482
   4607c:	000460b8 	rdprs	zero,zero,4482
   46080:	000460c8 	cmpgei	zero,zero,4483
   46084:	000460c8 	cmpgei	zero,zero,4483
   46088:	000460c8 	cmpgei	zero,zero,4483
   4608c:	000460b8 	rdprs	zero,zero,4482
   46090:	000460c0 	call	460c <__alt_mem_onchip_memory-0x3b9f4>
   46094:	000460c8 	cmpgei	zero,zero,4483
   46098:	000460b8 	rdprs	zero,zero,4482
   4609c:	000460b8 	rdprs	zero,zero,4482
   460a0:	000460c8 	cmpgei	zero,zero,4483
   460a4:	000460b8 	rdprs	zero,zero,4482
   460a8:	000460c0 	call	460c <__alt_mem_onchip_memory-0x3b9f4>
   460ac:	000460c8 	cmpgei	zero,zero,4483
   460b0:	000460c8 	cmpgei	zero,zero,4483
   460b4:	000460b8 	rdprs	zero,zero,4482
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   460b8:	00800044 	movi	r2,1
   460bc:	00000306 	br	460cc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   460c0:	0005883a 	mov	r2,zero
   460c4:	00000106 	br	460cc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   460c8:	0005883a 	mov	r2,zero
  }
}
   460cc:	e037883a 	mov	sp,fp
   460d0:	df000017 	ldw	fp,0(sp)
   460d4:	dec00104 	addi	sp,sp,4
   460d8:	f800283a 	ret

000460dc <atexit>:
   460dc:	200b883a 	mov	r5,r4
   460e0:	000f883a 	mov	r7,zero
   460e4:	000d883a 	mov	r6,zero
   460e8:	0009883a 	mov	r4,zero
   460ec:	00461a41 	jmpi	461a4 <__register_exitproc>

000460f0 <exit>:
   460f0:	defffe04 	addi	sp,sp,-8
   460f4:	000b883a 	mov	r5,zero
   460f8:	dc000015 	stw	r16,0(sp)
   460fc:	dfc00115 	stw	ra,4(sp)
   46100:	2021883a 	mov	r16,r4
   46104:	00462bc0 	call	462bc <__call_exitprocs>
   46108:	00800174 	movhi	r2,5
   4610c:	10a01604 	addi	r2,r2,-32680
   46110:	11000017 	ldw	r4,0(r2)
   46114:	20800f17 	ldw	r2,60(r4)
   46118:	10000126 	beq	r2,zero,46120 <exit+0x30>
   4611c:	103ee83a 	callr	r2
   46120:	8009883a 	mov	r4,r16
   46124:	004643c0 	call	4643c <_exit>

00046128 <memcmp>:
   46128:	01c000c4 	movi	r7,3
   4612c:	3980192e 	bgeu	r7,r6,46194 <memcmp+0x6c>
   46130:	2144b03a 	or	r2,r4,r5
   46134:	11c4703a 	and	r2,r2,r7
   46138:	10000f26 	beq	r2,zero,46178 <memcmp+0x50>
   4613c:	20800003 	ldbu	r2,0(r4)
   46140:	28c00003 	ldbu	r3,0(r5)
   46144:	10c0151e 	bne	r2,r3,4619c <memcmp+0x74>
   46148:	31bfff84 	addi	r6,r6,-2
   4614c:	01ffffc4 	movi	r7,-1
   46150:	00000406 	br	46164 <memcmp+0x3c>
   46154:	20800003 	ldbu	r2,0(r4)
   46158:	28c00003 	ldbu	r3,0(r5)
   4615c:	31bfffc4 	addi	r6,r6,-1
   46160:	10c00e1e 	bne	r2,r3,4619c <memcmp+0x74>
   46164:	21000044 	addi	r4,r4,1
   46168:	29400044 	addi	r5,r5,1
   4616c:	31fff91e 	bne	r6,r7,46154 <__alt_data_end+0xfffdf054>
   46170:	0005883a 	mov	r2,zero
   46174:	f800283a 	ret
   46178:	20c00017 	ldw	r3,0(r4)
   4617c:	28800017 	ldw	r2,0(r5)
   46180:	18bfee1e 	bne	r3,r2,4613c <__alt_data_end+0xfffdf03c>
   46184:	31bfff04 	addi	r6,r6,-4
   46188:	21000104 	addi	r4,r4,4
   4618c:	29400104 	addi	r5,r5,4
   46190:	39bff936 	bltu	r7,r6,46178 <__alt_data_end+0xfffdf078>
   46194:	303fe91e 	bne	r6,zero,4613c <__alt_data_end+0xfffdf03c>
   46198:	003ff506 	br	46170 <__alt_data_end+0xfffdf070>
   4619c:	10c5c83a 	sub	r2,r2,r3
   461a0:	f800283a 	ret

000461a4 <__register_exitproc>:
   461a4:	defffa04 	addi	sp,sp,-24
   461a8:	dc000315 	stw	r16,12(sp)
   461ac:	04000174 	movhi	r16,5
   461b0:	84201604 	addi	r16,r16,-32680
   461b4:	80c00017 	ldw	r3,0(r16)
   461b8:	dc400415 	stw	r17,16(sp)
   461bc:	dfc00515 	stw	ra,20(sp)
   461c0:	18805217 	ldw	r2,328(r3)
   461c4:	2023883a 	mov	r17,r4
   461c8:	10003726 	beq	r2,zero,462a8 <__register_exitproc+0x104>
   461cc:	10c00117 	ldw	r3,4(r2)
   461d0:	010007c4 	movi	r4,31
   461d4:	20c00e16 	blt	r4,r3,46210 <__register_exitproc+0x6c>
   461d8:	1a000044 	addi	r8,r3,1
   461dc:	8800221e 	bne	r17,zero,46268 <__register_exitproc+0xc4>
   461e0:	18c00084 	addi	r3,r3,2
   461e4:	18c7883a 	add	r3,r3,r3
   461e8:	18c7883a 	add	r3,r3,r3
   461ec:	12000115 	stw	r8,4(r2)
   461f0:	10c7883a 	add	r3,r2,r3
   461f4:	19400015 	stw	r5,0(r3)
   461f8:	0005883a 	mov	r2,zero
   461fc:	dfc00517 	ldw	ra,20(sp)
   46200:	dc400417 	ldw	r17,16(sp)
   46204:	dc000317 	ldw	r16,12(sp)
   46208:	dec00604 	addi	sp,sp,24
   4620c:	f800283a 	ret
   46210:	00800034 	movhi	r2,0
   46214:	10800004 	addi	r2,r2,0
   46218:	10002626 	beq	r2,zero,462b4 <__register_exitproc+0x110>
   4621c:	01006404 	movi	r4,400
   46220:	d9400015 	stw	r5,0(sp)
   46224:	d9800115 	stw	r6,4(sp)
   46228:	d9c00215 	stw	r7,8(sp)
   4622c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   46230:	d9400017 	ldw	r5,0(sp)
   46234:	d9800117 	ldw	r6,4(sp)
   46238:	d9c00217 	ldw	r7,8(sp)
   4623c:	10001d26 	beq	r2,zero,462b4 <__register_exitproc+0x110>
   46240:	81000017 	ldw	r4,0(r16)
   46244:	10000115 	stw	zero,4(r2)
   46248:	02000044 	movi	r8,1
   4624c:	22405217 	ldw	r9,328(r4)
   46250:	0007883a 	mov	r3,zero
   46254:	12400015 	stw	r9,0(r2)
   46258:	20805215 	stw	r2,328(r4)
   4625c:	10006215 	stw	zero,392(r2)
   46260:	10006315 	stw	zero,396(r2)
   46264:	883fde26 	beq	r17,zero,461e0 <__alt_data_end+0xfffdf0e0>
   46268:	18c9883a 	add	r4,r3,r3
   4626c:	2109883a 	add	r4,r4,r4
   46270:	1109883a 	add	r4,r2,r4
   46274:	21802215 	stw	r6,136(r4)
   46278:	01800044 	movi	r6,1
   4627c:	12406217 	ldw	r9,392(r2)
   46280:	30cc983a 	sll	r6,r6,r3
   46284:	4992b03a 	or	r9,r9,r6
   46288:	12406215 	stw	r9,392(r2)
   4628c:	21c04215 	stw	r7,264(r4)
   46290:	01000084 	movi	r4,2
   46294:	893fd21e 	bne	r17,r4,461e0 <__alt_data_end+0xfffdf0e0>
   46298:	11006317 	ldw	r4,396(r2)
   4629c:	218cb03a 	or	r6,r4,r6
   462a0:	11806315 	stw	r6,396(r2)
   462a4:	003fce06 	br	461e0 <__alt_data_end+0xfffdf0e0>
   462a8:	18805304 	addi	r2,r3,332
   462ac:	18805215 	stw	r2,328(r3)
   462b0:	003fc606 	br	461cc <__alt_data_end+0xfffdf0cc>
   462b4:	00bfffc4 	movi	r2,-1
   462b8:	003fd006 	br	461fc <__alt_data_end+0xfffdf0fc>

000462bc <__call_exitprocs>:
   462bc:	defff504 	addi	sp,sp,-44
   462c0:	df000915 	stw	fp,36(sp)
   462c4:	dd400615 	stw	r21,24(sp)
   462c8:	dc800315 	stw	r18,12(sp)
   462cc:	dfc00a15 	stw	ra,40(sp)
   462d0:	ddc00815 	stw	r23,32(sp)
   462d4:	dd800715 	stw	r22,28(sp)
   462d8:	dd000515 	stw	r20,20(sp)
   462dc:	dcc00415 	stw	r19,16(sp)
   462e0:	dc400215 	stw	r17,8(sp)
   462e4:	dc000115 	stw	r16,4(sp)
   462e8:	d9000015 	stw	r4,0(sp)
   462ec:	2839883a 	mov	fp,r5
   462f0:	04800044 	movi	r18,1
   462f4:	057fffc4 	movi	r21,-1
   462f8:	00800174 	movhi	r2,5
   462fc:	10a01604 	addi	r2,r2,-32680
   46300:	12000017 	ldw	r8,0(r2)
   46304:	45005217 	ldw	r20,328(r8)
   46308:	44c05204 	addi	r19,r8,328
   4630c:	a0001c26 	beq	r20,zero,46380 <__call_exitprocs+0xc4>
   46310:	a0800117 	ldw	r2,4(r20)
   46314:	15ffffc4 	addi	r23,r2,-1
   46318:	b8000d16 	blt	r23,zero,46350 <__call_exitprocs+0x94>
   4631c:	14000044 	addi	r16,r2,1
   46320:	8421883a 	add	r16,r16,r16
   46324:	8421883a 	add	r16,r16,r16
   46328:	84402004 	addi	r17,r16,128
   4632c:	a463883a 	add	r17,r20,r17
   46330:	a421883a 	add	r16,r20,r16
   46334:	e0001e26 	beq	fp,zero,463b0 <__call_exitprocs+0xf4>
   46338:	80804017 	ldw	r2,256(r16)
   4633c:	e0801c26 	beq	fp,r2,463b0 <__call_exitprocs+0xf4>
   46340:	bdffffc4 	addi	r23,r23,-1
   46344:	843fff04 	addi	r16,r16,-4
   46348:	8c7fff04 	addi	r17,r17,-4
   4634c:	bd7ff91e 	bne	r23,r21,46334 <__alt_data_end+0xfffdf234>
   46350:	00800034 	movhi	r2,0
   46354:	10800004 	addi	r2,r2,0
   46358:	10000926 	beq	r2,zero,46380 <__call_exitprocs+0xc4>
   4635c:	a0800117 	ldw	r2,4(r20)
   46360:	1000301e 	bne	r2,zero,46424 <__call_exitprocs+0x168>
   46364:	a0800017 	ldw	r2,0(r20)
   46368:	10003226 	beq	r2,zero,46434 <__call_exitprocs+0x178>
   4636c:	a009883a 	mov	r4,r20
   46370:	98800015 	stw	r2,0(r19)
   46374:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   46378:	9d000017 	ldw	r20,0(r19)
   4637c:	a03fe41e 	bne	r20,zero,46310 <__alt_data_end+0xfffdf210>
   46380:	dfc00a17 	ldw	ra,40(sp)
   46384:	df000917 	ldw	fp,36(sp)
   46388:	ddc00817 	ldw	r23,32(sp)
   4638c:	dd800717 	ldw	r22,28(sp)
   46390:	dd400617 	ldw	r21,24(sp)
   46394:	dd000517 	ldw	r20,20(sp)
   46398:	dcc00417 	ldw	r19,16(sp)
   4639c:	dc800317 	ldw	r18,12(sp)
   463a0:	dc400217 	ldw	r17,8(sp)
   463a4:	dc000117 	ldw	r16,4(sp)
   463a8:	dec00b04 	addi	sp,sp,44
   463ac:	f800283a 	ret
   463b0:	a0800117 	ldw	r2,4(r20)
   463b4:	80c00017 	ldw	r3,0(r16)
   463b8:	10bfffc4 	addi	r2,r2,-1
   463bc:	15c01426 	beq	r2,r23,46410 <__call_exitprocs+0x154>
   463c0:	80000015 	stw	zero,0(r16)
   463c4:	183fde26 	beq	r3,zero,46340 <__alt_data_end+0xfffdf240>
   463c8:	95c8983a 	sll	r4,r18,r23
   463cc:	a0806217 	ldw	r2,392(r20)
   463d0:	a5800117 	ldw	r22,4(r20)
   463d4:	2084703a 	and	r2,r4,r2
   463d8:	10000b26 	beq	r2,zero,46408 <__call_exitprocs+0x14c>
   463dc:	a0806317 	ldw	r2,396(r20)
   463e0:	2088703a 	and	r4,r4,r2
   463e4:	20000c1e 	bne	r4,zero,46418 <__call_exitprocs+0x15c>
   463e8:	89400017 	ldw	r5,0(r17)
   463ec:	d9000017 	ldw	r4,0(sp)
   463f0:	183ee83a 	callr	r3
   463f4:	a0800117 	ldw	r2,4(r20)
   463f8:	15bfbf1e 	bne	r2,r22,462f8 <__alt_data_end+0xfffdf1f8>
   463fc:	98800017 	ldw	r2,0(r19)
   46400:	153fcf26 	beq	r2,r20,46340 <__alt_data_end+0xfffdf240>
   46404:	003fbc06 	br	462f8 <__alt_data_end+0xfffdf1f8>
   46408:	183ee83a 	callr	r3
   4640c:	003ff906 	br	463f4 <__alt_data_end+0xfffdf2f4>
   46410:	a5c00115 	stw	r23,4(r20)
   46414:	003feb06 	br	463c4 <__alt_data_end+0xfffdf2c4>
   46418:	89000017 	ldw	r4,0(r17)
   4641c:	183ee83a 	callr	r3
   46420:	003ff406 	br	463f4 <__alt_data_end+0xfffdf2f4>
   46424:	a0800017 	ldw	r2,0(r20)
   46428:	a027883a 	mov	r19,r20
   4642c:	1029883a 	mov	r20,r2
   46430:	003fb606 	br	4630c <__alt_data_end+0xfffdf20c>
   46434:	0005883a 	mov	r2,zero
   46438:	003ffb06 	br	46428 <__alt_data_end+0xfffdf328>

0004643c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4643c:	defffd04 	addi	sp,sp,-12
   46440:	df000215 	stw	fp,8(sp)
   46444:	df000204 	addi	fp,sp,8
   46448:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4644c:	0001883a 	nop
   46450:	e0bfff17 	ldw	r2,-4(fp)
   46454:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   46458:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4645c:	10000226 	beq	r2,zero,46468 <_exit+0x2c>
    ALT_SIM_FAIL();
   46460:	002af070 	cmpltui	zero,zero,43969
   46464:	00000106 	br	4646c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   46468:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4646c:	003fff06 	br	4646c <__alt_data_end+0xfffdf36c>
