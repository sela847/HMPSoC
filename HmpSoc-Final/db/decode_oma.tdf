--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=11 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_oma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[10..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[10..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode2883w[1..0]	: WIRE;
	w_anode2892w[3..0]	: WIRE;
	w_anode2909w[3..0]	: WIRE;
	w_anode2919w[3..0]	: WIRE;
	w_anode2929w[3..0]	: WIRE;
	w_anode2939w[3..0]	: WIRE;
	w_anode2949w[3..0]	: WIRE;
	w_anode2959w[3..0]	: WIRE;
	w_anode2969w[3..0]	: WIRE;
	w_anode2981w[1..0]	: WIRE;
	w_anode2988w[3..0]	: WIRE;
	w_anode2999w[3..0]	: WIRE;
	w_anode3009w[3..0]	: WIRE;
	w_anode3019w[3..0]	: WIRE;
	w_anode3029w[3..0]	: WIRE;
	w_anode3039w[3..0]	: WIRE;
	w_anode3049w[3..0]	: WIRE;
	w_anode3059w[3..0]	: WIRE;
	w_data2881w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[10..0] = eq_wire[10..0];
	eq_wire[] = ( ( w_anode3059w[3..3], w_anode3049w[3..3], w_anode3039w[3..3], w_anode3029w[3..3], w_anode3019w[3..3], w_anode3009w[3..3], w_anode2999w[3..3], w_anode2988w[3..3]), ( w_anode2969w[3..3], w_anode2959w[3..3], w_anode2949w[3..3], w_anode2939w[3..3], w_anode2929w[3..3], w_anode2919w[3..3], w_anode2909w[3..3], w_anode2892w[3..3]));
	w_anode2883w[] = ( (w_anode2883w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode2892w[] = ( (w_anode2892w[2..2] & (! w_data2881w[2..2])), (w_anode2892w[1..1] & (! w_data2881w[1..1])), (w_anode2892w[0..0] & (! w_data2881w[0..0])), w_anode2883w[1..1]);
	w_anode2909w[] = ( (w_anode2909w[2..2] & (! w_data2881w[2..2])), (w_anode2909w[1..1] & (! w_data2881w[1..1])), (w_anode2909w[0..0] & w_data2881w[0..0]), w_anode2883w[1..1]);
	w_anode2919w[] = ( (w_anode2919w[2..2] & (! w_data2881w[2..2])), (w_anode2919w[1..1] & w_data2881w[1..1]), (w_anode2919w[0..0] & (! w_data2881w[0..0])), w_anode2883w[1..1]);
	w_anode2929w[] = ( (w_anode2929w[2..2] & (! w_data2881w[2..2])), (w_anode2929w[1..1] & w_data2881w[1..1]), (w_anode2929w[0..0] & w_data2881w[0..0]), w_anode2883w[1..1]);
	w_anode2939w[] = ( (w_anode2939w[2..2] & w_data2881w[2..2]), (w_anode2939w[1..1] & (! w_data2881w[1..1])), (w_anode2939w[0..0] & (! w_data2881w[0..0])), w_anode2883w[1..1]);
	w_anode2949w[] = ( (w_anode2949w[2..2] & w_data2881w[2..2]), (w_anode2949w[1..1] & (! w_data2881w[1..1])), (w_anode2949w[0..0] & w_data2881w[0..0]), w_anode2883w[1..1]);
	w_anode2959w[] = ( (w_anode2959w[2..2] & w_data2881w[2..2]), (w_anode2959w[1..1] & w_data2881w[1..1]), (w_anode2959w[0..0] & (! w_data2881w[0..0])), w_anode2883w[1..1]);
	w_anode2969w[] = ( (w_anode2969w[2..2] & w_data2881w[2..2]), (w_anode2969w[1..1] & w_data2881w[1..1]), (w_anode2969w[0..0] & w_data2881w[0..0]), w_anode2883w[1..1]);
	w_anode2981w[] = ( (w_anode2981w[0..0] & data_wire[3..3]), enable_wire);
	w_anode2988w[] = ( (w_anode2988w[2..2] & (! w_data2881w[2..2])), (w_anode2988w[1..1] & (! w_data2881w[1..1])), (w_anode2988w[0..0] & (! w_data2881w[0..0])), w_anode2981w[1..1]);
	w_anode2999w[] = ( (w_anode2999w[2..2] & (! w_data2881w[2..2])), (w_anode2999w[1..1] & (! w_data2881w[1..1])), (w_anode2999w[0..0] & w_data2881w[0..0]), w_anode2981w[1..1]);
	w_anode3009w[] = ( (w_anode3009w[2..2] & (! w_data2881w[2..2])), (w_anode3009w[1..1] & w_data2881w[1..1]), (w_anode3009w[0..0] & (! w_data2881w[0..0])), w_anode2981w[1..1]);
	w_anode3019w[] = ( (w_anode3019w[2..2] & (! w_data2881w[2..2])), (w_anode3019w[1..1] & w_data2881w[1..1]), (w_anode3019w[0..0] & w_data2881w[0..0]), w_anode2981w[1..1]);
	w_anode3029w[] = ( (w_anode3029w[2..2] & w_data2881w[2..2]), (w_anode3029w[1..1] & (! w_data2881w[1..1])), (w_anode3029w[0..0] & (! w_data2881w[0..0])), w_anode2981w[1..1]);
	w_anode3039w[] = ( (w_anode3039w[2..2] & w_data2881w[2..2]), (w_anode3039w[1..1] & (! w_data2881w[1..1])), (w_anode3039w[0..0] & w_data2881w[0..0]), w_anode2981w[1..1]);
	w_anode3049w[] = ( (w_anode3049w[2..2] & w_data2881w[2..2]), (w_anode3049w[1..1] & w_data2881w[1..1]), (w_anode3049w[0..0] & (! w_data2881w[0..0])), w_anode2981w[1..1]);
	w_anode3059w[] = ( (w_anode3059w[2..2] & w_data2881w[2..2]), (w_anode3059w[1..1] & w_data2881w[1..1]), (w_anode3059w[0..0] & w_data2881w[0..0]), w_anode2981w[1..1]);
	w_data2881w[2..0] = data_wire[2..0];
END;
--VALID FILE
