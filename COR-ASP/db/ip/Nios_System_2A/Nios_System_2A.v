// Nios_System_2A.v

// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module Nios_System_2A (
		output wire [7:0]  addr_external_connection_export,  //  addr_external_connection.export
		input  wire        clk_clk,                          //                       clk.clk
		input  wire [31:0] recv_external_connection_export,  //  recv_external_connection.export
		output wire [7:0]  seg_0_external_connection_export, // seg_0_external_connection.export
		output wire [7:0]  seg_1_external_connection_export, // seg_1_external_connection.export
		output wire [7:0]  seg_2_external_connection_export, // seg_2_external_connection.export
		output wire [7:0]  seg_3_external_connection_export, // seg_3_external_connection.export
		output wire [7:0]  seg_4_external_connection_export, // seg_4_external_connection.export
		output wire [7:0]  seg_5_external_connection_export, // seg_5_external_connection.export
		output wire [31:0] send_external_connection_export   //  send_external_connection.export
	);

	wire         cpu_debug_reset_request_reset;                             // cpu:debug_reset_request -> [addr:reset_n, jtag_uart:rst_n, mm_interconnect_0:jtag_uart_reset_reset_bridge_in_reset_reset, recv:reset_n, rst_controller:reset_in0, rst_controller:reset_in1, seg_0:reset_n, seg_1:reset_n, seg_2:reset_n, seg_3:reset_n, seg_4:reset_n, seg_5:reset_n, send:reset_n]
	wire  [31:0] cpu_data_master_readdata;                                  // mm_interconnect_0:cpu_data_master_readdata -> cpu:d_readdata
	wire         cpu_data_master_waitrequest;                               // mm_interconnect_0:cpu_data_master_waitrequest -> cpu:d_waitrequest
	wire         cpu_data_master_debugaccess;                               // cpu:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:cpu_data_master_debugaccess
	wire  [18:0] cpu_data_master_address;                                   // cpu:d_address -> mm_interconnect_0:cpu_data_master_address
	wire   [3:0] cpu_data_master_byteenable;                                // cpu:d_byteenable -> mm_interconnect_0:cpu_data_master_byteenable
	wire         cpu_data_master_read;                                      // cpu:d_read -> mm_interconnect_0:cpu_data_master_read
	wire         cpu_data_master_readdatavalid;                             // mm_interconnect_0:cpu_data_master_readdatavalid -> cpu:d_readdatavalid
	wire         cpu_data_master_write;                                     // cpu:d_write -> mm_interconnect_0:cpu_data_master_write
	wire  [31:0] cpu_data_master_writedata;                                 // cpu:d_writedata -> mm_interconnect_0:cpu_data_master_writedata
	wire  [31:0] cpu_instruction_master_readdata;                           // mm_interconnect_0:cpu_instruction_master_readdata -> cpu:i_readdata
	wire         cpu_instruction_master_waitrequest;                        // mm_interconnect_0:cpu_instruction_master_waitrequest -> cpu:i_waitrequest
	wire  [18:0] cpu_instruction_master_address;                            // cpu:i_address -> mm_interconnect_0:cpu_instruction_master_address
	wire         cpu_instruction_master_read;                               // cpu:i_read -> mm_interconnect_0:cpu_instruction_master_read
	wire         cpu_instruction_master_readdatavalid;                      // mm_interconnect_0:cpu_instruction_master_readdatavalid -> cpu:i_readdatavalid
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect;  // mm_interconnect_0:jtag_uart_avalon_jtag_slave_chipselect -> jtag_uart:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata;    // jtag_uart:av_readdata -> mm_interconnect_0:jtag_uart_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest; // jtag_uart:av_waitrequest -> mm_interconnect_0:jtag_uart_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_address;     // mm_interconnect_0:jtag_uart_avalon_jtag_slave_address -> jtag_uart:av_address
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_read;        // mm_interconnect_0:jtag_uart_avalon_jtag_slave_read -> jtag_uart:av_read_n
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_write;       // mm_interconnect_0:jtag_uart_avalon_jtag_slave_write -> jtag_uart:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata;   // mm_interconnect_0:jtag_uart_avalon_jtag_slave_writedata -> jtag_uart:av_writedata
	wire  [31:0] mm_interconnect_0_cpu_debug_mem_slave_readdata;            // cpu:debug_mem_slave_readdata -> mm_interconnect_0:cpu_debug_mem_slave_readdata
	wire         mm_interconnect_0_cpu_debug_mem_slave_waitrequest;         // cpu:debug_mem_slave_waitrequest -> mm_interconnect_0:cpu_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_cpu_debug_mem_slave_debugaccess;         // mm_interconnect_0:cpu_debug_mem_slave_debugaccess -> cpu:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_cpu_debug_mem_slave_address;             // mm_interconnect_0:cpu_debug_mem_slave_address -> cpu:debug_mem_slave_address
	wire         mm_interconnect_0_cpu_debug_mem_slave_read;                // mm_interconnect_0:cpu_debug_mem_slave_read -> cpu:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_cpu_debug_mem_slave_byteenable;          // mm_interconnect_0:cpu_debug_mem_slave_byteenable -> cpu:debug_mem_slave_byteenable
	wire         mm_interconnect_0_cpu_debug_mem_slave_write;               // mm_interconnect_0:cpu_debug_mem_slave_write -> cpu:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_cpu_debug_mem_slave_writedata;           // mm_interconnect_0:cpu_debug_mem_slave_writedata -> cpu:debug_mem_slave_writedata
	wire         mm_interconnect_0_onchip_memory_s1_chipselect;             // mm_interconnect_0:onchip_memory_s1_chipselect -> onchip_memory:chipselect
	wire  [31:0] mm_interconnect_0_onchip_memory_s1_readdata;               // onchip_memory:readdata -> mm_interconnect_0:onchip_memory_s1_readdata
	wire  [14:0] mm_interconnect_0_onchip_memory_s1_address;                // mm_interconnect_0:onchip_memory_s1_address -> onchip_memory:address
	wire   [3:0] mm_interconnect_0_onchip_memory_s1_byteenable;             // mm_interconnect_0:onchip_memory_s1_byteenable -> onchip_memory:byteenable
	wire         mm_interconnect_0_onchip_memory_s1_write;                  // mm_interconnect_0:onchip_memory_s1_write -> onchip_memory:write
	wire  [31:0] mm_interconnect_0_onchip_memory_s1_writedata;              // mm_interconnect_0:onchip_memory_s1_writedata -> onchip_memory:writedata
	wire         mm_interconnect_0_onchip_memory_s1_clken;                  // mm_interconnect_0:onchip_memory_s1_clken -> onchip_memory:clken
	wire         mm_interconnect_0_send_s1_chipselect;                      // mm_interconnect_0:send_s1_chipselect -> send:chipselect
	wire  [31:0] mm_interconnect_0_send_s1_readdata;                        // send:readdata -> mm_interconnect_0:send_s1_readdata
	wire   [1:0] mm_interconnect_0_send_s1_address;                         // mm_interconnect_0:send_s1_address -> send:address
	wire         mm_interconnect_0_send_s1_write;                           // mm_interconnect_0:send_s1_write -> send:write_n
	wire  [31:0] mm_interconnect_0_send_s1_writedata;                       // mm_interconnect_0:send_s1_writedata -> send:writedata
	wire  [31:0] mm_interconnect_0_recv_s1_readdata;                        // recv:readdata -> mm_interconnect_0:recv_s1_readdata
	wire   [1:0] mm_interconnect_0_recv_s1_address;                         // mm_interconnect_0:recv_s1_address -> recv:address
	wire         mm_interconnect_0_addr_s1_chipselect;                      // mm_interconnect_0:addr_s1_chipselect -> addr:chipselect
	wire  [31:0] mm_interconnect_0_addr_s1_readdata;                        // addr:readdata -> mm_interconnect_0:addr_s1_readdata
	wire   [1:0] mm_interconnect_0_addr_s1_address;                         // mm_interconnect_0:addr_s1_address -> addr:address
	wire         mm_interconnect_0_addr_s1_write;                           // mm_interconnect_0:addr_s1_write -> addr:write_n
	wire  [31:0] mm_interconnect_0_addr_s1_writedata;                       // mm_interconnect_0:addr_s1_writedata -> addr:writedata
	wire         mm_interconnect_0_seg_0_s1_chipselect;                     // mm_interconnect_0:seg_0_s1_chipselect -> seg_0:chipselect
	wire  [31:0] mm_interconnect_0_seg_0_s1_readdata;                       // seg_0:readdata -> mm_interconnect_0:seg_0_s1_readdata
	wire   [1:0] mm_interconnect_0_seg_0_s1_address;                        // mm_interconnect_0:seg_0_s1_address -> seg_0:address
	wire         mm_interconnect_0_seg_0_s1_write;                          // mm_interconnect_0:seg_0_s1_write -> seg_0:write_n
	wire  [31:0] mm_interconnect_0_seg_0_s1_writedata;                      // mm_interconnect_0:seg_0_s1_writedata -> seg_0:writedata
	wire         mm_interconnect_0_seg_1_s1_chipselect;                     // mm_interconnect_0:seg_1_s1_chipselect -> seg_1:chipselect
	wire  [31:0] mm_interconnect_0_seg_1_s1_readdata;                       // seg_1:readdata -> mm_interconnect_0:seg_1_s1_readdata
	wire   [1:0] mm_interconnect_0_seg_1_s1_address;                        // mm_interconnect_0:seg_1_s1_address -> seg_1:address
	wire         mm_interconnect_0_seg_1_s1_write;                          // mm_interconnect_0:seg_1_s1_write -> seg_1:write_n
	wire  [31:0] mm_interconnect_0_seg_1_s1_writedata;                      // mm_interconnect_0:seg_1_s1_writedata -> seg_1:writedata
	wire         mm_interconnect_0_seg_2_s1_chipselect;                     // mm_interconnect_0:seg_2_s1_chipselect -> seg_2:chipselect
	wire  [31:0] mm_interconnect_0_seg_2_s1_readdata;                       // seg_2:readdata -> mm_interconnect_0:seg_2_s1_readdata
	wire   [1:0] mm_interconnect_0_seg_2_s1_address;                        // mm_interconnect_0:seg_2_s1_address -> seg_2:address
	wire         mm_interconnect_0_seg_2_s1_write;                          // mm_interconnect_0:seg_2_s1_write -> seg_2:write_n
	wire  [31:0] mm_interconnect_0_seg_2_s1_writedata;                      // mm_interconnect_0:seg_2_s1_writedata -> seg_2:writedata
	wire         mm_interconnect_0_seg_3_s1_chipselect;                     // mm_interconnect_0:seg_3_s1_chipselect -> seg_3:chipselect
	wire  [31:0] mm_interconnect_0_seg_3_s1_readdata;                       // seg_3:readdata -> mm_interconnect_0:seg_3_s1_readdata
	wire   [1:0] mm_interconnect_0_seg_3_s1_address;                        // mm_interconnect_0:seg_3_s1_address -> seg_3:address
	wire         mm_interconnect_0_seg_3_s1_write;                          // mm_interconnect_0:seg_3_s1_write -> seg_3:write_n
	wire  [31:0] mm_interconnect_0_seg_3_s1_writedata;                      // mm_interconnect_0:seg_3_s1_writedata -> seg_3:writedata
	wire         mm_interconnect_0_seg_4_s1_chipselect;                     // mm_interconnect_0:seg_4_s1_chipselect -> seg_4:chipselect
	wire  [31:0] mm_interconnect_0_seg_4_s1_readdata;                       // seg_4:readdata -> mm_interconnect_0:seg_4_s1_readdata
	wire   [1:0] mm_interconnect_0_seg_4_s1_address;                        // mm_interconnect_0:seg_4_s1_address -> seg_4:address
	wire         mm_interconnect_0_seg_4_s1_write;                          // mm_interconnect_0:seg_4_s1_write -> seg_4:write_n
	wire  [31:0] mm_interconnect_0_seg_4_s1_writedata;                      // mm_interconnect_0:seg_4_s1_writedata -> seg_4:writedata
	wire         mm_interconnect_0_seg_5_s1_chipselect;                     // mm_interconnect_0:seg_5_s1_chipselect -> seg_5:chipselect
	wire  [31:0] mm_interconnect_0_seg_5_s1_readdata;                       // seg_5:readdata -> mm_interconnect_0:seg_5_s1_readdata
	wire   [1:0] mm_interconnect_0_seg_5_s1_address;                        // mm_interconnect_0:seg_5_s1_address -> seg_5:address
	wire         mm_interconnect_0_seg_5_s1_write;                          // mm_interconnect_0:seg_5_s1_write -> seg_5:write_n
	wire  [31:0] mm_interconnect_0_seg_5_s1_writedata;                      // mm_interconnect_0:seg_5_s1_writedata -> seg_5:writedata
	wire         irq_mapper_receiver0_irq;                                  // jtag_uart:av_irq -> irq_mapper:receiver0_irq
	wire  [31:0] cpu_irq_irq;                                               // irq_mapper:sender_irq -> cpu:irq
	wire         rst_controller_reset_out_reset;                            // rst_controller:reset_out -> [cpu:reset_n, irq_mapper:reset, mm_interconnect_0:cpu_reset_reset_bridge_in_reset_reset, onchip_memory:reset]
	wire         rst_controller_reset_out_reset_req;                        // rst_controller:reset_req -> [cpu:reset_req, onchip_memory:reset_req, rst_translator:reset_req_in]

	Nios_System_2A_addr addr (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~cpu_debug_reset_request_reset),       //               reset.reset_n
		.address    (mm_interconnect_0_addr_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_addr_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_addr_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_addr_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_addr_s1_readdata),   //                    .readdata
		.out_port   (addr_external_connection_export)       // external_connection.export
	);

	Nios_System_2A_cpu cpu (
		.clk                                 (clk_clk),                                           //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                   //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                //                          .reset_req
		.d_address                           (cpu_data_master_address),                           //               data_master.address
		.d_byteenable                        (cpu_data_master_byteenable),                        //                          .byteenable
		.d_read                              (cpu_data_master_read),                              //                          .read
		.d_readdata                          (cpu_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (cpu_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (cpu_data_master_write),                             //                          .write
		.d_writedata                         (cpu_data_master_writedata),                         //                          .writedata
		.d_readdatavalid                     (cpu_data_master_readdatavalid),                     //                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (cpu_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (cpu_instruction_master_address),                    //        instruction_master.address
		.i_read                              (cpu_instruction_master_read),                       //                          .read
		.i_readdata                          (cpu_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (cpu_instruction_master_waitrequest),                //                          .waitrequest
		.i_readdatavalid                     (cpu_instruction_master_readdatavalid),              //                          .readdatavalid
		.irq                                 (cpu_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (cpu_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_cpu_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_cpu_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_cpu_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_cpu_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_cpu_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_cpu_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_cpu_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_cpu_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                   // custom_instruction_master.readra
	);

	Nios_System_2A_jtag_uart jtag_uart (
		.clk            (clk_clk),                                                   //               clk.clk
		.rst_n          (~cpu_debug_reset_request_reset),                            //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver0_irq)                                   //               irq.irq
	);

	Nios_System_2A_onchip_memory onchip_memory (
		.clk        (clk_clk),                                       //   clk1.clk
		.address    (mm_interconnect_0_onchip_memory_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_memory_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_memory_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_memory_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_memory_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_memory_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_memory_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),                // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),            //       .reset_req
		.freeze     (1'b0)                                           // (terminated)
	);

	Nios_System_2A_recv recv (
		.clk      (clk_clk),                            //                 clk.clk
		.reset_n  (~cpu_debug_reset_request_reset),     //               reset.reset_n
		.address  (mm_interconnect_0_recv_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_recv_s1_readdata), //                    .readdata
		.in_port  (recv_external_connection_export)     // external_connection.export
	);

	Nios_System_2A_addr seg_0 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~cpu_debug_reset_request_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg_0_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg_0_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg_0_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg_0_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg_0_s1_readdata),   //                    .readdata
		.out_port   (seg_0_external_connection_export)       // external_connection.export
	);

	Nios_System_2A_addr seg_1 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~cpu_debug_reset_request_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg_1_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg_1_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg_1_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg_1_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg_1_s1_readdata),   //                    .readdata
		.out_port   (seg_1_external_connection_export)       // external_connection.export
	);

	Nios_System_2A_addr seg_2 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~cpu_debug_reset_request_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg_2_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg_2_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg_2_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg_2_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg_2_s1_readdata),   //                    .readdata
		.out_port   (seg_2_external_connection_export)       // external_connection.export
	);

	Nios_System_2A_addr seg_3 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~cpu_debug_reset_request_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg_3_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg_3_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg_3_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg_3_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg_3_s1_readdata),   //                    .readdata
		.out_port   (seg_3_external_connection_export)       // external_connection.export
	);

	Nios_System_2A_addr seg_4 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~cpu_debug_reset_request_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg_4_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg_4_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg_4_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg_4_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg_4_s1_readdata),   //                    .readdata
		.out_port   (seg_4_external_connection_export)       // external_connection.export
	);

	Nios_System_2A_addr seg_5 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~cpu_debug_reset_request_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg_5_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg_5_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg_5_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg_5_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg_5_s1_readdata),   //                    .readdata
		.out_port   (seg_5_external_connection_export)       // external_connection.export
	);

	Nios_System_2A_send send (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~cpu_debug_reset_request_reset),       //               reset.reset_n
		.address    (mm_interconnect_0_send_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_send_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_send_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_send_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_send_s1_readdata),   //                    .readdata
		.out_port   (send_external_connection_export)       // external_connection.export
	);

	Nios_System_2A_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                               (clk_clk),                                                   //                             clk_0_clk.clk
		.cpu_reset_reset_bridge_in_reset_reset       (rst_controller_reset_out_reset),                            //       cpu_reset_reset_bridge_in_reset.reset
		.jtag_uart_reset_reset_bridge_in_reset_reset (cpu_debug_reset_request_reset),                             // jtag_uart_reset_reset_bridge_in_reset.reset
		.cpu_data_master_address                     (cpu_data_master_address),                                   //                       cpu_data_master.address
		.cpu_data_master_waitrequest                 (cpu_data_master_waitrequest),                               //                                      .waitrequest
		.cpu_data_master_byteenable                  (cpu_data_master_byteenable),                                //                                      .byteenable
		.cpu_data_master_read                        (cpu_data_master_read),                                      //                                      .read
		.cpu_data_master_readdata                    (cpu_data_master_readdata),                                  //                                      .readdata
		.cpu_data_master_readdatavalid               (cpu_data_master_readdatavalid),                             //                                      .readdatavalid
		.cpu_data_master_write                       (cpu_data_master_write),                                     //                                      .write
		.cpu_data_master_writedata                   (cpu_data_master_writedata),                                 //                                      .writedata
		.cpu_data_master_debugaccess                 (cpu_data_master_debugaccess),                               //                                      .debugaccess
		.cpu_instruction_master_address              (cpu_instruction_master_address),                            //                cpu_instruction_master.address
		.cpu_instruction_master_waitrequest          (cpu_instruction_master_waitrequest),                        //                                      .waitrequest
		.cpu_instruction_master_read                 (cpu_instruction_master_read),                               //                                      .read
		.cpu_instruction_master_readdata             (cpu_instruction_master_readdata),                           //                                      .readdata
		.cpu_instruction_master_readdatavalid        (cpu_instruction_master_readdatavalid),                      //                                      .readdatavalid
		.addr_s1_address                             (mm_interconnect_0_addr_s1_address),                         //                               addr_s1.address
		.addr_s1_write                               (mm_interconnect_0_addr_s1_write),                           //                                      .write
		.addr_s1_readdata                            (mm_interconnect_0_addr_s1_readdata),                        //                                      .readdata
		.addr_s1_writedata                           (mm_interconnect_0_addr_s1_writedata),                       //                                      .writedata
		.addr_s1_chipselect                          (mm_interconnect_0_addr_s1_chipselect),                      //                                      .chipselect
		.cpu_debug_mem_slave_address                 (mm_interconnect_0_cpu_debug_mem_slave_address),             //                   cpu_debug_mem_slave.address
		.cpu_debug_mem_slave_write                   (mm_interconnect_0_cpu_debug_mem_slave_write),               //                                      .write
		.cpu_debug_mem_slave_read                    (mm_interconnect_0_cpu_debug_mem_slave_read),                //                                      .read
		.cpu_debug_mem_slave_readdata                (mm_interconnect_0_cpu_debug_mem_slave_readdata),            //                                      .readdata
		.cpu_debug_mem_slave_writedata               (mm_interconnect_0_cpu_debug_mem_slave_writedata),           //                                      .writedata
		.cpu_debug_mem_slave_byteenable              (mm_interconnect_0_cpu_debug_mem_slave_byteenable),          //                                      .byteenable
		.cpu_debug_mem_slave_waitrequest             (mm_interconnect_0_cpu_debug_mem_slave_waitrequest),         //                                      .waitrequest
		.cpu_debug_mem_slave_debugaccess             (mm_interconnect_0_cpu_debug_mem_slave_debugaccess),         //                                      .debugaccess
		.jtag_uart_avalon_jtag_slave_address         (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     //           jtag_uart_avalon_jtag_slave.address
		.jtag_uart_avalon_jtag_slave_write           (mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),       //                                      .write
		.jtag_uart_avalon_jtag_slave_read            (mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),        //                                      .read
		.jtag_uart_avalon_jtag_slave_readdata        (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    //                                      .readdata
		.jtag_uart_avalon_jtag_slave_writedata       (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   //                                      .writedata
		.jtag_uart_avalon_jtag_slave_waitrequest     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), //                                      .waitrequest
		.jtag_uart_avalon_jtag_slave_chipselect      (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  //                                      .chipselect
		.onchip_memory_s1_address                    (mm_interconnect_0_onchip_memory_s1_address),                //                      onchip_memory_s1.address
		.onchip_memory_s1_write                      (mm_interconnect_0_onchip_memory_s1_write),                  //                                      .write
		.onchip_memory_s1_readdata                   (mm_interconnect_0_onchip_memory_s1_readdata),               //                                      .readdata
		.onchip_memory_s1_writedata                  (mm_interconnect_0_onchip_memory_s1_writedata),              //                                      .writedata
		.onchip_memory_s1_byteenable                 (mm_interconnect_0_onchip_memory_s1_byteenable),             //                                      .byteenable
		.onchip_memory_s1_chipselect                 (mm_interconnect_0_onchip_memory_s1_chipselect),             //                                      .chipselect
		.onchip_memory_s1_clken                      (mm_interconnect_0_onchip_memory_s1_clken),                  //                                      .clken
		.recv_s1_address                             (mm_interconnect_0_recv_s1_address),                         //                               recv_s1.address
		.recv_s1_readdata                            (mm_interconnect_0_recv_s1_readdata),                        //                                      .readdata
		.seg_0_s1_address                            (mm_interconnect_0_seg_0_s1_address),                        //                              seg_0_s1.address
		.seg_0_s1_write                              (mm_interconnect_0_seg_0_s1_write),                          //                                      .write
		.seg_0_s1_readdata                           (mm_interconnect_0_seg_0_s1_readdata),                       //                                      .readdata
		.seg_0_s1_writedata                          (mm_interconnect_0_seg_0_s1_writedata),                      //                                      .writedata
		.seg_0_s1_chipselect                         (mm_interconnect_0_seg_0_s1_chipselect),                     //                                      .chipselect
		.seg_1_s1_address                            (mm_interconnect_0_seg_1_s1_address),                        //                              seg_1_s1.address
		.seg_1_s1_write                              (mm_interconnect_0_seg_1_s1_write),                          //                                      .write
		.seg_1_s1_readdata                           (mm_interconnect_0_seg_1_s1_readdata),                       //                                      .readdata
		.seg_1_s1_writedata                          (mm_interconnect_0_seg_1_s1_writedata),                      //                                      .writedata
		.seg_1_s1_chipselect                         (mm_interconnect_0_seg_1_s1_chipselect),                     //                                      .chipselect
		.seg_2_s1_address                            (mm_interconnect_0_seg_2_s1_address),                        //                              seg_2_s1.address
		.seg_2_s1_write                              (mm_interconnect_0_seg_2_s1_write),                          //                                      .write
		.seg_2_s1_readdata                           (mm_interconnect_0_seg_2_s1_readdata),                       //                                      .readdata
		.seg_2_s1_writedata                          (mm_interconnect_0_seg_2_s1_writedata),                      //                                      .writedata
		.seg_2_s1_chipselect                         (mm_interconnect_0_seg_2_s1_chipselect),                     //                                      .chipselect
		.seg_3_s1_address                            (mm_interconnect_0_seg_3_s1_address),                        //                              seg_3_s1.address
		.seg_3_s1_write                              (mm_interconnect_0_seg_3_s1_write),                          //                                      .write
		.seg_3_s1_readdata                           (mm_interconnect_0_seg_3_s1_readdata),                       //                                      .readdata
		.seg_3_s1_writedata                          (mm_interconnect_0_seg_3_s1_writedata),                      //                                      .writedata
		.seg_3_s1_chipselect                         (mm_interconnect_0_seg_3_s1_chipselect),                     //                                      .chipselect
		.seg_4_s1_address                            (mm_interconnect_0_seg_4_s1_address),                        //                              seg_4_s1.address
		.seg_4_s1_write                              (mm_interconnect_0_seg_4_s1_write),                          //                                      .write
		.seg_4_s1_readdata                           (mm_interconnect_0_seg_4_s1_readdata),                       //                                      .readdata
		.seg_4_s1_writedata                          (mm_interconnect_0_seg_4_s1_writedata),                      //                                      .writedata
		.seg_4_s1_chipselect                         (mm_interconnect_0_seg_4_s1_chipselect),                     //                                      .chipselect
		.seg_5_s1_address                            (mm_interconnect_0_seg_5_s1_address),                        //                              seg_5_s1.address
		.seg_5_s1_write                              (mm_interconnect_0_seg_5_s1_write),                          //                                      .write
		.seg_5_s1_readdata                           (mm_interconnect_0_seg_5_s1_readdata),                       //                                      .readdata
		.seg_5_s1_writedata                          (mm_interconnect_0_seg_5_s1_writedata),                      //                                      .writedata
		.seg_5_s1_chipselect                         (mm_interconnect_0_seg_5_s1_chipselect),                     //                                      .chipselect
		.send_s1_address                             (mm_interconnect_0_send_s1_address),                         //                               send_s1.address
		.send_s1_write                               (mm_interconnect_0_send_s1_write),                           //                                      .write
		.send_s1_readdata                            (mm_interconnect_0_send_s1_readdata),                        //                                      .readdata
		.send_s1_writedata                           (mm_interconnect_0_send_s1_writedata),                       //                                      .writedata
		.send_s1_chipselect                          (mm_interconnect_0_send_s1_chipselect)                       //                                      .chipselect
	);

	Nios_System_2A_irq_mapper irq_mapper (
		.clk           (clk_clk),                        //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.sender_irq    (cpu_irq_irq)                     //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (cpu_debug_reset_request_reset),      // reset_in0.reset
		.reset_in1      (cpu_debug_reset_request_reset),      // reset_in1.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
